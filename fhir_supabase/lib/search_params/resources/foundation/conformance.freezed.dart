// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'conformance.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#custom-getters-and-methods');

/// @nodoc
mixin _$CapabilityStatementSearchParams {
  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent =>
      throw _privateConstructorUsedError;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter =>
      throw _privateConstructorUsedError;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas => throw _privateConstructorUsedError;

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId => throw _privateConstructorUsedError;

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated =>
      throw _privateConstructorUsedError;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList =>
      throw _privateConstructorUsedError;

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile =>
      throw _privateConstructorUsedError;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery =>
      throw _privateConstructorUsedError;

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity =>
      throw _privateConstructorUsedError;

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource => throw _privateConstructorUsedError;

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag => throw _privateConstructorUsedError;

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText =>
      throw _privateConstructorUsedError;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType => throw _privateConstructorUsedError;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context => throw _privateConstructorUsedError;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity =>
      throw _privateConstructorUsedError;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType => throw _privateConstructorUsedError;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date => throw _privateConstructorUsedError;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description => throw _privateConstructorUsedError;

  /// [fhirversion] The version of FHIR
  List<SearchParamToken> get fhirversion => throw _privateConstructorUsedError;

  /// [format] formats supported (xml | json | ttl | mime type)
  List<SearchParamToken> get format => throw _privateConstructorUsedError;

  /// [guide] Implementation guides supported
  List<SearchParamReference> get guide => throw _privateConstructorUsedError;

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  List<SearchParamToken> get jurisdiction => throw _privateConstructorUsedError;

  /// [mode] Mode - restful (server/client) or messaging (sender/receiver)
  List<SearchParamToken> get mode => throw _privateConstructorUsedError;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name => throw _privateConstructorUsedError;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher => throw _privateConstructorUsedError;

  /// [resource] Name of a resource mentioned in a capability statement
  List<SearchParamToken> get resource => throw _privateConstructorUsedError;

  /// [resourceProfile] A profile id invoked in a capability statement
  @JsonKey(name: 'resource-profile')
  List<SearchParamReference> get resourceProfile_ =>
      throw _privateConstructorUsedError;

  /// [securityService] OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates
  @JsonKey(name: 'security-service')
  List<SearchParamToken> get securityService =>
      throw _privateConstructorUsedError;

  /// [software] Part of the name of a software application
  List<SearchParamString> get software => throw _privateConstructorUsedError;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status => throw _privateConstructorUsedError;

  /// [supportedProfile] Profiles for use cases supported
  @JsonKey(name: 'supported-profile')
  List<SearchParamReference> get supportedProfile =>
      throw _privateConstructorUsedError;

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  List<SearchParamString> get title => throw _privateConstructorUsedError;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url => throw _privateConstructorUsedError;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version => throw _privateConstructorUsedError;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity =>
      throw _privateConstructorUsedError;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue =>
      throw _privateConstructorUsedError;

  @JsonKey(ignore: true)
  $CapabilityStatementSearchParamsCopyWith<CapabilityStatementSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $CapabilityStatementSearchParamsCopyWith<$Res> {
  factory $CapabilityStatementSearchParamsCopyWith(
          CapabilityStatementSearchParams value,
          $Res Function(CapabilityStatementSearchParams) then) =
      _$CapabilityStatementSearchParamsCopyWithImpl<$Res,
          CapabilityStatementSearchParams>;
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamToken> fhirversion,
      List<SearchParamToken> format,
      List<SearchParamReference> guide,
      List<SearchParamToken> jurisdiction,
      List<SearchParamToken> mode,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> resource,
      @JsonKey(name: 'resource-profile')
          List<SearchParamReference> resourceProfile_,
      @JsonKey(name: 'security-service')
          List<SearchParamToken> securityService,
      List<SearchParamString> software,
      List<SearchParamToken> status,
      @JsonKey(name: 'supported-profile')
          List<SearchParamReference> supportedProfile,
      List<SearchParamString> title,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue});
}

/// @nodoc
class _$CapabilityStatementSearchParamsCopyWithImpl<$Res,
        $Val extends CapabilityStatementSearchParams>
    implements $CapabilityStatementSearchParamsCopyWith<$Res> {
  _$CapabilityStatementSearchParamsCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? fhirversion = null,
    Object? format = null,
    Object? guide = null,
    Object? jurisdiction = null,
    Object? mode = null,
    Object? name = null,
    Object? publisher = null,
    Object? resource = null,
    Object? resourceProfile_ = null,
    Object? securityService = null,
    Object? software = null,
    Object? status = null,
    Object? supportedProfile = null,
    Object? title = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
  }) {
    return _then(_value.copyWith(
      resourceContent: null == resourceContent
          ? _value.resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value.resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value.resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value.resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value.resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value.resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value.resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value.resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value.resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value.resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value.resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value.resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value.resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value.context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value.contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value.contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value.date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      fhirversion: null == fhirversion
          ? _value.fhirversion
          : fhirversion // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      format: null == format
          ? _value.format
          : format // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      guide: null == guide
          ? _value.guide
          : guide // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      jurisdiction: null == jurisdiction
          ? _value.jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      mode: null == mode
          ? _value.mode
          : mode // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value.publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resource: null == resource
          ? _value.resource
          : resource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceProfile_: null == resourceProfile_
          ? _value.resourceProfile_
          : resourceProfile_ // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      securityService: null == securityService
          ? _value.securityService
          : securityService // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      software: null == software
          ? _value.software
          : software // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      supportedProfile: null == supportedProfile
          ? _value.supportedProfile
          : supportedProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      title: null == title
          ? _value.title
          : title // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      url: null == url
          ? _value.url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value.version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value.contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value.contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$_CapabilityStatementSearchParamsCopyWith<$Res>
    implements $CapabilityStatementSearchParamsCopyWith<$Res> {
  factory _$$_CapabilityStatementSearchParamsCopyWith(
          _$_CapabilityStatementSearchParams value,
          $Res Function(_$_CapabilityStatementSearchParams) then) =
      __$$_CapabilityStatementSearchParamsCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamToken> fhirversion,
      List<SearchParamToken> format,
      List<SearchParamReference> guide,
      List<SearchParamToken> jurisdiction,
      List<SearchParamToken> mode,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> resource,
      @JsonKey(name: 'resource-profile')
          List<SearchParamReference> resourceProfile_,
      @JsonKey(name: 'security-service')
          List<SearchParamToken> securityService,
      List<SearchParamString> software,
      List<SearchParamToken> status,
      @JsonKey(name: 'supported-profile')
          List<SearchParamReference> supportedProfile,
      List<SearchParamString> title,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue});
}

/// @nodoc
class __$$_CapabilityStatementSearchParamsCopyWithImpl<$Res>
    extends _$CapabilityStatementSearchParamsCopyWithImpl<$Res,
        _$_CapabilityStatementSearchParams>
    implements _$$_CapabilityStatementSearchParamsCopyWith<$Res> {
  __$$_CapabilityStatementSearchParamsCopyWithImpl(
      _$_CapabilityStatementSearchParams _value,
      $Res Function(_$_CapabilityStatementSearchParams) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? fhirversion = null,
    Object? format = null,
    Object? guide = null,
    Object? jurisdiction = null,
    Object? mode = null,
    Object? name = null,
    Object? publisher = null,
    Object? resource = null,
    Object? resourceProfile_ = null,
    Object? securityService = null,
    Object? software = null,
    Object? status = null,
    Object? supportedProfile = null,
    Object? title = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
  }) {
    return _then(_$_CapabilityStatementSearchParams(
      resourceContent: null == resourceContent
          ? _value._resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value._resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value._resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value._resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value._resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value._resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value._resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value._resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value._resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value._resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value._resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value._resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value._resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value._context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value._contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value._contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value._date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value._description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      fhirversion: null == fhirversion
          ? _value._fhirversion
          : fhirversion // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      format: null == format
          ? _value._format
          : format // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      guide: null == guide
          ? _value._guide
          : guide // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      jurisdiction: null == jurisdiction
          ? _value._jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      mode: null == mode
          ? _value._mode
          : mode // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value._name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value._publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resource: null == resource
          ? _value._resource
          : resource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceProfile_: null == resourceProfile_
          ? _value._resourceProfile_
          : resourceProfile_ // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      securityService: null == securityService
          ? _value._securityService
          : securityService // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      software: null == software
          ? _value._software
          : software // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value._status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      supportedProfile: null == supportedProfile
          ? _value._supportedProfile
          : supportedProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      title: null == title
          ? _value._title
          : title // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      url: null == url
          ? _value._url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value._version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value._contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value._contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
    ));
  }
}

/// @nodoc

class _$_CapabilityStatementSearchParams
    extends _CapabilityStatementSearchParams {
  const _$_CapabilityStatementSearchParams(
      {@JsonKey(name: '_content')
          final List<SearchParamString> resourceContent = const [],
      @JsonKey(name: '_filter')
          final List<SearchParamToken> resourceFilter = const [],
      @JsonKey(name: '_has')
          final List<SearchParamString> resourceHas = const [],
      @JsonKey(name: '_id')
          final List<SearchParamToken> resourceId = const [],
      @JsonKey(name: '_lastUpdated')
          final List<SearchParamDate> resourceLastUpdated = const [],
      @JsonKey(name: '_list')
          final List<SearchParamString> resourceList = const [],
      @JsonKey(name: '_profile')
          final List<SearchParamUri> resourceProfile = const [],
      @JsonKey(name: '_query')
          final List<SearchParamToken> resourceQuery = const [],
      @JsonKey(name: '_security')
          final List<SearchParamToken> resourceSecurity = const [],
      @JsonKey(name: '_source')
          final List<SearchParamUri> resourceSource = const [],
      @JsonKey(name: '_tag')
          final List<SearchParamToken> resourceTag = const [],
      @JsonKey(name: '_text')
          final List<SearchParamString> resourceText = const [],
      @JsonKey(name: '_type')
          final List<SearchParamToken> resourceType = const [],
      final List<SearchParamToken> context = const [],
      @JsonKey(name: 'context-quantity')
          final List<SearchParamQuantity> contextQuantity = const [],
      @JsonKey(name: 'context-type')
          final List<SearchParamToken> contextType = const [],
      final List<SearchParamDate> date = const [],
      final List<SearchParamString> description = const [],
      final List<SearchParamToken> fhirversion = const [],
      final List<SearchParamToken> format = const [],
      final List<SearchParamReference> guide = const [],
      final List<SearchParamToken> jurisdiction = const [],
      final List<SearchParamToken> mode = const [],
      final List<SearchParamString> name = const [],
      final List<SearchParamString> publisher = const [],
      final List<SearchParamToken> resource = const [],
      @JsonKey(name: 'resource-profile')
          final List<SearchParamReference> resourceProfile_ = const [],
      @JsonKey(name: 'security-service')
          final List<SearchParamToken> securityService = const [],
      final List<SearchParamString> software = const [],
      final List<SearchParamToken> status = const [],
      @JsonKey(name: 'supported-profile')
          final List<SearchParamReference> supportedProfile = const [],
      final List<SearchParamString> title = const [],
      final List<SearchParamUri> url = const [],
      final List<SearchParamToken> version = const [],
      @JsonKey(name: 'context-type-quantity')
          final List<SearchParamComposite> contextTypeQuantity = const [],
      @JsonKey(name: 'context-type-value')
          final List<SearchParamComposite> contextTypeValue = const []})
      : _resourceContent = resourceContent,
        _resourceFilter = resourceFilter,
        _resourceHas = resourceHas,
        _resourceId = resourceId,
        _resourceLastUpdated = resourceLastUpdated,
        _resourceList = resourceList,
        _resourceProfile = resourceProfile,
        _resourceQuery = resourceQuery,
        _resourceSecurity = resourceSecurity,
        _resourceSource = resourceSource,
        _resourceTag = resourceTag,
        _resourceText = resourceText,
        _resourceType = resourceType,
        _context = context,
        _contextQuantity = contextQuantity,
        _contextType = contextType,
        _date = date,
        _description = description,
        _fhirversion = fhirversion,
        _format = format,
        _guide = guide,
        _jurisdiction = jurisdiction,
        _mode = mode,
        _name = name,
        _publisher = publisher,
        _resource = resource,
        _resourceProfile_ = resourceProfile_,
        _securityService = securityService,
        _software = software,
        _status = status,
        _supportedProfile = supportedProfile,
        _title = title,
        _url = url,
        _version = version,
        _contextTypeQuantity = contextTypeQuantity,
        _contextTypeValue = contextTypeValue,
        super._();

  /// [resourceContent] Search on the entire content of the resource
  final List<SearchParamString> _resourceContent;

  /// [resourceContent] Search on the entire content of the resource
  @override
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent {
    if (_resourceContent is EqualUnmodifiableListView) return _resourceContent;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceContent);
  }

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  final List<SearchParamToken> _resourceFilter;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @override
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter {
    if (_resourceFilter is EqualUnmodifiableListView) return _resourceFilter;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceFilter);
  }

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  final List<SearchParamString> _resourceHas;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @override
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas {
    if (_resourceHas is EqualUnmodifiableListView) return _resourceHas;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceHas);
  }

  /// [resourceId] Logical id of this artifact
  final List<SearchParamToken> _resourceId;

  /// [resourceId] Logical id of this artifact
  @override
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId {
    if (_resourceId is EqualUnmodifiableListView) return _resourceId;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceId);
  }

  /// [resourceLastUpdated] When the resource version last changed
  final List<SearchParamDate> _resourceLastUpdated;

  /// [resourceLastUpdated] When the resource version last changed
  @override
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated {
    if (_resourceLastUpdated is EqualUnmodifiableListView)
      return _resourceLastUpdated;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceLastUpdated);
  }

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  final List<SearchParamString> _resourceList;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @override
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList {
    if (_resourceList is EqualUnmodifiableListView) return _resourceList;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceList);
  }

  /// [resourceProfile] Profiles this resource claims to conform to
  final List<SearchParamUri> _resourceProfile;

  /// [resourceProfile] Profiles this resource claims to conform to
  @override
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile {
    if (_resourceProfile is EqualUnmodifiableListView) return _resourceProfile;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceProfile);
  }

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  final List<SearchParamToken> _resourceQuery;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @override
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery {
    if (_resourceQuery is EqualUnmodifiableListView) return _resourceQuery;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceQuery);
  }

  /// [resourceSecurity] Security Labels applied to this resource
  final List<SearchParamToken> _resourceSecurity;

  /// [resourceSecurity] Security Labels applied to this resource
  @override
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity {
    if (_resourceSecurity is EqualUnmodifiableListView)
      return _resourceSecurity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSecurity);
  }

  /// [resourceSource] Identifies where the resource comes from
  final List<SearchParamUri> _resourceSource;

  /// [resourceSource] Identifies where the resource comes from
  @override
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource {
    if (_resourceSource is EqualUnmodifiableListView) return _resourceSource;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSource);
  }

  /// [resourceTag] Tags applied to this resource
  final List<SearchParamToken> _resourceTag;

  /// [resourceTag] Tags applied to this resource
  @override
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag {
    if (_resourceTag is EqualUnmodifiableListView) return _resourceTag;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceTag);
  }

  /// [resourceText] Search on the narrative text (html) of the resource
  final List<SearchParamString> _resourceText;

  /// [resourceText] Search on the narrative text (html) of the resource
  @override
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText {
    if (_resourceText is EqualUnmodifiableListView) return _resourceText;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceText);
  }

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  final List<SearchParamToken> _resourceType;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @override
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType {
    if (_resourceType is EqualUnmodifiableListView) return _resourceType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceType);
  }

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  final List<SearchParamToken> _context;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  @override
  @JsonKey()
  List<SearchParamToken> get context {
    if (_context is EqualUnmodifiableListView) return _context;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_context);
  }

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  final List<SearchParamQuantity> _contextQuantity;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @override
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity {
    if (_contextQuantity is EqualUnmodifiableListView) return _contextQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextQuantity);
  }

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  final List<SearchParamToken> _contextType;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @override
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType {
    if (_contextType is EqualUnmodifiableListView) return _contextType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextType);
  }

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  final List<SearchParamDate> _date;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  @override
  @JsonKey()
  List<SearchParamDate> get date {
    if (_date is EqualUnmodifiableListView) return _date;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_date);
  }

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  final List<SearchParamString> _description;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  @override
  @JsonKey()
  List<SearchParamString> get description {
    if (_description is EqualUnmodifiableListView) return _description;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_description);
  }

  /// [fhirversion] The version of FHIR
  final List<SearchParamToken> _fhirversion;

  /// [fhirversion] The version of FHIR
  @override
  @JsonKey()
  List<SearchParamToken> get fhirversion {
    if (_fhirversion is EqualUnmodifiableListView) return _fhirversion;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_fhirversion);
  }

  /// [format] formats supported (xml | json | ttl | mime type)
  final List<SearchParamToken> _format;

  /// [format] formats supported (xml | json | ttl | mime type)
  @override
  @JsonKey()
  List<SearchParamToken> get format {
    if (_format is EqualUnmodifiableListView) return _format;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_format);
  }

  /// [guide] Implementation guides supported
  final List<SearchParamReference> _guide;

  /// [guide] Implementation guides supported
  @override
  @JsonKey()
  List<SearchParamReference> get guide {
    if (_guide is EqualUnmodifiableListView) return _guide;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_guide);
  }

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  final List<SearchParamToken> _jurisdiction;

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  @override
  @JsonKey()
  List<SearchParamToken> get jurisdiction {
    if (_jurisdiction is EqualUnmodifiableListView) return _jurisdiction;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_jurisdiction);
  }

  /// [mode] Mode - restful (server/client) or messaging (sender/receiver)
  final List<SearchParamToken> _mode;

  /// [mode] Mode - restful (server/client) or messaging (sender/receiver)
  @override
  @JsonKey()
  List<SearchParamToken> get mode {
    if (_mode is EqualUnmodifiableListView) return _mode;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_mode);
  }

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  final List<SearchParamString> _name;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  @override
  @JsonKey()
  List<SearchParamString> get name {
    if (_name is EqualUnmodifiableListView) return _name;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_name);
  }

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  final List<SearchParamString> _publisher;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  @override
  @JsonKey()
  List<SearchParamString> get publisher {
    if (_publisher is EqualUnmodifiableListView) return _publisher;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_publisher);
  }

  /// [resource] Name of a resource mentioned in a capability statement
  final List<SearchParamToken> _resource;

  /// [resource] Name of a resource mentioned in a capability statement
  @override
  @JsonKey()
  List<SearchParamToken> get resource {
    if (_resource is EqualUnmodifiableListView) return _resource;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resource);
  }

  /// [resourceProfile] A profile id invoked in a capability statement
  final List<SearchParamReference> _resourceProfile_;

  /// [resourceProfile] A profile id invoked in a capability statement
  @override
  @JsonKey(name: 'resource-profile')
  List<SearchParamReference> get resourceProfile_ {
    if (_resourceProfile_ is EqualUnmodifiableListView)
      return _resourceProfile_;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceProfile_);
  }

  /// [securityService] OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates
  final List<SearchParamToken> _securityService;

  /// [securityService] OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates
  @override
  @JsonKey(name: 'security-service')
  List<SearchParamToken> get securityService {
    if (_securityService is EqualUnmodifiableListView) return _securityService;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_securityService);
  }

  /// [software] Part of the name of a software application
  final List<SearchParamString> _software;

  /// [software] Part of the name of a software application
  @override
  @JsonKey()
  List<SearchParamString> get software {
    if (_software is EqualUnmodifiableListView) return _software;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_software);
  }

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  final List<SearchParamToken> _status;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get status {
    if (_status is EqualUnmodifiableListView) return _status;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_status);
  }

  /// [supportedProfile] Profiles for use cases supported
  final List<SearchParamReference> _supportedProfile;

  /// [supportedProfile] Profiles for use cases supported
  @override
  @JsonKey(name: 'supported-profile')
  List<SearchParamReference> get supportedProfile {
    if (_supportedProfile is EqualUnmodifiableListView)
      return _supportedProfile;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_supportedProfile);
  }

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  final List<SearchParamString> _title;

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  @override
  @JsonKey()
  List<SearchParamString> get title {
    if (_title is EqualUnmodifiableListView) return _title;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_title);
  }

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  final List<SearchParamUri> _url;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  @override
  @JsonKey()
  List<SearchParamUri> get url {
    if (_url is EqualUnmodifiableListView) return _url;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_url);
  }

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  final List<SearchParamToken> _version;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get version {
    if (_version is EqualUnmodifiableListView) return _version;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_version);
  }

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  final List<SearchParamComposite> _contextTypeQuantity;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @override
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity {
    if (_contextTypeQuantity is EqualUnmodifiableListView)
      return _contextTypeQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeQuantity);
  }

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  final List<SearchParamComposite> _contextTypeValue;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @override
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue {
    if (_contextTypeValue is EqualUnmodifiableListView)
      return _contextTypeValue;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeValue);
  }

  @override
  String toString() {
    return 'CapabilityStatementSearchParams(resourceContent: $resourceContent, resourceFilter: $resourceFilter, resourceHas: $resourceHas, resourceId: $resourceId, resourceLastUpdated: $resourceLastUpdated, resourceList: $resourceList, resourceProfile: $resourceProfile, resourceQuery: $resourceQuery, resourceSecurity: $resourceSecurity, resourceSource: $resourceSource, resourceTag: $resourceTag, resourceText: $resourceText, resourceType: $resourceType, context: $context, contextQuantity: $contextQuantity, contextType: $contextType, date: $date, description: $description, fhirversion: $fhirversion, format: $format, guide: $guide, jurisdiction: $jurisdiction, mode: $mode, name: $name, publisher: $publisher, resource: $resource, resourceProfile_: $resourceProfile_, securityService: $securityService, software: $software, status: $status, supportedProfile: $supportedProfile, title: $title, url: $url, version: $version, contextTypeQuantity: $contextTypeQuantity, contextTypeValue: $contextTypeValue)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_CapabilityStatementSearchParams &&
            const DeepCollectionEquality()
                .equals(other._resourceContent, _resourceContent) &&
            const DeepCollectionEquality()
                .equals(other._resourceFilter, _resourceFilter) &&
            const DeepCollectionEquality()
                .equals(other._resourceHas, _resourceHas) &&
            const DeepCollectionEquality()
                .equals(other._resourceId, _resourceId) &&
            const DeepCollectionEquality()
                .equals(other._resourceLastUpdated, _resourceLastUpdated) &&
            const DeepCollectionEquality()
                .equals(other._resourceList, _resourceList) &&
            const DeepCollectionEquality()
                .equals(other._resourceProfile, _resourceProfile) &&
            const DeepCollectionEquality()
                .equals(other._resourceQuery, _resourceQuery) &&
            const DeepCollectionEquality()
                .equals(other._resourceSecurity, _resourceSecurity) &&
            const DeepCollectionEquality()
                .equals(other._resourceSource, _resourceSource) &&
            const DeepCollectionEquality()
                .equals(other._resourceTag, _resourceTag) &&
            const DeepCollectionEquality()
                .equals(other._resourceText, _resourceText) &&
            const DeepCollectionEquality()
                .equals(other._resourceType, _resourceType) &&
            const DeepCollectionEquality().equals(other._context, _context) &&
            const DeepCollectionEquality()
                .equals(other._contextQuantity, _contextQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextType, _contextType) &&
            const DeepCollectionEquality().equals(other._date, _date) &&
            const DeepCollectionEquality()
                .equals(other._description, _description) &&
            const DeepCollectionEquality()
                .equals(other._fhirversion, _fhirversion) &&
            const DeepCollectionEquality().equals(other._format, _format) &&
            const DeepCollectionEquality().equals(other._guide, _guide) &&
            const DeepCollectionEquality()
                .equals(other._jurisdiction, _jurisdiction) &&
            const DeepCollectionEquality().equals(other._mode, _mode) &&
            const DeepCollectionEquality().equals(other._name, _name) &&
            const DeepCollectionEquality()
                .equals(other._publisher, _publisher) &&
            const DeepCollectionEquality().equals(other._resource, _resource) &&
            const DeepCollectionEquality()
                .equals(other._resourceProfile_, _resourceProfile_) &&
            const DeepCollectionEquality()
                .equals(other._securityService, _securityService) &&
            const DeepCollectionEquality().equals(other._software, _software) &&
            const DeepCollectionEquality().equals(other._status, _status) &&
            const DeepCollectionEquality()
                .equals(other._supportedProfile, _supportedProfile) &&
            const DeepCollectionEquality().equals(other._title, _title) &&
            const DeepCollectionEquality().equals(other._url, _url) &&
            const DeepCollectionEquality().equals(other._version, _version) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeQuantity, _contextTypeQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeValue, _contextTypeValue));
  }

  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        const DeepCollectionEquality().hash(_resourceContent),
        const DeepCollectionEquality().hash(_resourceFilter),
        const DeepCollectionEquality().hash(_resourceHas),
        const DeepCollectionEquality().hash(_resourceId),
        const DeepCollectionEquality().hash(_resourceLastUpdated),
        const DeepCollectionEquality().hash(_resourceList),
        const DeepCollectionEquality().hash(_resourceProfile),
        const DeepCollectionEquality().hash(_resourceQuery),
        const DeepCollectionEquality().hash(_resourceSecurity),
        const DeepCollectionEquality().hash(_resourceSource),
        const DeepCollectionEquality().hash(_resourceTag),
        const DeepCollectionEquality().hash(_resourceText),
        const DeepCollectionEquality().hash(_resourceType),
        const DeepCollectionEquality().hash(_context),
        const DeepCollectionEquality().hash(_contextQuantity),
        const DeepCollectionEquality().hash(_contextType),
        const DeepCollectionEquality().hash(_date),
        const DeepCollectionEquality().hash(_description),
        const DeepCollectionEquality().hash(_fhirversion),
        const DeepCollectionEquality().hash(_format),
        const DeepCollectionEquality().hash(_guide),
        const DeepCollectionEquality().hash(_jurisdiction),
        const DeepCollectionEquality().hash(_mode),
        const DeepCollectionEquality().hash(_name),
        const DeepCollectionEquality().hash(_publisher),
        const DeepCollectionEquality().hash(_resource),
        const DeepCollectionEquality().hash(_resourceProfile_),
        const DeepCollectionEquality().hash(_securityService),
        const DeepCollectionEquality().hash(_software),
        const DeepCollectionEquality().hash(_status),
        const DeepCollectionEquality().hash(_supportedProfile),
        const DeepCollectionEquality().hash(_title),
        const DeepCollectionEquality().hash(_url),
        const DeepCollectionEquality().hash(_version),
        const DeepCollectionEquality().hash(_contextTypeQuantity),
        const DeepCollectionEquality().hash(_contextTypeValue)
      ]);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_CapabilityStatementSearchParamsCopyWith<
          _$_CapabilityStatementSearchParams>
      get copyWith => __$$_CapabilityStatementSearchParamsCopyWithImpl<
          _$_CapabilityStatementSearchParams>(this, _$identity);
}

abstract class _CapabilityStatementSearchParams
    extends CapabilityStatementSearchParams {
  const factory _CapabilityStatementSearchParams(
          {@JsonKey(name: '_content')
              final List<SearchParamString> resourceContent,
          @JsonKey(name: '_filter')
              final List<SearchParamToken> resourceFilter,
          @JsonKey(name: '_has')
              final List<SearchParamString> resourceHas,
          @JsonKey(name: '_id')
              final List<SearchParamToken> resourceId,
          @JsonKey(name: '_lastUpdated')
              final List<SearchParamDate> resourceLastUpdated,
          @JsonKey(name: '_list')
              final List<SearchParamString> resourceList,
          @JsonKey(name: '_profile')
              final List<SearchParamUri> resourceProfile,
          @JsonKey(name: '_query')
              final List<SearchParamToken> resourceQuery,
          @JsonKey(name: '_security')
              final List<SearchParamToken> resourceSecurity,
          @JsonKey(name: '_source')
              final List<SearchParamUri> resourceSource,
          @JsonKey(name: '_tag')
              final List<SearchParamToken> resourceTag,
          @JsonKey(name: '_text')
              final List<SearchParamString> resourceText,
          @JsonKey(name: '_type')
              final List<SearchParamToken> resourceType,
          final List<SearchParamToken> context,
          @JsonKey(name: 'context-quantity')
              final List<SearchParamQuantity> contextQuantity,
          @JsonKey(name: 'context-type')
              final List<SearchParamToken> contextType,
          final List<SearchParamDate> date,
          final List<SearchParamString> description,
          final List<SearchParamToken> fhirversion,
          final List<SearchParamToken> format,
          final List<SearchParamReference> guide,
          final List<SearchParamToken> jurisdiction,
          final List<SearchParamToken> mode,
          final List<SearchParamString> name,
          final List<SearchParamString> publisher,
          final List<SearchParamToken> resource,
          @JsonKey(name: 'resource-profile')
              final List<SearchParamReference> resourceProfile_,
          @JsonKey(name: 'security-service')
              final List<SearchParamToken> securityService,
          final List<SearchParamString> software,
          final List<SearchParamToken> status,
          @JsonKey(name: 'supported-profile')
              final List<SearchParamReference> supportedProfile,
          final List<SearchParamString> title,
          final List<SearchParamUri> url,
          final List<SearchParamToken> version,
          @JsonKey(name: 'context-type-quantity')
              final List<SearchParamComposite> contextTypeQuantity,
          @JsonKey(name: 'context-type-value')
              final List<SearchParamComposite> contextTypeValue}) =
      _$_CapabilityStatementSearchParams;
  const _CapabilityStatementSearchParams._() : super._();

  @override

  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent;
  @override

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter;
  @override

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas;
  @override

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId;
  @override

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated;
  @override

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList;
  @override

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile;
  @override

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery;
  @override

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity;
  @override

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource;
  @override

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag;
  @override

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText;
  @override

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType;
  @override

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context;
  @override

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity;
  @override

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType;
  @override

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date;
  @override

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description;
  @override

  /// [fhirversion] The version of FHIR
  List<SearchParamToken> get fhirversion;
  @override

  /// [format] formats supported (xml | json | ttl | mime type)
  List<SearchParamToken> get format;
  @override

  /// [guide] Implementation guides supported
  List<SearchParamReference> get guide;
  @override

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  List<SearchParamToken> get jurisdiction;
  @override

  /// [mode] Mode - restful (server/client) or messaging (sender/receiver)
  List<SearchParamToken> get mode;
  @override

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name;
  @override

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher;
  @override

  /// [resource] Name of a resource mentioned in a capability statement
  List<SearchParamToken> get resource;
  @override

  /// [resourceProfile] A profile id invoked in a capability statement
  @JsonKey(name: 'resource-profile')
  List<SearchParamReference> get resourceProfile_;
  @override

  /// [securityService] OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates
  @JsonKey(name: 'security-service')
  List<SearchParamToken> get securityService;
  @override

  /// [software] Part of the name of a software application
  List<SearchParamString> get software;
  @override

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status;
  @override

  /// [supportedProfile] Profiles for use cases supported
  @JsonKey(name: 'supported-profile')
  List<SearchParamReference> get supportedProfile;
  @override

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  List<SearchParamString> get title;
  @override

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url;
  @override

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version;
  @override

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity;
  @override

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue;
  @override
  @JsonKey(ignore: true)
  _$$_CapabilityStatementSearchParamsCopyWith<
          _$_CapabilityStatementSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
mixin _$CompartmentDefinitionSearchParams {
  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent =>
      throw _privateConstructorUsedError;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter =>
      throw _privateConstructorUsedError;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas => throw _privateConstructorUsedError;

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId => throw _privateConstructorUsedError;

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated =>
      throw _privateConstructorUsedError;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList =>
      throw _privateConstructorUsedError;

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile =>
      throw _privateConstructorUsedError;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery =>
      throw _privateConstructorUsedError;

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity =>
      throw _privateConstructorUsedError;

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource => throw _privateConstructorUsedError;

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag => throw _privateConstructorUsedError;

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText =>
      throw _privateConstructorUsedError;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType => throw _privateConstructorUsedError;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context => throw _privateConstructorUsedError;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity =>
      throw _privateConstructorUsedError;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType => throw _privateConstructorUsedError;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date => throw _privateConstructorUsedError;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description => throw _privateConstructorUsedError;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name => throw _privateConstructorUsedError;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher => throw _privateConstructorUsedError;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status => throw _privateConstructorUsedError;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url => throw _privateConstructorUsedError;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version => throw _privateConstructorUsedError;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity =>
      throw _privateConstructorUsedError;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue =>
      throw _privateConstructorUsedError;

  /// [code] Patient | Encounter | RelatedPerson | Practitioner | Device
  List<SearchParamToken> get code => throw _privateConstructorUsedError;

  /// [resource] Name of resource type
  List<SearchParamToken> get resource => throw _privateConstructorUsedError;

  @JsonKey(ignore: true)
  $CompartmentDefinitionSearchParamsCopyWith<CompartmentDefinitionSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $CompartmentDefinitionSearchParamsCopyWith<$Res> {
  factory $CompartmentDefinitionSearchParamsCopyWith(
          CompartmentDefinitionSearchParams value,
          $Res Function(CompartmentDefinitionSearchParams) then) =
      _$CompartmentDefinitionSearchParamsCopyWithImpl<$Res,
          CompartmentDefinitionSearchParams>;
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue,
      List<SearchParamToken> code,
      List<SearchParamToken> resource});
}

/// @nodoc
class _$CompartmentDefinitionSearchParamsCopyWithImpl<$Res,
        $Val extends CompartmentDefinitionSearchParams>
    implements $CompartmentDefinitionSearchParamsCopyWith<$Res> {
  _$CompartmentDefinitionSearchParamsCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
    Object? code = null,
    Object? resource = null,
  }) {
    return _then(_value.copyWith(
      resourceContent: null == resourceContent
          ? _value.resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value.resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value.resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value.resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value.resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value.resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value.resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value.resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value.resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value.resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value.resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value.resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value.resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value.context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value.contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value.contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value.date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      name: null == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value.publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      url: null == url
          ? _value.url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value.version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value.contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value.contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      code: null == code
          ? _value.code
          : code // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resource: null == resource
          ? _value.resource
          : resource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$_CompartmentDefinitionSearchParamsCopyWith<$Res>
    implements $CompartmentDefinitionSearchParamsCopyWith<$Res> {
  factory _$$_CompartmentDefinitionSearchParamsCopyWith(
          _$_CompartmentDefinitionSearchParams value,
          $Res Function(_$_CompartmentDefinitionSearchParams) then) =
      __$$_CompartmentDefinitionSearchParamsCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue,
      List<SearchParamToken> code,
      List<SearchParamToken> resource});
}

/// @nodoc
class __$$_CompartmentDefinitionSearchParamsCopyWithImpl<$Res>
    extends _$CompartmentDefinitionSearchParamsCopyWithImpl<$Res,
        _$_CompartmentDefinitionSearchParams>
    implements _$$_CompartmentDefinitionSearchParamsCopyWith<$Res> {
  __$$_CompartmentDefinitionSearchParamsCopyWithImpl(
      _$_CompartmentDefinitionSearchParams _value,
      $Res Function(_$_CompartmentDefinitionSearchParams) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
    Object? code = null,
    Object? resource = null,
  }) {
    return _then(_$_CompartmentDefinitionSearchParams(
      resourceContent: null == resourceContent
          ? _value._resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value._resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value._resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value._resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value._resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value._resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value._resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value._resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value._resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value._resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value._resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value._resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value._resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value._context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value._contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value._contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value._date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value._description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      name: null == name
          ? _value._name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value._publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value._status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      url: null == url
          ? _value._url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value._version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value._contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value._contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      code: null == code
          ? _value._code
          : code // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resource: null == resource
          ? _value._resource
          : resource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
    ));
  }
}

/// @nodoc

class _$_CompartmentDefinitionSearchParams
    extends _CompartmentDefinitionSearchParams {
  const _$_CompartmentDefinitionSearchParams(
      {@JsonKey(name: '_content')
          final List<SearchParamString> resourceContent = const [],
      @JsonKey(name: '_filter')
          final List<SearchParamToken> resourceFilter = const [],
      @JsonKey(name: '_has')
          final List<SearchParamString> resourceHas = const [],
      @JsonKey(name: '_id')
          final List<SearchParamToken> resourceId = const [],
      @JsonKey(name: '_lastUpdated')
          final List<SearchParamDate> resourceLastUpdated = const [],
      @JsonKey(name: '_list')
          final List<SearchParamString> resourceList = const [],
      @JsonKey(name: '_profile')
          final List<SearchParamUri> resourceProfile = const [],
      @JsonKey(name: '_query')
          final List<SearchParamToken> resourceQuery = const [],
      @JsonKey(name: '_security')
          final List<SearchParamToken> resourceSecurity = const [],
      @JsonKey(name: '_source')
          final List<SearchParamUri> resourceSource = const [],
      @JsonKey(name: '_tag')
          final List<SearchParamToken> resourceTag = const [],
      @JsonKey(name: '_text')
          final List<SearchParamString> resourceText = const [],
      @JsonKey(name: '_type')
          final List<SearchParamToken> resourceType = const [],
      final List<SearchParamToken> context = const [],
      @JsonKey(name: 'context-quantity')
          final List<SearchParamQuantity> contextQuantity = const [],
      @JsonKey(name: 'context-type')
          final List<SearchParamToken> contextType = const [],
      final List<SearchParamDate> date = const [],
      final List<SearchParamString> description = const [],
      final List<SearchParamString> name = const [],
      final List<SearchParamString> publisher = const [],
      final List<SearchParamToken> status = const [],
      final List<SearchParamUri> url = const [],
      final List<SearchParamToken> version = const [],
      @JsonKey(name: 'context-type-quantity')
          final List<SearchParamComposite> contextTypeQuantity = const [],
      @JsonKey(name: 'context-type-value')
          final List<SearchParamComposite> contextTypeValue = const [],
      final List<SearchParamToken> code = const [],
      final List<SearchParamToken> resource = const []})
      : _resourceContent = resourceContent,
        _resourceFilter = resourceFilter,
        _resourceHas = resourceHas,
        _resourceId = resourceId,
        _resourceLastUpdated = resourceLastUpdated,
        _resourceList = resourceList,
        _resourceProfile = resourceProfile,
        _resourceQuery = resourceQuery,
        _resourceSecurity = resourceSecurity,
        _resourceSource = resourceSource,
        _resourceTag = resourceTag,
        _resourceText = resourceText,
        _resourceType = resourceType,
        _context = context,
        _contextQuantity = contextQuantity,
        _contextType = contextType,
        _date = date,
        _description = description,
        _name = name,
        _publisher = publisher,
        _status = status,
        _url = url,
        _version = version,
        _contextTypeQuantity = contextTypeQuantity,
        _contextTypeValue = contextTypeValue,
        _code = code,
        _resource = resource,
        super._();

  /// [resourceContent] Search on the entire content of the resource
  final List<SearchParamString> _resourceContent;

  /// [resourceContent] Search on the entire content of the resource
  @override
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent {
    if (_resourceContent is EqualUnmodifiableListView) return _resourceContent;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceContent);
  }

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  final List<SearchParamToken> _resourceFilter;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @override
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter {
    if (_resourceFilter is EqualUnmodifiableListView) return _resourceFilter;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceFilter);
  }

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  final List<SearchParamString> _resourceHas;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @override
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas {
    if (_resourceHas is EqualUnmodifiableListView) return _resourceHas;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceHas);
  }

  /// [resourceId] Logical id of this artifact
  final List<SearchParamToken> _resourceId;

  /// [resourceId] Logical id of this artifact
  @override
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId {
    if (_resourceId is EqualUnmodifiableListView) return _resourceId;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceId);
  }

  /// [resourceLastUpdated] When the resource version last changed
  final List<SearchParamDate> _resourceLastUpdated;

  /// [resourceLastUpdated] When the resource version last changed
  @override
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated {
    if (_resourceLastUpdated is EqualUnmodifiableListView)
      return _resourceLastUpdated;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceLastUpdated);
  }

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  final List<SearchParamString> _resourceList;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @override
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList {
    if (_resourceList is EqualUnmodifiableListView) return _resourceList;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceList);
  }

  /// [resourceProfile] Profiles this resource claims to conform to
  final List<SearchParamUri> _resourceProfile;

  /// [resourceProfile] Profiles this resource claims to conform to
  @override
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile {
    if (_resourceProfile is EqualUnmodifiableListView) return _resourceProfile;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceProfile);
  }

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  final List<SearchParamToken> _resourceQuery;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @override
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery {
    if (_resourceQuery is EqualUnmodifiableListView) return _resourceQuery;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceQuery);
  }

  /// [resourceSecurity] Security Labels applied to this resource
  final List<SearchParamToken> _resourceSecurity;

  /// [resourceSecurity] Security Labels applied to this resource
  @override
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity {
    if (_resourceSecurity is EqualUnmodifiableListView)
      return _resourceSecurity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSecurity);
  }

  /// [resourceSource] Identifies where the resource comes from
  final List<SearchParamUri> _resourceSource;

  /// [resourceSource] Identifies where the resource comes from
  @override
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource {
    if (_resourceSource is EqualUnmodifiableListView) return _resourceSource;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSource);
  }

  /// [resourceTag] Tags applied to this resource
  final List<SearchParamToken> _resourceTag;

  /// [resourceTag] Tags applied to this resource
  @override
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag {
    if (_resourceTag is EqualUnmodifiableListView) return _resourceTag;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceTag);
  }

  /// [resourceText] Search on the narrative text (html) of the resource
  final List<SearchParamString> _resourceText;

  /// [resourceText] Search on the narrative text (html) of the resource
  @override
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText {
    if (_resourceText is EqualUnmodifiableListView) return _resourceText;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceText);
  }

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  final List<SearchParamToken> _resourceType;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @override
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType {
    if (_resourceType is EqualUnmodifiableListView) return _resourceType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceType);
  }

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  final List<SearchParamToken> _context;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  @override
  @JsonKey()
  List<SearchParamToken> get context {
    if (_context is EqualUnmodifiableListView) return _context;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_context);
  }

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  final List<SearchParamQuantity> _contextQuantity;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @override
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity {
    if (_contextQuantity is EqualUnmodifiableListView) return _contextQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextQuantity);
  }

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  final List<SearchParamToken> _contextType;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @override
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType {
    if (_contextType is EqualUnmodifiableListView) return _contextType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextType);
  }

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  final List<SearchParamDate> _date;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  @override
  @JsonKey()
  List<SearchParamDate> get date {
    if (_date is EqualUnmodifiableListView) return _date;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_date);
  }

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  final List<SearchParamString> _description;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  @override
  @JsonKey()
  List<SearchParamString> get description {
    if (_description is EqualUnmodifiableListView) return _description;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_description);
  }

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  final List<SearchParamString> _name;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  @override
  @JsonKey()
  List<SearchParamString> get name {
    if (_name is EqualUnmodifiableListView) return _name;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_name);
  }

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  final List<SearchParamString> _publisher;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  @override
  @JsonKey()
  List<SearchParamString> get publisher {
    if (_publisher is EqualUnmodifiableListView) return _publisher;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_publisher);
  }

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  final List<SearchParamToken> _status;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get status {
    if (_status is EqualUnmodifiableListView) return _status;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_status);
  }

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  final List<SearchParamUri> _url;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  @override
  @JsonKey()
  List<SearchParamUri> get url {
    if (_url is EqualUnmodifiableListView) return _url;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_url);
  }

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  final List<SearchParamToken> _version;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get version {
    if (_version is EqualUnmodifiableListView) return _version;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_version);
  }

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  final List<SearchParamComposite> _contextTypeQuantity;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @override
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity {
    if (_contextTypeQuantity is EqualUnmodifiableListView)
      return _contextTypeQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeQuantity);
  }

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  final List<SearchParamComposite> _contextTypeValue;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @override
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue {
    if (_contextTypeValue is EqualUnmodifiableListView)
      return _contextTypeValue;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeValue);
  }

  /// [code] Patient | Encounter | RelatedPerson | Practitioner | Device
  final List<SearchParamToken> _code;

  /// [code] Patient | Encounter | RelatedPerson | Practitioner | Device
  @override
  @JsonKey()
  List<SearchParamToken> get code {
    if (_code is EqualUnmodifiableListView) return _code;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_code);
  }

  /// [resource] Name of resource type
  final List<SearchParamToken> _resource;

  /// [resource] Name of resource type
  @override
  @JsonKey()
  List<SearchParamToken> get resource {
    if (_resource is EqualUnmodifiableListView) return _resource;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resource);
  }

  @override
  String toString() {
    return 'CompartmentDefinitionSearchParams(resourceContent: $resourceContent, resourceFilter: $resourceFilter, resourceHas: $resourceHas, resourceId: $resourceId, resourceLastUpdated: $resourceLastUpdated, resourceList: $resourceList, resourceProfile: $resourceProfile, resourceQuery: $resourceQuery, resourceSecurity: $resourceSecurity, resourceSource: $resourceSource, resourceTag: $resourceTag, resourceText: $resourceText, resourceType: $resourceType, context: $context, contextQuantity: $contextQuantity, contextType: $contextType, date: $date, description: $description, name: $name, publisher: $publisher, status: $status, url: $url, version: $version, contextTypeQuantity: $contextTypeQuantity, contextTypeValue: $contextTypeValue, code: $code, resource: $resource)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_CompartmentDefinitionSearchParams &&
            const DeepCollectionEquality()
                .equals(other._resourceContent, _resourceContent) &&
            const DeepCollectionEquality()
                .equals(other._resourceFilter, _resourceFilter) &&
            const DeepCollectionEquality()
                .equals(other._resourceHas, _resourceHas) &&
            const DeepCollectionEquality()
                .equals(other._resourceId, _resourceId) &&
            const DeepCollectionEquality()
                .equals(other._resourceLastUpdated, _resourceLastUpdated) &&
            const DeepCollectionEquality()
                .equals(other._resourceList, _resourceList) &&
            const DeepCollectionEquality()
                .equals(other._resourceProfile, _resourceProfile) &&
            const DeepCollectionEquality()
                .equals(other._resourceQuery, _resourceQuery) &&
            const DeepCollectionEquality()
                .equals(other._resourceSecurity, _resourceSecurity) &&
            const DeepCollectionEquality()
                .equals(other._resourceSource, _resourceSource) &&
            const DeepCollectionEquality()
                .equals(other._resourceTag, _resourceTag) &&
            const DeepCollectionEquality()
                .equals(other._resourceText, _resourceText) &&
            const DeepCollectionEquality()
                .equals(other._resourceType, _resourceType) &&
            const DeepCollectionEquality().equals(other._context, _context) &&
            const DeepCollectionEquality()
                .equals(other._contextQuantity, _contextQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextType, _contextType) &&
            const DeepCollectionEquality().equals(other._date, _date) &&
            const DeepCollectionEquality()
                .equals(other._description, _description) &&
            const DeepCollectionEquality().equals(other._name, _name) &&
            const DeepCollectionEquality()
                .equals(other._publisher, _publisher) &&
            const DeepCollectionEquality().equals(other._status, _status) &&
            const DeepCollectionEquality().equals(other._url, _url) &&
            const DeepCollectionEquality().equals(other._version, _version) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeQuantity, _contextTypeQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeValue, _contextTypeValue) &&
            const DeepCollectionEquality().equals(other._code, _code) &&
            const DeepCollectionEquality().equals(other._resource, _resource));
  }

  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        const DeepCollectionEquality().hash(_resourceContent),
        const DeepCollectionEquality().hash(_resourceFilter),
        const DeepCollectionEquality().hash(_resourceHas),
        const DeepCollectionEquality().hash(_resourceId),
        const DeepCollectionEquality().hash(_resourceLastUpdated),
        const DeepCollectionEquality().hash(_resourceList),
        const DeepCollectionEquality().hash(_resourceProfile),
        const DeepCollectionEquality().hash(_resourceQuery),
        const DeepCollectionEquality().hash(_resourceSecurity),
        const DeepCollectionEquality().hash(_resourceSource),
        const DeepCollectionEquality().hash(_resourceTag),
        const DeepCollectionEquality().hash(_resourceText),
        const DeepCollectionEquality().hash(_resourceType),
        const DeepCollectionEquality().hash(_context),
        const DeepCollectionEquality().hash(_contextQuantity),
        const DeepCollectionEquality().hash(_contextType),
        const DeepCollectionEquality().hash(_date),
        const DeepCollectionEquality().hash(_description),
        const DeepCollectionEquality().hash(_name),
        const DeepCollectionEquality().hash(_publisher),
        const DeepCollectionEquality().hash(_status),
        const DeepCollectionEquality().hash(_url),
        const DeepCollectionEquality().hash(_version),
        const DeepCollectionEquality().hash(_contextTypeQuantity),
        const DeepCollectionEquality().hash(_contextTypeValue),
        const DeepCollectionEquality().hash(_code),
        const DeepCollectionEquality().hash(_resource)
      ]);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_CompartmentDefinitionSearchParamsCopyWith<
          _$_CompartmentDefinitionSearchParams>
      get copyWith => __$$_CompartmentDefinitionSearchParamsCopyWithImpl<
          _$_CompartmentDefinitionSearchParams>(this, _$identity);
}

abstract class _CompartmentDefinitionSearchParams
    extends CompartmentDefinitionSearchParams {
  const factory _CompartmentDefinitionSearchParams(
          {@JsonKey(name: '_content')
              final List<SearchParamString> resourceContent,
          @JsonKey(name: '_filter')
              final List<SearchParamToken> resourceFilter,
          @JsonKey(name: '_has')
              final List<SearchParamString> resourceHas,
          @JsonKey(name: '_id')
              final List<SearchParamToken> resourceId,
          @JsonKey(name: '_lastUpdated')
              final List<SearchParamDate> resourceLastUpdated,
          @JsonKey(name: '_list')
              final List<SearchParamString> resourceList,
          @JsonKey(name: '_profile')
              final List<SearchParamUri> resourceProfile,
          @JsonKey(name: '_query')
              final List<SearchParamToken> resourceQuery,
          @JsonKey(name: '_security')
              final List<SearchParamToken> resourceSecurity,
          @JsonKey(name: '_source')
              final List<SearchParamUri> resourceSource,
          @JsonKey(name: '_tag')
              final List<SearchParamToken> resourceTag,
          @JsonKey(name: '_text')
              final List<SearchParamString> resourceText,
          @JsonKey(name: '_type')
              final List<SearchParamToken> resourceType,
          final List<SearchParamToken> context,
          @JsonKey(name: 'context-quantity')
              final List<SearchParamQuantity> contextQuantity,
          @JsonKey(name: 'context-type')
              final List<SearchParamToken> contextType,
          final List<SearchParamDate> date,
          final List<SearchParamString> description,
          final List<SearchParamString> name,
          final List<SearchParamString> publisher,
          final List<SearchParamToken> status,
          final List<SearchParamUri> url,
          final List<SearchParamToken> version,
          @JsonKey(name: 'context-type-quantity')
              final List<SearchParamComposite> contextTypeQuantity,
          @JsonKey(name: 'context-type-value')
              final List<SearchParamComposite> contextTypeValue,
          final List<SearchParamToken> code,
          final List<SearchParamToken> resource}) =
      _$_CompartmentDefinitionSearchParams;
  const _CompartmentDefinitionSearchParams._() : super._();

  @override

  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent;
  @override

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter;
  @override

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas;
  @override

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId;
  @override

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated;
  @override

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList;
  @override

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile;
  @override

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery;
  @override

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity;
  @override

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource;
  @override

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag;
  @override

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText;
  @override

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType;
  @override

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context;
  @override

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity;
  @override

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType;
  @override

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date;
  @override

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description;
  @override

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name;
  @override

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher;
  @override

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status;
  @override

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url;
  @override

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version;
  @override

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity;
  @override

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue;
  @override

  /// [code] Patient | Encounter | RelatedPerson | Practitioner | Device
  List<SearchParamToken> get code;
  @override

  /// [resource] Name of resource type
  List<SearchParamToken> get resource;
  @override
  @JsonKey(ignore: true)
  _$$_CompartmentDefinitionSearchParamsCopyWith<
          _$_CompartmentDefinitionSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
mixin _$GraphDefinitionSearchParams {
  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent =>
      throw _privateConstructorUsedError;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter =>
      throw _privateConstructorUsedError;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas => throw _privateConstructorUsedError;

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId => throw _privateConstructorUsedError;

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated =>
      throw _privateConstructorUsedError;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList =>
      throw _privateConstructorUsedError;

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile =>
      throw _privateConstructorUsedError;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery =>
      throw _privateConstructorUsedError;

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity =>
      throw _privateConstructorUsedError;

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource => throw _privateConstructorUsedError;

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag => throw _privateConstructorUsedError;

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText =>
      throw _privateConstructorUsedError;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType => throw _privateConstructorUsedError;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context => throw _privateConstructorUsedError;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity =>
      throw _privateConstructorUsedError;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType => throw _privateConstructorUsedError;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date => throw _privateConstructorUsedError;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description => throw _privateConstructorUsedError;

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  List<SearchParamToken> get jurisdiction => throw _privateConstructorUsedError;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name => throw _privateConstructorUsedError;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher => throw _privateConstructorUsedError;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status => throw _privateConstructorUsedError;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url => throw _privateConstructorUsedError;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version => throw _privateConstructorUsedError;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity =>
      throw _privateConstructorUsedError;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue =>
      throw _privateConstructorUsedError;

  /// [start] Type of resource at which the graph starts
  List<SearchParamToken> get start => throw _privateConstructorUsedError;

  @JsonKey(ignore: true)
  $GraphDefinitionSearchParamsCopyWith<GraphDefinitionSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $GraphDefinitionSearchParamsCopyWith<$Res> {
  factory $GraphDefinitionSearchParamsCopyWith(
          GraphDefinitionSearchParams value,
          $Res Function(GraphDefinitionSearchParams) then) =
      _$GraphDefinitionSearchParamsCopyWithImpl<$Res,
          GraphDefinitionSearchParams>;
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamToken> jurisdiction,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue,
      List<SearchParamToken> start});
}

/// @nodoc
class _$GraphDefinitionSearchParamsCopyWithImpl<$Res,
        $Val extends GraphDefinitionSearchParams>
    implements $GraphDefinitionSearchParamsCopyWith<$Res> {
  _$GraphDefinitionSearchParamsCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? jurisdiction = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
    Object? start = null,
  }) {
    return _then(_value.copyWith(
      resourceContent: null == resourceContent
          ? _value.resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value.resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value.resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value.resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value.resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value.resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value.resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value.resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value.resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value.resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value.resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value.resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value.resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value.context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value.contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value.contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value.date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      jurisdiction: null == jurisdiction
          ? _value.jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value.publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      url: null == url
          ? _value.url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value.version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value.contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value.contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      start: null == start
          ? _value.start
          : start // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$_GraphDefinitionSearchParamsCopyWith<$Res>
    implements $GraphDefinitionSearchParamsCopyWith<$Res> {
  factory _$$_GraphDefinitionSearchParamsCopyWith(
          _$_GraphDefinitionSearchParams value,
          $Res Function(_$_GraphDefinitionSearchParams) then) =
      __$$_GraphDefinitionSearchParamsCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamToken> jurisdiction,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue,
      List<SearchParamToken> start});
}

/// @nodoc
class __$$_GraphDefinitionSearchParamsCopyWithImpl<$Res>
    extends _$GraphDefinitionSearchParamsCopyWithImpl<$Res,
        _$_GraphDefinitionSearchParams>
    implements _$$_GraphDefinitionSearchParamsCopyWith<$Res> {
  __$$_GraphDefinitionSearchParamsCopyWithImpl(
      _$_GraphDefinitionSearchParams _value,
      $Res Function(_$_GraphDefinitionSearchParams) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? jurisdiction = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
    Object? start = null,
  }) {
    return _then(_$_GraphDefinitionSearchParams(
      resourceContent: null == resourceContent
          ? _value._resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value._resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value._resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value._resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value._resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value._resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value._resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value._resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value._resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value._resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value._resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value._resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value._resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value._context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value._contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value._contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value._date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value._description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      jurisdiction: null == jurisdiction
          ? _value._jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value._name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value._publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value._status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      url: null == url
          ? _value._url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value._version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value._contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value._contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      start: null == start
          ? _value._start
          : start // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
    ));
  }
}

/// @nodoc

class _$_GraphDefinitionSearchParams extends _GraphDefinitionSearchParams {
  const _$_GraphDefinitionSearchParams(
      {@JsonKey(name: '_content')
          final List<SearchParamString> resourceContent = const [],
      @JsonKey(name: '_filter')
          final List<SearchParamToken> resourceFilter = const [],
      @JsonKey(name: '_has')
          final List<SearchParamString> resourceHas = const [],
      @JsonKey(name: '_id')
          final List<SearchParamToken> resourceId = const [],
      @JsonKey(name: '_lastUpdated')
          final List<SearchParamDate> resourceLastUpdated = const [],
      @JsonKey(name: '_list')
          final List<SearchParamString> resourceList = const [],
      @JsonKey(name: '_profile')
          final List<SearchParamUri> resourceProfile = const [],
      @JsonKey(name: '_query')
          final List<SearchParamToken> resourceQuery = const [],
      @JsonKey(name: '_security')
          final List<SearchParamToken> resourceSecurity = const [],
      @JsonKey(name: '_source')
          final List<SearchParamUri> resourceSource = const [],
      @JsonKey(name: '_tag')
          final List<SearchParamToken> resourceTag = const [],
      @JsonKey(name: '_text')
          final List<SearchParamString> resourceText = const [],
      @JsonKey(name: '_type')
          final List<SearchParamToken> resourceType = const [],
      final List<SearchParamToken> context = const [],
      @JsonKey(name: 'context-quantity')
          final List<SearchParamQuantity> contextQuantity = const [],
      @JsonKey(name: 'context-type')
          final List<SearchParamToken> contextType = const [],
      final List<SearchParamDate> date = const [],
      final List<SearchParamString> description = const [],
      final List<SearchParamToken> jurisdiction = const [],
      final List<SearchParamString> name = const [],
      final List<SearchParamString> publisher = const [],
      final List<SearchParamToken> status = const [],
      final List<SearchParamUri> url = const [],
      final List<SearchParamToken> version = const [],
      @JsonKey(name: 'context-type-quantity')
          final List<SearchParamComposite> contextTypeQuantity = const [],
      @JsonKey(name: 'context-type-value')
          final List<SearchParamComposite> contextTypeValue = const [],
      final List<SearchParamToken> start = const []})
      : _resourceContent = resourceContent,
        _resourceFilter = resourceFilter,
        _resourceHas = resourceHas,
        _resourceId = resourceId,
        _resourceLastUpdated = resourceLastUpdated,
        _resourceList = resourceList,
        _resourceProfile = resourceProfile,
        _resourceQuery = resourceQuery,
        _resourceSecurity = resourceSecurity,
        _resourceSource = resourceSource,
        _resourceTag = resourceTag,
        _resourceText = resourceText,
        _resourceType = resourceType,
        _context = context,
        _contextQuantity = contextQuantity,
        _contextType = contextType,
        _date = date,
        _description = description,
        _jurisdiction = jurisdiction,
        _name = name,
        _publisher = publisher,
        _status = status,
        _url = url,
        _version = version,
        _contextTypeQuantity = contextTypeQuantity,
        _contextTypeValue = contextTypeValue,
        _start = start,
        super._();

  /// [resourceContent] Search on the entire content of the resource
  final List<SearchParamString> _resourceContent;

  /// [resourceContent] Search on the entire content of the resource
  @override
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent {
    if (_resourceContent is EqualUnmodifiableListView) return _resourceContent;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceContent);
  }

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  final List<SearchParamToken> _resourceFilter;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @override
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter {
    if (_resourceFilter is EqualUnmodifiableListView) return _resourceFilter;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceFilter);
  }

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  final List<SearchParamString> _resourceHas;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @override
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas {
    if (_resourceHas is EqualUnmodifiableListView) return _resourceHas;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceHas);
  }

  /// [resourceId] Logical id of this artifact
  final List<SearchParamToken> _resourceId;

  /// [resourceId] Logical id of this artifact
  @override
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId {
    if (_resourceId is EqualUnmodifiableListView) return _resourceId;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceId);
  }

  /// [resourceLastUpdated] When the resource version last changed
  final List<SearchParamDate> _resourceLastUpdated;

  /// [resourceLastUpdated] When the resource version last changed
  @override
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated {
    if (_resourceLastUpdated is EqualUnmodifiableListView)
      return _resourceLastUpdated;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceLastUpdated);
  }

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  final List<SearchParamString> _resourceList;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @override
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList {
    if (_resourceList is EqualUnmodifiableListView) return _resourceList;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceList);
  }

  /// [resourceProfile] Profiles this resource claims to conform to
  final List<SearchParamUri> _resourceProfile;

  /// [resourceProfile] Profiles this resource claims to conform to
  @override
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile {
    if (_resourceProfile is EqualUnmodifiableListView) return _resourceProfile;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceProfile);
  }

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  final List<SearchParamToken> _resourceQuery;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @override
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery {
    if (_resourceQuery is EqualUnmodifiableListView) return _resourceQuery;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceQuery);
  }

  /// [resourceSecurity] Security Labels applied to this resource
  final List<SearchParamToken> _resourceSecurity;

  /// [resourceSecurity] Security Labels applied to this resource
  @override
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity {
    if (_resourceSecurity is EqualUnmodifiableListView)
      return _resourceSecurity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSecurity);
  }

  /// [resourceSource] Identifies where the resource comes from
  final List<SearchParamUri> _resourceSource;

  /// [resourceSource] Identifies where the resource comes from
  @override
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource {
    if (_resourceSource is EqualUnmodifiableListView) return _resourceSource;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSource);
  }

  /// [resourceTag] Tags applied to this resource
  final List<SearchParamToken> _resourceTag;

  /// [resourceTag] Tags applied to this resource
  @override
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag {
    if (_resourceTag is EqualUnmodifiableListView) return _resourceTag;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceTag);
  }

  /// [resourceText] Search on the narrative text (html) of the resource
  final List<SearchParamString> _resourceText;

  /// [resourceText] Search on the narrative text (html) of the resource
  @override
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText {
    if (_resourceText is EqualUnmodifiableListView) return _resourceText;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceText);
  }

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  final List<SearchParamToken> _resourceType;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @override
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType {
    if (_resourceType is EqualUnmodifiableListView) return _resourceType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceType);
  }

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  final List<SearchParamToken> _context;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  @override
  @JsonKey()
  List<SearchParamToken> get context {
    if (_context is EqualUnmodifiableListView) return _context;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_context);
  }

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  final List<SearchParamQuantity> _contextQuantity;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @override
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity {
    if (_contextQuantity is EqualUnmodifiableListView) return _contextQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextQuantity);
  }

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  final List<SearchParamToken> _contextType;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @override
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType {
    if (_contextType is EqualUnmodifiableListView) return _contextType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextType);
  }

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  final List<SearchParamDate> _date;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  @override
  @JsonKey()
  List<SearchParamDate> get date {
    if (_date is EqualUnmodifiableListView) return _date;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_date);
  }

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  final List<SearchParamString> _description;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  @override
  @JsonKey()
  List<SearchParamString> get description {
    if (_description is EqualUnmodifiableListView) return _description;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_description);
  }

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  final List<SearchParamToken> _jurisdiction;

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  @override
  @JsonKey()
  List<SearchParamToken> get jurisdiction {
    if (_jurisdiction is EqualUnmodifiableListView) return _jurisdiction;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_jurisdiction);
  }

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  final List<SearchParamString> _name;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  @override
  @JsonKey()
  List<SearchParamString> get name {
    if (_name is EqualUnmodifiableListView) return _name;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_name);
  }

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  final List<SearchParamString> _publisher;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  @override
  @JsonKey()
  List<SearchParamString> get publisher {
    if (_publisher is EqualUnmodifiableListView) return _publisher;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_publisher);
  }

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  final List<SearchParamToken> _status;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get status {
    if (_status is EqualUnmodifiableListView) return _status;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_status);
  }

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  final List<SearchParamUri> _url;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  @override
  @JsonKey()
  List<SearchParamUri> get url {
    if (_url is EqualUnmodifiableListView) return _url;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_url);
  }

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  final List<SearchParamToken> _version;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get version {
    if (_version is EqualUnmodifiableListView) return _version;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_version);
  }

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  final List<SearchParamComposite> _contextTypeQuantity;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @override
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity {
    if (_contextTypeQuantity is EqualUnmodifiableListView)
      return _contextTypeQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeQuantity);
  }

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  final List<SearchParamComposite> _contextTypeValue;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @override
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue {
    if (_contextTypeValue is EqualUnmodifiableListView)
      return _contextTypeValue;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeValue);
  }

  /// [start] Type of resource at which the graph starts
  final List<SearchParamToken> _start;

  /// [start] Type of resource at which the graph starts
  @override
  @JsonKey()
  List<SearchParamToken> get start {
    if (_start is EqualUnmodifiableListView) return _start;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_start);
  }

  @override
  String toString() {
    return 'GraphDefinitionSearchParams(resourceContent: $resourceContent, resourceFilter: $resourceFilter, resourceHas: $resourceHas, resourceId: $resourceId, resourceLastUpdated: $resourceLastUpdated, resourceList: $resourceList, resourceProfile: $resourceProfile, resourceQuery: $resourceQuery, resourceSecurity: $resourceSecurity, resourceSource: $resourceSource, resourceTag: $resourceTag, resourceText: $resourceText, resourceType: $resourceType, context: $context, contextQuantity: $contextQuantity, contextType: $contextType, date: $date, description: $description, jurisdiction: $jurisdiction, name: $name, publisher: $publisher, status: $status, url: $url, version: $version, contextTypeQuantity: $contextTypeQuantity, contextTypeValue: $contextTypeValue, start: $start)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_GraphDefinitionSearchParams &&
            const DeepCollectionEquality()
                .equals(other._resourceContent, _resourceContent) &&
            const DeepCollectionEquality()
                .equals(other._resourceFilter, _resourceFilter) &&
            const DeepCollectionEquality()
                .equals(other._resourceHas, _resourceHas) &&
            const DeepCollectionEquality()
                .equals(other._resourceId, _resourceId) &&
            const DeepCollectionEquality()
                .equals(other._resourceLastUpdated, _resourceLastUpdated) &&
            const DeepCollectionEquality()
                .equals(other._resourceList, _resourceList) &&
            const DeepCollectionEquality()
                .equals(other._resourceProfile, _resourceProfile) &&
            const DeepCollectionEquality()
                .equals(other._resourceQuery, _resourceQuery) &&
            const DeepCollectionEquality()
                .equals(other._resourceSecurity, _resourceSecurity) &&
            const DeepCollectionEquality()
                .equals(other._resourceSource, _resourceSource) &&
            const DeepCollectionEquality()
                .equals(other._resourceTag, _resourceTag) &&
            const DeepCollectionEquality()
                .equals(other._resourceText, _resourceText) &&
            const DeepCollectionEquality()
                .equals(other._resourceType, _resourceType) &&
            const DeepCollectionEquality().equals(other._context, _context) &&
            const DeepCollectionEquality()
                .equals(other._contextQuantity, _contextQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextType, _contextType) &&
            const DeepCollectionEquality().equals(other._date, _date) &&
            const DeepCollectionEquality()
                .equals(other._description, _description) &&
            const DeepCollectionEquality()
                .equals(other._jurisdiction, _jurisdiction) &&
            const DeepCollectionEquality().equals(other._name, _name) &&
            const DeepCollectionEquality()
                .equals(other._publisher, _publisher) &&
            const DeepCollectionEquality().equals(other._status, _status) &&
            const DeepCollectionEquality().equals(other._url, _url) &&
            const DeepCollectionEquality().equals(other._version, _version) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeQuantity, _contextTypeQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeValue, _contextTypeValue) &&
            const DeepCollectionEquality().equals(other._start, _start));
  }

  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        const DeepCollectionEquality().hash(_resourceContent),
        const DeepCollectionEquality().hash(_resourceFilter),
        const DeepCollectionEquality().hash(_resourceHas),
        const DeepCollectionEquality().hash(_resourceId),
        const DeepCollectionEquality().hash(_resourceLastUpdated),
        const DeepCollectionEquality().hash(_resourceList),
        const DeepCollectionEquality().hash(_resourceProfile),
        const DeepCollectionEquality().hash(_resourceQuery),
        const DeepCollectionEquality().hash(_resourceSecurity),
        const DeepCollectionEquality().hash(_resourceSource),
        const DeepCollectionEquality().hash(_resourceTag),
        const DeepCollectionEquality().hash(_resourceText),
        const DeepCollectionEquality().hash(_resourceType),
        const DeepCollectionEquality().hash(_context),
        const DeepCollectionEquality().hash(_contextQuantity),
        const DeepCollectionEquality().hash(_contextType),
        const DeepCollectionEquality().hash(_date),
        const DeepCollectionEquality().hash(_description),
        const DeepCollectionEquality().hash(_jurisdiction),
        const DeepCollectionEquality().hash(_name),
        const DeepCollectionEquality().hash(_publisher),
        const DeepCollectionEquality().hash(_status),
        const DeepCollectionEquality().hash(_url),
        const DeepCollectionEquality().hash(_version),
        const DeepCollectionEquality().hash(_contextTypeQuantity),
        const DeepCollectionEquality().hash(_contextTypeValue),
        const DeepCollectionEquality().hash(_start)
      ]);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_GraphDefinitionSearchParamsCopyWith<_$_GraphDefinitionSearchParams>
      get copyWith => __$$_GraphDefinitionSearchParamsCopyWithImpl<
          _$_GraphDefinitionSearchParams>(this, _$identity);
}

abstract class _GraphDefinitionSearchParams
    extends GraphDefinitionSearchParams {
  const factory _GraphDefinitionSearchParams(
      {@JsonKey(name: '_content')
          final List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          final List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          final List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          final List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          final List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          final List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          final List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          final List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          final List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          final List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          final List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          final List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          final List<SearchParamToken> resourceType,
      final List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          final List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          final List<SearchParamToken> contextType,
      final List<SearchParamDate> date,
      final List<SearchParamString> description,
      final List<SearchParamToken> jurisdiction,
      final List<SearchParamString> name,
      final List<SearchParamString> publisher,
      final List<SearchParamToken> status,
      final List<SearchParamUri> url,
      final List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          final List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          final List<SearchParamComposite> contextTypeValue,
      final List<SearchParamToken> start}) = _$_GraphDefinitionSearchParams;
  const _GraphDefinitionSearchParams._() : super._();

  @override

  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent;
  @override

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter;
  @override

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas;
  @override

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId;
  @override

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated;
  @override

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList;
  @override

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile;
  @override

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery;
  @override

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity;
  @override

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource;
  @override

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag;
  @override

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText;
  @override

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType;
  @override

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context;
  @override

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity;
  @override

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType;
  @override

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date;
  @override

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description;
  @override

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  List<SearchParamToken> get jurisdiction;
  @override

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name;
  @override

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher;
  @override

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status;
  @override

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url;
  @override

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version;
  @override

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity;
  @override

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue;
  @override

  /// [start] Type of resource at which the graph starts
  List<SearchParamToken> get start;
  @override
  @JsonKey(ignore: true)
  _$$_GraphDefinitionSearchParamsCopyWith<_$_GraphDefinitionSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
mixin _$ImplementationGuideSearchParams {
  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent =>
      throw _privateConstructorUsedError;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter =>
      throw _privateConstructorUsedError;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas => throw _privateConstructorUsedError;

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId => throw _privateConstructorUsedError;

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated =>
      throw _privateConstructorUsedError;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList =>
      throw _privateConstructorUsedError;

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile =>
      throw _privateConstructorUsedError;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery =>
      throw _privateConstructorUsedError;

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity =>
      throw _privateConstructorUsedError;

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource => throw _privateConstructorUsedError;

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag => throw _privateConstructorUsedError;

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText =>
      throw _privateConstructorUsedError;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType => throw _privateConstructorUsedError;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context => throw _privateConstructorUsedError;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity =>
      throw _privateConstructorUsedError;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType => throw _privateConstructorUsedError;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date => throw _privateConstructorUsedError;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description => throw _privateConstructorUsedError;

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  List<SearchParamToken> get jurisdiction => throw _privateConstructorUsedError;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name => throw _privateConstructorUsedError;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher => throw _privateConstructorUsedError;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status => throw _privateConstructorUsedError;

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  List<SearchParamString> get title => throw _privateConstructorUsedError;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url => throw _privateConstructorUsedError;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version => throw _privateConstructorUsedError;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity =>
      throw _privateConstructorUsedError;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue =>
      throw _privateConstructorUsedError;

  /// [dependsOn] Identity of the IG that this depends on
  @JsonKey(name: 'depends-on')
  List<SearchParamReference> get dependsOn =>
      throw _privateConstructorUsedError;

  /// [experimental] For testing purposes, not real usage
  List<SearchParamToken> get experimental => throw _privateConstructorUsedError;

  /// [global] Profile that all resources must conform to
  List<SearchParamReference> get global => throw _privateConstructorUsedError;

  /// [resource] Location of the resource
  List<SearchParamReference> get resource => throw _privateConstructorUsedError;

  @JsonKey(ignore: true)
  $ImplementationGuideSearchParamsCopyWith<ImplementationGuideSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $ImplementationGuideSearchParamsCopyWith<$Res> {
  factory $ImplementationGuideSearchParamsCopyWith(
          ImplementationGuideSearchParams value,
          $Res Function(ImplementationGuideSearchParams) then) =
      _$ImplementationGuideSearchParamsCopyWithImpl<$Res,
          ImplementationGuideSearchParams>;
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamToken> jurisdiction,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamString> title,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue,
      @JsonKey(name: 'depends-on')
          List<SearchParamReference> dependsOn,
      List<SearchParamToken> experimental,
      List<SearchParamReference> global,
      List<SearchParamReference> resource});
}

/// @nodoc
class _$ImplementationGuideSearchParamsCopyWithImpl<$Res,
        $Val extends ImplementationGuideSearchParams>
    implements $ImplementationGuideSearchParamsCopyWith<$Res> {
  _$ImplementationGuideSearchParamsCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? jurisdiction = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? title = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
    Object? dependsOn = null,
    Object? experimental = null,
    Object? global = null,
    Object? resource = null,
  }) {
    return _then(_value.copyWith(
      resourceContent: null == resourceContent
          ? _value.resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value.resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value.resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value.resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value.resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value.resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value.resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value.resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value.resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value.resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value.resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value.resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value.resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value.context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value.contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value.contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value.date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      jurisdiction: null == jurisdiction
          ? _value.jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value.publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      title: null == title
          ? _value.title
          : title // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      url: null == url
          ? _value.url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value.version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value.contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value.contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      dependsOn: null == dependsOn
          ? _value.dependsOn
          : dependsOn // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      experimental: null == experimental
          ? _value.experimental
          : experimental // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      global: null == global
          ? _value.global
          : global // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      resource: null == resource
          ? _value.resource
          : resource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$_ImplementationGuideSearchParamsCopyWith<$Res>
    implements $ImplementationGuideSearchParamsCopyWith<$Res> {
  factory _$$_ImplementationGuideSearchParamsCopyWith(
          _$_ImplementationGuideSearchParams value,
          $Res Function(_$_ImplementationGuideSearchParams) then) =
      __$$_ImplementationGuideSearchParamsCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamToken> jurisdiction,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamString> title,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue,
      @JsonKey(name: 'depends-on')
          List<SearchParamReference> dependsOn,
      List<SearchParamToken> experimental,
      List<SearchParamReference> global,
      List<SearchParamReference> resource});
}

/// @nodoc
class __$$_ImplementationGuideSearchParamsCopyWithImpl<$Res>
    extends _$ImplementationGuideSearchParamsCopyWithImpl<$Res,
        _$_ImplementationGuideSearchParams>
    implements _$$_ImplementationGuideSearchParamsCopyWith<$Res> {
  __$$_ImplementationGuideSearchParamsCopyWithImpl(
      _$_ImplementationGuideSearchParams _value,
      $Res Function(_$_ImplementationGuideSearchParams) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? jurisdiction = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? title = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
    Object? dependsOn = null,
    Object? experimental = null,
    Object? global = null,
    Object? resource = null,
  }) {
    return _then(_$_ImplementationGuideSearchParams(
      resourceContent: null == resourceContent
          ? _value._resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value._resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value._resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value._resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value._resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value._resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value._resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value._resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value._resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value._resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value._resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value._resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value._resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value._context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value._contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value._contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value._date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value._description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      jurisdiction: null == jurisdiction
          ? _value._jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value._name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value._publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value._status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      title: null == title
          ? _value._title
          : title // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      url: null == url
          ? _value._url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value._version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value._contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value._contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      dependsOn: null == dependsOn
          ? _value._dependsOn
          : dependsOn // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      experimental: null == experimental
          ? _value._experimental
          : experimental // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      global: null == global
          ? _value._global
          : global // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      resource: null == resource
          ? _value._resource
          : resource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
    ));
  }
}

/// @nodoc

class _$_ImplementationGuideSearchParams
    extends _ImplementationGuideSearchParams {
  const _$_ImplementationGuideSearchParams(
      {@JsonKey(name: '_content')
          final List<SearchParamString> resourceContent = const [],
      @JsonKey(name: '_filter')
          final List<SearchParamToken> resourceFilter = const [],
      @JsonKey(name: '_has')
          final List<SearchParamString> resourceHas = const [],
      @JsonKey(name: '_id')
          final List<SearchParamToken> resourceId = const [],
      @JsonKey(name: '_lastUpdated')
          final List<SearchParamDate> resourceLastUpdated = const [],
      @JsonKey(name: '_list')
          final List<SearchParamString> resourceList = const [],
      @JsonKey(name: '_profile')
          final List<SearchParamUri> resourceProfile = const [],
      @JsonKey(name: '_query')
          final List<SearchParamToken> resourceQuery = const [],
      @JsonKey(name: '_security')
          final List<SearchParamToken> resourceSecurity = const [],
      @JsonKey(name: '_source')
          final List<SearchParamUri> resourceSource = const [],
      @JsonKey(name: '_tag')
          final List<SearchParamToken> resourceTag = const [],
      @JsonKey(name: '_text')
          final List<SearchParamString> resourceText = const [],
      @JsonKey(name: '_type')
          final List<SearchParamToken> resourceType = const [],
      final List<SearchParamToken> context = const [],
      @JsonKey(name: 'context-quantity')
          final List<SearchParamQuantity> contextQuantity = const [],
      @JsonKey(name: 'context-type')
          final List<SearchParamToken> contextType = const [],
      final List<SearchParamDate> date = const [],
      final List<SearchParamString> description = const [],
      final List<SearchParamToken> jurisdiction = const [],
      final List<SearchParamString> name = const [],
      final List<SearchParamString> publisher = const [],
      final List<SearchParamToken> status = const [],
      final List<SearchParamString> title = const [],
      final List<SearchParamUri> url = const [],
      final List<SearchParamToken> version = const [],
      @JsonKey(name: 'context-type-quantity')
          final List<SearchParamComposite> contextTypeQuantity = const [],
      @JsonKey(name: 'context-type-value')
          final List<SearchParamComposite> contextTypeValue = const [],
      @JsonKey(name: 'depends-on')
          final List<SearchParamReference> dependsOn = const [],
      final List<SearchParamToken> experimental = const [],
      final List<SearchParamReference> global = const [],
      final List<SearchParamReference> resource = const []})
      : _resourceContent = resourceContent,
        _resourceFilter = resourceFilter,
        _resourceHas = resourceHas,
        _resourceId = resourceId,
        _resourceLastUpdated = resourceLastUpdated,
        _resourceList = resourceList,
        _resourceProfile = resourceProfile,
        _resourceQuery = resourceQuery,
        _resourceSecurity = resourceSecurity,
        _resourceSource = resourceSource,
        _resourceTag = resourceTag,
        _resourceText = resourceText,
        _resourceType = resourceType,
        _context = context,
        _contextQuantity = contextQuantity,
        _contextType = contextType,
        _date = date,
        _description = description,
        _jurisdiction = jurisdiction,
        _name = name,
        _publisher = publisher,
        _status = status,
        _title = title,
        _url = url,
        _version = version,
        _contextTypeQuantity = contextTypeQuantity,
        _contextTypeValue = contextTypeValue,
        _dependsOn = dependsOn,
        _experimental = experimental,
        _global = global,
        _resource = resource,
        super._();

  /// [resourceContent] Search on the entire content of the resource
  final List<SearchParamString> _resourceContent;

  /// [resourceContent] Search on the entire content of the resource
  @override
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent {
    if (_resourceContent is EqualUnmodifiableListView) return _resourceContent;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceContent);
  }

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  final List<SearchParamToken> _resourceFilter;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @override
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter {
    if (_resourceFilter is EqualUnmodifiableListView) return _resourceFilter;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceFilter);
  }

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  final List<SearchParamString> _resourceHas;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @override
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas {
    if (_resourceHas is EqualUnmodifiableListView) return _resourceHas;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceHas);
  }

  /// [resourceId] Logical id of this artifact
  final List<SearchParamToken> _resourceId;

  /// [resourceId] Logical id of this artifact
  @override
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId {
    if (_resourceId is EqualUnmodifiableListView) return _resourceId;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceId);
  }

  /// [resourceLastUpdated] When the resource version last changed
  final List<SearchParamDate> _resourceLastUpdated;

  /// [resourceLastUpdated] When the resource version last changed
  @override
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated {
    if (_resourceLastUpdated is EqualUnmodifiableListView)
      return _resourceLastUpdated;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceLastUpdated);
  }

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  final List<SearchParamString> _resourceList;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @override
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList {
    if (_resourceList is EqualUnmodifiableListView) return _resourceList;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceList);
  }

  /// [resourceProfile] Profiles this resource claims to conform to
  final List<SearchParamUri> _resourceProfile;

  /// [resourceProfile] Profiles this resource claims to conform to
  @override
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile {
    if (_resourceProfile is EqualUnmodifiableListView) return _resourceProfile;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceProfile);
  }

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  final List<SearchParamToken> _resourceQuery;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @override
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery {
    if (_resourceQuery is EqualUnmodifiableListView) return _resourceQuery;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceQuery);
  }

  /// [resourceSecurity] Security Labels applied to this resource
  final List<SearchParamToken> _resourceSecurity;

  /// [resourceSecurity] Security Labels applied to this resource
  @override
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity {
    if (_resourceSecurity is EqualUnmodifiableListView)
      return _resourceSecurity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSecurity);
  }

  /// [resourceSource] Identifies where the resource comes from
  final List<SearchParamUri> _resourceSource;

  /// [resourceSource] Identifies where the resource comes from
  @override
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource {
    if (_resourceSource is EqualUnmodifiableListView) return _resourceSource;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSource);
  }

  /// [resourceTag] Tags applied to this resource
  final List<SearchParamToken> _resourceTag;

  /// [resourceTag] Tags applied to this resource
  @override
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag {
    if (_resourceTag is EqualUnmodifiableListView) return _resourceTag;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceTag);
  }

  /// [resourceText] Search on the narrative text (html) of the resource
  final List<SearchParamString> _resourceText;

  /// [resourceText] Search on the narrative text (html) of the resource
  @override
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText {
    if (_resourceText is EqualUnmodifiableListView) return _resourceText;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceText);
  }

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  final List<SearchParamToken> _resourceType;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @override
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType {
    if (_resourceType is EqualUnmodifiableListView) return _resourceType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceType);
  }

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  final List<SearchParamToken> _context;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  @override
  @JsonKey()
  List<SearchParamToken> get context {
    if (_context is EqualUnmodifiableListView) return _context;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_context);
  }

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  final List<SearchParamQuantity> _contextQuantity;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @override
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity {
    if (_contextQuantity is EqualUnmodifiableListView) return _contextQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextQuantity);
  }

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  final List<SearchParamToken> _contextType;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @override
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType {
    if (_contextType is EqualUnmodifiableListView) return _contextType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextType);
  }

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  final List<SearchParamDate> _date;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  @override
  @JsonKey()
  List<SearchParamDate> get date {
    if (_date is EqualUnmodifiableListView) return _date;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_date);
  }

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  final List<SearchParamString> _description;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  @override
  @JsonKey()
  List<SearchParamString> get description {
    if (_description is EqualUnmodifiableListView) return _description;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_description);
  }

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  final List<SearchParamToken> _jurisdiction;

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  @override
  @JsonKey()
  List<SearchParamToken> get jurisdiction {
    if (_jurisdiction is EqualUnmodifiableListView) return _jurisdiction;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_jurisdiction);
  }

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  final List<SearchParamString> _name;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  @override
  @JsonKey()
  List<SearchParamString> get name {
    if (_name is EqualUnmodifiableListView) return _name;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_name);
  }

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  final List<SearchParamString> _publisher;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  @override
  @JsonKey()
  List<SearchParamString> get publisher {
    if (_publisher is EqualUnmodifiableListView) return _publisher;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_publisher);
  }

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  final List<SearchParamToken> _status;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get status {
    if (_status is EqualUnmodifiableListView) return _status;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_status);
  }

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  final List<SearchParamString> _title;

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  @override
  @JsonKey()
  List<SearchParamString> get title {
    if (_title is EqualUnmodifiableListView) return _title;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_title);
  }

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  final List<SearchParamUri> _url;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  @override
  @JsonKey()
  List<SearchParamUri> get url {
    if (_url is EqualUnmodifiableListView) return _url;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_url);
  }

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  final List<SearchParamToken> _version;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get version {
    if (_version is EqualUnmodifiableListView) return _version;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_version);
  }

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  final List<SearchParamComposite> _contextTypeQuantity;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @override
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity {
    if (_contextTypeQuantity is EqualUnmodifiableListView)
      return _contextTypeQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeQuantity);
  }

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  final List<SearchParamComposite> _contextTypeValue;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @override
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue {
    if (_contextTypeValue is EqualUnmodifiableListView)
      return _contextTypeValue;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeValue);
  }

  /// [dependsOn] Identity of the IG that this depends on
  final List<SearchParamReference> _dependsOn;

  /// [dependsOn] Identity of the IG that this depends on
  @override
  @JsonKey(name: 'depends-on')
  List<SearchParamReference> get dependsOn {
    if (_dependsOn is EqualUnmodifiableListView) return _dependsOn;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_dependsOn);
  }

  /// [experimental] For testing purposes, not real usage
  final List<SearchParamToken> _experimental;

  /// [experimental] For testing purposes, not real usage
  @override
  @JsonKey()
  List<SearchParamToken> get experimental {
    if (_experimental is EqualUnmodifiableListView) return _experimental;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_experimental);
  }

  /// [global] Profile that all resources must conform to
  final List<SearchParamReference> _global;

  /// [global] Profile that all resources must conform to
  @override
  @JsonKey()
  List<SearchParamReference> get global {
    if (_global is EqualUnmodifiableListView) return _global;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_global);
  }

  /// [resource] Location of the resource
  final List<SearchParamReference> _resource;

  /// [resource] Location of the resource
  @override
  @JsonKey()
  List<SearchParamReference> get resource {
    if (_resource is EqualUnmodifiableListView) return _resource;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resource);
  }

  @override
  String toString() {
    return 'ImplementationGuideSearchParams(resourceContent: $resourceContent, resourceFilter: $resourceFilter, resourceHas: $resourceHas, resourceId: $resourceId, resourceLastUpdated: $resourceLastUpdated, resourceList: $resourceList, resourceProfile: $resourceProfile, resourceQuery: $resourceQuery, resourceSecurity: $resourceSecurity, resourceSource: $resourceSource, resourceTag: $resourceTag, resourceText: $resourceText, resourceType: $resourceType, context: $context, contextQuantity: $contextQuantity, contextType: $contextType, date: $date, description: $description, jurisdiction: $jurisdiction, name: $name, publisher: $publisher, status: $status, title: $title, url: $url, version: $version, contextTypeQuantity: $contextTypeQuantity, contextTypeValue: $contextTypeValue, dependsOn: $dependsOn, experimental: $experimental, global: $global, resource: $resource)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_ImplementationGuideSearchParams &&
            const DeepCollectionEquality()
                .equals(other._resourceContent, _resourceContent) &&
            const DeepCollectionEquality()
                .equals(other._resourceFilter, _resourceFilter) &&
            const DeepCollectionEquality()
                .equals(other._resourceHas, _resourceHas) &&
            const DeepCollectionEquality()
                .equals(other._resourceId, _resourceId) &&
            const DeepCollectionEquality()
                .equals(other._resourceLastUpdated, _resourceLastUpdated) &&
            const DeepCollectionEquality()
                .equals(other._resourceList, _resourceList) &&
            const DeepCollectionEquality()
                .equals(other._resourceProfile, _resourceProfile) &&
            const DeepCollectionEquality()
                .equals(other._resourceQuery, _resourceQuery) &&
            const DeepCollectionEquality()
                .equals(other._resourceSecurity, _resourceSecurity) &&
            const DeepCollectionEquality()
                .equals(other._resourceSource, _resourceSource) &&
            const DeepCollectionEquality()
                .equals(other._resourceTag, _resourceTag) &&
            const DeepCollectionEquality()
                .equals(other._resourceText, _resourceText) &&
            const DeepCollectionEquality()
                .equals(other._resourceType, _resourceType) &&
            const DeepCollectionEquality().equals(other._context, _context) &&
            const DeepCollectionEquality()
                .equals(other._contextQuantity, _contextQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextType, _contextType) &&
            const DeepCollectionEquality().equals(other._date, _date) &&
            const DeepCollectionEquality()
                .equals(other._description, _description) &&
            const DeepCollectionEquality()
                .equals(other._jurisdiction, _jurisdiction) &&
            const DeepCollectionEquality().equals(other._name, _name) &&
            const DeepCollectionEquality()
                .equals(other._publisher, _publisher) &&
            const DeepCollectionEquality().equals(other._status, _status) &&
            const DeepCollectionEquality().equals(other._title, _title) &&
            const DeepCollectionEquality().equals(other._url, _url) &&
            const DeepCollectionEquality().equals(other._version, _version) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeQuantity, _contextTypeQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeValue, _contextTypeValue) &&
            const DeepCollectionEquality()
                .equals(other._dependsOn, _dependsOn) &&
            const DeepCollectionEquality()
                .equals(other._experimental, _experimental) &&
            const DeepCollectionEquality().equals(other._global, _global) &&
            const DeepCollectionEquality().equals(other._resource, _resource));
  }

  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        const DeepCollectionEquality().hash(_resourceContent),
        const DeepCollectionEquality().hash(_resourceFilter),
        const DeepCollectionEquality().hash(_resourceHas),
        const DeepCollectionEquality().hash(_resourceId),
        const DeepCollectionEquality().hash(_resourceLastUpdated),
        const DeepCollectionEquality().hash(_resourceList),
        const DeepCollectionEquality().hash(_resourceProfile),
        const DeepCollectionEquality().hash(_resourceQuery),
        const DeepCollectionEquality().hash(_resourceSecurity),
        const DeepCollectionEquality().hash(_resourceSource),
        const DeepCollectionEquality().hash(_resourceTag),
        const DeepCollectionEquality().hash(_resourceText),
        const DeepCollectionEquality().hash(_resourceType),
        const DeepCollectionEquality().hash(_context),
        const DeepCollectionEquality().hash(_contextQuantity),
        const DeepCollectionEquality().hash(_contextType),
        const DeepCollectionEquality().hash(_date),
        const DeepCollectionEquality().hash(_description),
        const DeepCollectionEquality().hash(_jurisdiction),
        const DeepCollectionEquality().hash(_name),
        const DeepCollectionEquality().hash(_publisher),
        const DeepCollectionEquality().hash(_status),
        const DeepCollectionEquality().hash(_title),
        const DeepCollectionEquality().hash(_url),
        const DeepCollectionEquality().hash(_version),
        const DeepCollectionEquality().hash(_contextTypeQuantity),
        const DeepCollectionEquality().hash(_contextTypeValue),
        const DeepCollectionEquality().hash(_dependsOn),
        const DeepCollectionEquality().hash(_experimental),
        const DeepCollectionEquality().hash(_global),
        const DeepCollectionEquality().hash(_resource)
      ]);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_ImplementationGuideSearchParamsCopyWith<
          _$_ImplementationGuideSearchParams>
      get copyWith => __$$_ImplementationGuideSearchParamsCopyWithImpl<
          _$_ImplementationGuideSearchParams>(this, _$identity);
}

abstract class _ImplementationGuideSearchParams
    extends ImplementationGuideSearchParams {
  const factory _ImplementationGuideSearchParams(
          {@JsonKey(name: '_content')
              final List<SearchParamString> resourceContent,
          @JsonKey(name: '_filter')
              final List<SearchParamToken> resourceFilter,
          @JsonKey(name: '_has')
              final List<SearchParamString> resourceHas,
          @JsonKey(name: '_id')
              final List<SearchParamToken> resourceId,
          @JsonKey(name: '_lastUpdated')
              final List<SearchParamDate> resourceLastUpdated,
          @JsonKey(name: '_list')
              final List<SearchParamString> resourceList,
          @JsonKey(name: '_profile')
              final List<SearchParamUri> resourceProfile,
          @JsonKey(name: '_query')
              final List<SearchParamToken> resourceQuery,
          @JsonKey(name: '_security')
              final List<SearchParamToken> resourceSecurity,
          @JsonKey(name: '_source')
              final List<SearchParamUri> resourceSource,
          @JsonKey(name: '_tag')
              final List<SearchParamToken> resourceTag,
          @JsonKey(name: '_text')
              final List<SearchParamString> resourceText,
          @JsonKey(name: '_type')
              final List<SearchParamToken> resourceType,
          final List<SearchParamToken> context,
          @JsonKey(name: 'context-quantity')
              final List<SearchParamQuantity> contextQuantity,
          @JsonKey(name: 'context-type')
              final List<SearchParamToken> contextType,
          final List<SearchParamDate> date,
          final List<SearchParamString> description,
          final List<SearchParamToken> jurisdiction,
          final List<SearchParamString> name,
          final List<SearchParamString> publisher,
          final List<SearchParamToken> status,
          final List<SearchParamString> title,
          final List<SearchParamUri> url,
          final List<SearchParamToken> version,
          @JsonKey(name: 'context-type-quantity')
              final List<SearchParamComposite> contextTypeQuantity,
          @JsonKey(name: 'context-type-value')
              final List<SearchParamComposite> contextTypeValue,
          @JsonKey(name: 'depends-on')
              final List<SearchParamReference> dependsOn,
          final List<SearchParamToken> experimental,
          final List<SearchParamReference> global,
          final List<SearchParamReference> resource}) =
      _$_ImplementationGuideSearchParams;
  const _ImplementationGuideSearchParams._() : super._();

  @override

  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent;
  @override

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter;
  @override

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas;
  @override

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId;
  @override

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated;
  @override

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList;
  @override

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile;
  @override

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery;
  @override

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity;
  @override

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource;
  @override

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag;
  @override

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText;
  @override

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType;
  @override

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context;
  @override

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity;
  @override

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType;
  @override

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date;
  @override

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description;
  @override

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  List<SearchParamToken> get jurisdiction;
  @override

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name;
  @override

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher;
  @override

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status;
  @override

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  List<SearchParamString> get title;
  @override

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url;
  @override

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version;
  @override

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity;
  @override

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue;
  @override

  /// [dependsOn] Identity of the IG that this depends on
  @JsonKey(name: 'depends-on')
  List<SearchParamReference> get dependsOn;
  @override

  /// [experimental] For testing purposes, not real usage
  List<SearchParamToken> get experimental;
  @override

  /// [global] Profile that all resources must conform to
  List<SearchParamReference> get global;
  @override

  /// [resource] Location of the resource
  List<SearchParamReference> get resource;
  @override
  @JsonKey(ignore: true)
  _$$_ImplementationGuideSearchParamsCopyWith<
          _$_ImplementationGuideSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
mixin _$MessageDefinitionSearchParams {
  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent =>
      throw _privateConstructorUsedError;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter =>
      throw _privateConstructorUsedError;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas => throw _privateConstructorUsedError;

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId => throw _privateConstructorUsedError;

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated =>
      throw _privateConstructorUsedError;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList =>
      throw _privateConstructorUsedError;

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile =>
      throw _privateConstructorUsedError;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery =>
      throw _privateConstructorUsedError;

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity =>
      throw _privateConstructorUsedError;

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource => throw _privateConstructorUsedError;

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag => throw _privateConstructorUsedError;

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText =>
      throw _privateConstructorUsedError;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType => throw _privateConstructorUsedError;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context => throw _privateConstructorUsedError;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity =>
      throw _privateConstructorUsedError;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType => throw _privateConstructorUsedError;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date => throw _privateConstructorUsedError;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description => throw _privateConstructorUsedError;

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  List<SearchParamToken> get jurisdiction => throw _privateConstructorUsedError;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name => throw _privateConstructorUsedError;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher => throw _privateConstructorUsedError;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status => throw _privateConstructorUsedError;

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  List<SearchParamString> get title => throw _privateConstructorUsedError;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url => throw _privateConstructorUsedError;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version => throw _privateConstructorUsedError;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity =>
      throw _privateConstructorUsedError;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue =>
      throw _privateConstructorUsedError;

  /// [identifier] Multiple Resources:
  /// * [CodeSystem](codesystem.html): External identifier for the code system
  /// * [ConceptMap](conceptmap.html): External identifier for the concept map
  /// * [MessageDefinition](messagedefinition.html): External identifier for the message definition
  /// * [StructureDefinition](structuredefinition.html): External identifier for the structure definition
  /// * [StructureMap](structuremap.html): External identifier for the structure map
  /// * [ValueSet](valueset.html): External identifier for the value set
  List<SearchParamToken> get identifier => throw _privateConstructorUsedError;

  /// [category] The behavior associated with the message
  List<SearchParamToken> get category => throw _privateConstructorUsedError;

  /// [event] The event that triggers the message or link to the event definition.
  List<SearchParamToken> get event => throw _privateConstructorUsedError;

  /// [focus] A resource that is a permitted focus of the message
  List<SearchParamToken> get focus => throw _privateConstructorUsedError;

  /// [parent] A resource that is the parent of the definition
  List<SearchParamReference> get parent => throw _privateConstructorUsedError;

  @JsonKey(ignore: true)
  $MessageDefinitionSearchParamsCopyWith<MessageDefinitionSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $MessageDefinitionSearchParamsCopyWith<$Res> {
  factory $MessageDefinitionSearchParamsCopyWith(
          MessageDefinitionSearchParams value,
          $Res Function(MessageDefinitionSearchParams) then) =
      _$MessageDefinitionSearchParamsCopyWithImpl<$Res,
          MessageDefinitionSearchParams>;
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamToken> jurisdiction,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamString> title,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue,
      List<SearchParamToken> identifier,
      List<SearchParamToken> category,
      List<SearchParamToken> event,
      List<SearchParamToken> focus,
      List<SearchParamReference> parent});
}

/// @nodoc
class _$MessageDefinitionSearchParamsCopyWithImpl<$Res,
        $Val extends MessageDefinitionSearchParams>
    implements $MessageDefinitionSearchParamsCopyWith<$Res> {
  _$MessageDefinitionSearchParamsCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? jurisdiction = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? title = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
    Object? identifier = null,
    Object? category = null,
    Object? event = null,
    Object? focus = null,
    Object? parent = null,
  }) {
    return _then(_value.copyWith(
      resourceContent: null == resourceContent
          ? _value.resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value.resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value.resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value.resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value.resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value.resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value.resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value.resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value.resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value.resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value.resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value.resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value.resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value.context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value.contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value.contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value.date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      jurisdiction: null == jurisdiction
          ? _value.jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value.publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      title: null == title
          ? _value.title
          : title // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      url: null == url
          ? _value.url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value.version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value.contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value.contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      identifier: null == identifier
          ? _value.identifier
          : identifier // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      category: null == category
          ? _value.category
          : category // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      event: null == event
          ? _value.event
          : event // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      focus: null == focus
          ? _value.focus
          : focus // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      parent: null == parent
          ? _value.parent
          : parent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$_MessageDefinitionSearchParamsCopyWith<$Res>
    implements $MessageDefinitionSearchParamsCopyWith<$Res> {
  factory _$$_MessageDefinitionSearchParamsCopyWith(
          _$_MessageDefinitionSearchParams value,
          $Res Function(_$_MessageDefinitionSearchParams) then) =
      __$$_MessageDefinitionSearchParamsCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamToken> jurisdiction,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamString> title,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue,
      List<SearchParamToken> identifier,
      List<SearchParamToken> category,
      List<SearchParamToken> event,
      List<SearchParamToken> focus,
      List<SearchParamReference> parent});
}

/// @nodoc
class __$$_MessageDefinitionSearchParamsCopyWithImpl<$Res>
    extends _$MessageDefinitionSearchParamsCopyWithImpl<$Res,
        _$_MessageDefinitionSearchParams>
    implements _$$_MessageDefinitionSearchParamsCopyWith<$Res> {
  __$$_MessageDefinitionSearchParamsCopyWithImpl(
      _$_MessageDefinitionSearchParams _value,
      $Res Function(_$_MessageDefinitionSearchParams) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? jurisdiction = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? title = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
    Object? identifier = null,
    Object? category = null,
    Object? event = null,
    Object? focus = null,
    Object? parent = null,
  }) {
    return _then(_$_MessageDefinitionSearchParams(
      resourceContent: null == resourceContent
          ? _value._resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value._resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value._resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value._resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value._resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value._resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value._resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value._resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value._resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value._resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value._resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value._resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value._resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value._context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value._contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value._contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value._date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value._description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      jurisdiction: null == jurisdiction
          ? _value._jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value._name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value._publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value._status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      title: null == title
          ? _value._title
          : title // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      url: null == url
          ? _value._url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value._version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value._contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value._contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      identifier: null == identifier
          ? _value._identifier
          : identifier // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      category: null == category
          ? _value._category
          : category // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      event: null == event
          ? _value._event
          : event // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      focus: null == focus
          ? _value._focus
          : focus // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      parent: null == parent
          ? _value._parent
          : parent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
    ));
  }
}

/// @nodoc

class _$_MessageDefinitionSearchParams extends _MessageDefinitionSearchParams {
  const _$_MessageDefinitionSearchParams(
      {@JsonKey(name: '_content')
          final List<SearchParamString> resourceContent = const [],
      @JsonKey(name: '_filter')
          final List<SearchParamToken> resourceFilter = const [],
      @JsonKey(name: '_has')
          final List<SearchParamString> resourceHas = const [],
      @JsonKey(name: '_id')
          final List<SearchParamToken> resourceId = const [],
      @JsonKey(name: '_lastUpdated')
          final List<SearchParamDate> resourceLastUpdated = const [],
      @JsonKey(name: '_list')
          final List<SearchParamString> resourceList = const [],
      @JsonKey(name: '_profile')
          final List<SearchParamUri> resourceProfile = const [],
      @JsonKey(name: '_query')
          final List<SearchParamToken> resourceQuery = const [],
      @JsonKey(name: '_security')
          final List<SearchParamToken> resourceSecurity = const [],
      @JsonKey(name: '_source')
          final List<SearchParamUri> resourceSource = const [],
      @JsonKey(name: '_tag')
          final List<SearchParamToken> resourceTag = const [],
      @JsonKey(name: '_text')
          final List<SearchParamString> resourceText = const [],
      @JsonKey(name: '_type')
          final List<SearchParamToken> resourceType = const [],
      final List<SearchParamToken> context = const [],
      @JsonKey(name: 'context-quantity')
          final List<SearchParamQuantity> contextQuantity = const [],
      @JsonKey(name: 'context-type')
          final List<SearchParamToken> contextType = const [],
      final List<SearchParamDate> date = const [],
      final List<SearchParamString> description = const [],
      final List<SearchParamToken> jurisdiction = const [],
      final List<SearchParamString> name = const [],
      final List<SearchParamString> publisher = const [],
      final List<SearchParamToken> status = const [],
      final List<SearchParamString> title = const [],
      final List<SearchParamUri> url = const [],
      final List<SearchParamToken> version = const [],
      @JsonKey(name: 'context-type-quantity')
          final List<SearchParamComposite> contextTypeQuantity = const [],
      @JsonKey(name: 'context-type-value')
          final List<SearchParamComposite> contextTypeValue = const [],
      final List<SearchParamToken> identifier = const [],
      final List<SearchParamToken> category = const [],
      final List<SearchParamToken> event = const [],
      final List<SearchParamToken> focus = const [],
      final List<SearchParamReference> parent = const []})
      : _resourceContent = resourceContent,
        _resourceFilter = resourceFilter,
        _resourceHas = resourceHas,
        _resourceId = resourceId,
        _resourceLastUpdated = resourceLastUpdated,
        _resourceList = resourceList,
        _resourceProfile = resourceProfile,
        _resourceQuery = resourceQuery,
        _resourceSecurity = resourceSecurity,
        _resourceSource = resourceSource,
        _resourceTag = resourceTag,
        _resourceText = resourceText,
        _resourceType = resourceType,
        _context = context,
        _contextQuantity = contextQuantity,
        _contextType = contextType,
        _date = date,
        _description = description,
        _jurisdiction = jurisdiction,
        _name = name,
        _publisher = publisher,
        _status = status,
        _title = title,
        _url = url,
        _version = version,
        _contextTypeQuantity = contextTypeQuantity,
        _contextTypeValue = contextTypeValue,
        _identifier = identifier,
        _category = category,
        _event = event,
        _focus = focus,
        _parent = parent,
        super._();

  /// [resourceContent] Search on the entire content of the resource
  final List<SearchParamString> _resourceContent;

  /// [resourceContent] Search on the entire content of the resource
  @override
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent {
    if (_resourceContent is EqualUnmodifiableListView) return _resourceContent;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceContent);
  }

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  final List<SearchParamToken> _resourceFilter;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @override
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter {
    if (_resourceFilter is EqualUnmodifiableListView) return _resourceFilter;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceFilter);
  }

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  final List<SearchParamString> _resourceHas;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @override
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas {
    if (_resourceHas is EqualUnmodifiableListView) return _resourceHas;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceHas);
  }

  /// [resourceId] Logical id of this artifact
  final List<SearchParamToken> _resourceId;

  /// [resourceId] Logical id of this artifact
  @override
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId {
    if (_resourceId is EqualUnmodifiableListView) return _resourceId;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceId);
  }

  /// [resourceLastUpdated] When the resource version last changed
  final List<SearchParamDate> _resourceLastUpdated;

  /// [resourceLastUpdated] When the resource version last changed
  @override
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated {
    if (_resourceLastUpdated is EqualUnmodifiableListView)
      return _resourceLastUpdated;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceLastUpdated);
  }

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  final List<SearchParamString> _resourceList;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @override
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList {
    if (_resourceList is EqualUnmodifiableListView) return _resourceList;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceList);
  }

  /// [resourceProfile] Profiles this resource claims to conform to
  final List<SearchParamUri> _resourceProfile;

  /// [resourceProfile] Profiles this resource claims to conform to
  @override
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile {
    if (_resourceProfile is EqualUnmodifiableListView) return _resourceProfile;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceProfile);
  }

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  final List<SearchParamToken> _resourceQuery;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @override
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery {
    if (_resourceQuery is EqualUnmodifiableListView) return _resourceQuery;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceQuery);
  }

  /// [resourceSecurity] Security Labels applied to this resource
  final List<SearchParamToken> _resourceSecurity;

  /// [resourceSecurity] Security Labels applied to this resource
  @override
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity {
    if (_resourceSecurity is EqualUnmodifiableListView)
      return _resourceSecurity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSecurity);
  }

  /// [resourceSource] Identifies where the resource comes from
  final List<SearchParamUri> _resourceSource;

  /// [resourceSource] Identifies where the resource comes from
  @override
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource {
    if (_resourceSource is EqualUnmodifiableListView) return _resourceSource;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSource);
  }

  /// [resourceTag] Tags applied to this resource
  final List<SearchParamToken> _resourceTag;

  /// [resourceTag] Tags applied to this resource
  @override
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag {
    if (_resourceTag is EqualUnmodifiableListView) return _resourceTag;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceTag);
  }

  /// [resourceText] Search on the narrative text (html) of the resource
  final List<SearchParamString> _resourceText;

  /// [resourceText] Search on the narrative text (html) of the resource
  @override
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText {
    if (_resourceText is EqualUnmodifiableListView) return _resourceText;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceText);
  }

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  final List<SearchParamToken> _resourceType;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @override
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType {
    if (_resourceType is EqualUnmodifiableListView) return _resourceType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceType);
  }

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  final List<SearchParamToken> _context;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  @override
  @JsonKey()
  List<SearchParamToken> get context {
    if (_context is EqualUnmodifiableListView) return _context;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_context);
  }

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  final List<SearchParamQuantity> _contextQuantity;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @override
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity {
    if (_contextQuantity is EqualUnmodifiableListView) return _contextQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextQuantity);
  }

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  final List<SearchParamToken> _contextType;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @override
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType {
    if (_contextType is EqualUnmodifiableListView) return _contextType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextType);
  }

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  final List<SearchParamDate> _date;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  @override
  @JsonKey()
  List<SearchParamDate> get date {
    if (_date is EqualUnmodifiableListView) return _date;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_date);
  }

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  final List<SearchParamString> _description;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  @override
  @JsonKey()
  List<SearchParamString> get description {
    if (_description is EqualUnmodifiableListView) return _description;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_description);
  }

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  final List<SearchParamToken> _jurisdiction;

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  @override
  @JsonKey()
  List<SearchParamToken> get jurisdiction {
    if (_jurisdiction is EqualUnmodifiableListView) return _jurisdiction;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_jurisdiction);
  }

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  final List<SearchParamString> _name;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  @override
  @JsonKey()
  List<SearchParamString> get name {
    if (_name is EqualUnmodifiableListView) return _name;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_name);
  }

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  final List<SearchParamString> _publisher;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  @override
  @JsonKey()
  List<SearchParamString> get publisher {
    if (_publisher is EqualUnmodifiableListView) return _publisher;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_publisher);
  }

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  final List<SearchParamToken> _status;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get status {
    if (_status is EqualUnmodifiableListView) return _status;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_status);
  }

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  final List<SearchParamString> _title;

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  @override
  @JsonKey()
  List<SearchParamString> get title {
    if (_title is EqualUnmodifiableListView) return _title;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_title);
  }

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  final List<SearchParamUri> _url;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  @override
  @JsonKey()
  List<SearchParamUri> get url {
    if (_url is EqualUnmodifiableListView) return _url;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_url);
  }

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  final List<SearchParamToken> _version;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get version {
    if (_version is EqualUnmodifiableListView) return _version;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_version);
  }

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  final List<SearchParamComposite> _contextTypeQuantity;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @override
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity {
    if (_contextTypeQuantity is EqualUnmodifiableListView)
      return _contextTypeQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeQuantity);
  }

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  final List<SearchParamComposite> _contextTypeValue;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @override
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue {
    if (_contextTypeValue is EqualUnmodifiableListView)
      return _contextTypeValue;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeValue);
  }

  /// [identifier] Multiple Resources:
  /// * [CodeSystem](codesystem.html): External identifier for the code system
  /// * [ConceptMap](conceptmap.html): External identifier for the concept map
  /// * [MessageDefinition](messagedefinition.html): External identifier for the message definition
  /// * [StructureDefinition](structuredefinition.html): External identifier for the structure definition
  /// * [StructureMap](structuremap.html): External identifier for the structure map
  /// * [ValueSet](valueset.html): External identifier for the value set
  final List<SearchParamToken> _identifier;

  /// [identifier] Multiple Resources:
  /// * [CodeSystem](codesystem.html): External identifier for the code system
  /// * [ConceptMap](conceptmap.html): External identifier for the concept map
  /// * [MessageDefinition](messagedefinition.html): External identifier for the message definition
  /// * [StructureDefinition](structuredefinition.html): External identifier for the structure definition
  /// * [StructureMap](structuremap.html): External identifier for the structure map
  /// * [ValueSet](valueset.html): External identifier for the value set
  @override
  @JsonKey()
  List<SearchParamToken> get identifier {
    if (_identifier is EqualUnmodifiableListView) return _identifier;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_identifier);
  }

  /// [category] The behavior associated with the message
  final List<SearchParamToken> _category;

  /// [category] The behavior associated with the message
  @override
  @JsonKey()
  List<SearchParamToken> get category {
    if (_category is EqualUnmodifiableListView) return _category;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_category);
  }

  /// [event] The event that triggers the message or link to the event definition.
  final List<SearchParamToken> _event;

  /// [event] The event that triggers the message or link to the event definition.
  @override
  @JsonKey()
  List<SearchParamToken> get event {
    if (_event is EqualUnmodifiableListView) return _event;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_event);
  }

  /// [focus] A resource that is a permitted focus of the message
  final List<SearchParamToken> _focus;

  /// [focus] A resource that is a permitted focus of the message
  @override
  @JsonKey()
  List<SearchParamToken> get focus {
    if (_focus is EqualUnmodifiableListView) return _focus;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_focus);
  }

  /// [parent] A resource that is the parent of the definition
  final List<SearchParamReference> _parent;

  /// [parent] A resource that is the parent of the definition
  @override
  @JsonKey()
  List<SearchParamReference> get parent {
    if (_parent is EqualUnmodifiableListView) return _parent;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_parent);
  }

  @override
  String toString() {
    return 'MessageDefinitionSearchParams(resourceContent: $resourceContent, resourceFilter: $resourceFilter, resourceHas: $resourceHas, resourceId: $resourceId, resourceLastUpdated: $resourceLastUpdated, resourceList: $resourceList, resourceProfile: $resourceProfile, resourceQuery: $resourceQuery, resourceSecurity: $resourceSecurity, resourceSource: $resourceSource, resourceTag: $resourceTag, resourceText: $resourceText, resourceType: $resourceType, context: $context, contextQuantity: $contextQuantity, contextType: $contextType, date: $date, description: $description, jurisdiction: $jurisdiction, name: $name, publisher: $publisher, status: $status, title: $title, url: $url, version: $version, contextTypeQuantity: $contextTypeQuantity, contextTypeValue: $contextTypeValue, identifier: $identifier, category: $category, event: $event, focus: $focus, parent: $parent)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_MessageDefinitionSearchParams &&
            const DeepCollectionEquality()
                .equals(other._resourceContent, _resourceContent) &&
            const DeepCollectionEquality()
                .equals(other._resourceFilter, _resourceFilter) &&
            const DeepCollectionEquality()
                .equals(other._resourceHas, _resourceHas) &&
            const DeepCollectionEquality()
                .equals(other._resourceId, _resourceId) &&
            const DeepCollectionEquality()
                .equals(other._resourceLastUpdated, _resourceLastUpdated) &&
            const DeepCollectionEquality()
                .equals(other._resourceList, _resourceList) &&
            const DeepCollectionEquality()
                .equals(other._resourceProfile, _resourceProfile) &&
            const DeepCollectionEquality()
                .equals(other._resourceQuery, _resourceQuery) &&
            const DeepCollectionEquality()
                .equals(other._resourceSecurity, _resourceSecurity) &&
            const DeepCollectionEquality()
                .equals(other._resourceSource, _resourceSource) &&
            const DeepCollectionEquality()
                .equals(other._resourceTag, _resourceTag) &&
            const DeepCollectionEquality()
                .equals(other._resourceText, _resourceText) &&
            const DeepCollectionEquality()
                .equals(other._resourceType, _resourceType) &&
            const DeepCollectionEquality().equals(other._context, _context) &&
            const DeepCollectionEquality()
                .equals(other._contextQuantity, _contextQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextType, _contextType) &&
            const DeepCollectionEquality().equals(other._date, _date) &&
            const DeepCollectionEquality()
                .equals(other._description, _description) &&
            const DeepCollectionEquality()
                .equals(other._jurisdiction, _jurisdiction) &&
            const DeepCollectionEquality().equals(other._name, _name) &&
            const DeepCollectionEquality()
                .equals(other._publisher, _publisher) &&
            const DeepCollectionEquality().equals(other._status, _status) &&
            const DeepCollectionEquality().equals(other._title, _title) &&
            const DeepCollectionEquality().equals(other._url, _url) &&
            const DeepCollectionEquality().equals(other._version, _version) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeQuantity, _contextTypeQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeValue, _contextTypeValue) &&
            const DeepCollectionEquality()
                .equals(other._identifier, _identifier) &&
            const DeepCollectionEquality().equals(other._category, _category) &&
            const DeepCollectionEquality().equals(other._event, _event) &&
            const DeepCollectionEquality().equals(other._focus, _focus) &&
            const DeepCollectionEquality().equals(other._parent, _parent));
  }

  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        const DeepCollectionEquality().hash(_resourceContent),
        const DeepCollectionEquality().hash(_resourceFilter),
        const DeepCollectionEquality().hash(_resourceHas),
        const DeepCollectionEquality().hash(_resourceId),
        const DeepCollectionEquality().hash(_resourceLastUpdated),
        const DeepCollectionEquality().hash(_resourceList),
        const DeepCollectionEquality().hash(_resourceProfile),
        const DeepCollectionEquality().hash(_resourceQuery),
        const DeepCollectionEquality().hash(_resourceSecurity),
        const DeepCollectionEquality().hash(_resourceSource),
        const DeepCollectionEquality().hash(_resourceTag),
        const DeepCollectionEquality().hash(_resourceText),
        const DeepCollectionEquality().hash(_resourceType),
        const DeepCollectionEquality().hash(_context),
        const DeepCollectionEquality().hash(_contextQuantity),
        const DeepCollectionEquality().hash(_contextType),
        const DeepCollectionEquality().hash(_date),
        const DeepCollectionEquality().hash(_description),
        const DeepCollectionEquality().hash(_jurisdiction),
        const DeepCollectionEquality().hash(_name),
        const DeepCollectionEquality().hash(_publisher),
        const DeepCollectionEquality().hash(_status),
        const DeepCollectionEquality().hash(_title),
        const DeepCollectionEquality().hash(_url),
        const DeepCollectionEquality().hash(_version),
        const DeepCollectionEquality().hash(_contextTypeQuantity),
        const DeepCollectionEquality().hash(_contextTypeValue),
        const DeepCollectionEquality().hash(_identifier),
        const DeepCollectionEquality().hash(_category),
        const DeepCollectionEquality().hash(_event),
        const DeepCollectionEquality().hash(_focus),
        const DeepCollectionEquality().hash(_parent)
      ]);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_MessageDefinitionSearchParamsCopyWith<_$_MessageDefinitionSearchParams>
      get copyWith => __$$_MessageDefinitionSearchParamsCopyWithImpl<
          _$_MessageDefinitionSearchParams>(this, _$identity);
}

abstract class _MessageDefinitionSearchParams
    extends MessageDefinitionSearchParams {
  const factory _MessageDefinitionSearchParams(
          {@JsonKey(name: '_content')
              final List<SearchParamString> resourceContent,
          @JsonKey(name: '_filter')
              final List<SearchParamToken> resourceFilter,
          @JsonKey(name: '_has')
              final List<SearchParamString> resourceHas,
          @JsonKey(name: '_id')
              final List<SearchParamToken> resourceId,
          @JsonKey(name: '_lastUpdated')
              final List<SearchParamDate> resourceLastUpdated,
          @JsonKey(name: '_list')
              final List<SearchParamString> resourceList,
          @JsonKey(name: '_profile')
              final List<SearchParamUri> resourceProfile,
          @JsonKey(name: '_query')
              final List<SearchParamToken> resourceQuery,
          @JsonKey(name: '_security')
              final List<SearchParamToken> resourceSecurity,
          @JsonKey(name: '_source')
              final List<SearchParamUri> resourceSource,
          @JsonKey(name: '_tag')
              final List<SearchParamToken> resourceTag,
          @JsonKey(name: '_text')
              final List<SearchParamString> resourceText,
          @JsonKey(name: '_type')
              final List<SearchParamToken> resourceType,
          final List<SearchParamToken> context,
          @JsonKey(name: 'context-quantity')
              final List<SearchParamQuantity> contextQuantity,
          @JsonKey(name: 'context-type')
              final List<SearchParamToken> contextType,
          final List<SearchParamDate> date,
          final List<SearchParamString> description,
          final List<SearchParamToken> jurisdiction,
          final List<SearchParamString> name,
          final List<SearchParamString> publisher,
          final List<SearchParamToken> status,
          final List<SearchParamString> title,
          final List<SearchParamUri> url,
          final List<SearchParamToken> version,
          @JsonKey(name: 'context-type-quantity')
              final List<SearchParamComposite> contextTypeQuantity,
          @JsonKey(name: 'context-type-value')
              final List<SearchParamComposite> contextTypeValue,
          final List<SearchParamToken> identifier,
          final List<SearchParamToken> category,
          final List<SearchParamToken> event,
          final List<SearchParamToken> focus,
          final List<SearchParamReference> parent}) =
      _$_MessageDefinitionSearchParams;
  const _MessageDefinitionSearchParams._() : super._();

  @override

  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent;
  @override

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter;
  @override

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas;
  @override

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId;
  @override

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated;
  @override

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList;
  @override

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile;
  @override

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery;
  @override

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity;
  @override

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource;
  @override

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag;
  @override

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText;
  @override

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType;
  @override

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context;
  @override

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity;
  @override

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType;
  @override

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date;
  @override

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description;
  @override

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  List<SearchParamToken> get jurisdiction;
  @override

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name;
  @override

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher;
  @override

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status;
  @override

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  List<SearchParamString> get title;
  @override

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url;
  @override

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version;
  @override

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity;
  @override

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue;
  @override

  /// [identifier] Multiple Resources:
  /// * [CodeSystem](codesystem.html): External identifier for the code system
  /// * [ConceptMap](conceptmap.html): External identifier for the concept map
  /// * [MessageDefinition](messagedefinition.html): External identifier for the message definition
  /// * [StructureDefinition](structuredefinition.html): External identifier for the structure definition
  /// * [StructureMap](structuremap.html): External identifier for the structure map
  /// * [ValueSet](valueset.html): External identifier for the value set
  List<SearchParamToken> get identifier;
  @override

  /// [category] The behavior associated with the message
  List<SearchParamToken> get category;
  @override

  /// [event] The event that triggers the message or link to the event definition.
  List<SearchParamToken> get event;
  @override

  /// [focus] A resource that is a permitted focus of the message
  List<SearchParamToken> get focus;
  @override

  /// [parent] A resource that is the parent of the definition
  List<SearchParamReference> get parent;
  @override
  @JsonKey(ignore: true)
  _$$_MessageDefinitionSearchParamsCopyWith<_$_MessageDefinitionSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
mixin _$OperationDefinitionSearchParams {
  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent =>
      throw _privateConstructorUsedError;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter =>
      throw _privateConstructorUsedError;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas => throw _privateConstructorUsedError;

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId => throw _privateConstructorUsedError;

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated =>
      throw _privateConstructorUsedError;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList =>
      throw _privateConstructorUsedError;

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile =>
      throw _privateConstructorUsedError;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery =>
      throw _privateConstructorUsedError;

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity =>
      throw _privateConstructorUsedError;

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource => throw _privateConstructorUsedError;

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag => throw _privateConstructorUsedError;

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText =>
      throw _privateConstructorUsedError;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType => throw _privateConstructorUsedError;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context => throw _privateConstructorUsedError;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity =>
      throw _privateConstructorUsedError;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType => throw _privateConstructorUsedError;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date => throw _privateConstructorUsedError;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description => throw _privateConstructorUsedError;

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  List<SearchParamToken> get jurisdiction => throw _privateConstructorUsedError;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name => throw _privateConstructorUsedError;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher => throw _privateConstructorUsedError;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status => throw _privateConstructorUsedError;

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  List<SearchParamString> get title => throw _privateConstructorUsedError;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url => throw _privateConstructorUsedError;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version => throw _privateConstructorUsedError;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity =>
      throw _privateConstructorUsedError;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue =>
      throw _privateConstructorUsedError;

  /// [base] Marks this as a profile of the base
  List<SearchParamReference> get base => throw _privateConstructorUsedError;

  /// [code] Name used to invoke the operation
  List<SearchParamToken> get code => throw _privateConstructorUsedError;

  /// [inputProfile] Validation information for in parameters
  @JsonKey(name: 'input-profile')
  List<SearchParamReference> get inputProfile =>
      throw _privateConstructorUsedError;

  /// [instance] Invoke on an instance?
  List<SearchParamToken> get instance => throw _privateConstructorUsedError;

  /// [kind] operation | query
  List<SearchParamToken> get kind => throw _privateConstructorUsedError;

  /// [outputProfile] Validation information for out parameters
  @JsonKey(name: 'output-profile')
  List<SearchParamReference> get outputProfile =>
      throw _privateConstructorUsedError;

  /// [system] Invoke at the system level?
  List<SearchParamToken> get system => throw _privateConstructorUsedError;

  /// [type] Invoke at the type level?
  List<SearchParamToken> get type => throw _privateConstructorUsedError;

  @JsonKey(ignore: true)
  $OperationDefinitionSearchParamsCopyWith<OperationDefinitionSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $OperationDefinitionSearchParamsCopyWith<$Res> {
  factory $OperationDefinitionSearchParamsCopyWith(
          OperationDefinitionSearchParams value,
          $Res Function(OperationDefinitionSearchParams) then) =
      _$OperationDefinitionSearchParamsCopyWithImpl<$Res,
          OperationDefinitionSearchParams>;
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamToken> jurisdiction,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamString> title,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue,
      List<SearchParamReference> base,
      List<SearchParamToken> code,
      @JsonKey(name: 'input-profile')
          List<SearchParamReference> inputProfile,
      List<SearchParamToken> instance,
      List<SearchParamToken> kind,
      @JsonKey(name: 'output-profile')
          List<SearchParamReference> outputProfile,
      List<SearchParamToken> system,
      List<SearchParamToken> type});
}

/// @nodoc
class _$OperationDefinitionSearchParamsCopyWithImpl<$Res,
        $Val extends OperationDefinitionSearchParams>
    implements $OperationDefinitionSearchParamsCopyWith<$Res> {
  _$OperationDefinitionSearchParamsCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? jurisdiction = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? title = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
    Object? base = null,
    Object? code = null,
    Object? inputProfile = null,
    Object? instance = null,
    Object? kind = null,
    Object? outputProfile = null,
    Object? system = null,
    Object? type = null,
  }) {
    return _then(_value.copyWith(
      resourceContent: null == resourceContent
          ? _value.resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value.resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value.resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value.resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value.resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value.resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value.resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value.resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value.resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value.resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value.resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value.resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value.resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value.context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value.contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value.contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value.date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      jurisdiction: null == jurisdiction
          ? _value.jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value.publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      title: null == title
          ? _value.title
          : title // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      url: null == url
          ? _value.url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value.version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value.contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value.contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      base: null == base
          ? _value.base
          : base // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      code: null == code
          ? _value.code
          : code // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      inputProfile: null == inputProfile
          ? _value.inputProfile
          : inputProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      instance: null == instance
          ? _value.instance
          : instance // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      kind: null == kind
          ? _value.kind
          : kind // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      outputProfile: null == outputProfile
          ? _value.outputProfile
          : outputProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      system: null == system
          ? _value.system
          : system // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      type: null == type
          ? _value.type
          : type // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$_OperationDefinitionSearchParamsCopyWith<$Res>
    implements $OperationDefinitionSearchParamsCopyWith<$Res> {
  factory _$$_OperationDefinitionSearchParamsCopyWith(
          _$_OperationDefinitionSearchParams value,
          $Res Function(_$_OperationDefinitionSearchParams) then) =
      __$$_OperationDefinitionSearchParamsCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamToken> jurisdiction,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamString> title,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue,
      List<SearchParamReference> base,
      List<SearchParamToken> code,
      @JsonKey(name: 'input-profile')
          List<SearchParamReference> inputProfile,
      List<SearchParamToken> instance,
      List<SearchParamToken> kind,
      @JsonKey(name: 'output-profile')
          List<SearchParamReference> outputProfile,
      List<SearchParamToken> system,
      List<SearchParamToken> type});
}

/// @nodoc
class __$$_OperationDefinitionSearchParamsCopyWithImpl<$Res>
    extends _$OperationDefinitionSearchParamsCopyWithImpl<$Res,
        _$_OperationDefinitionSearchParams>
    implements _$$_OperationDefinitionSearchParamsCopyWith<$Res> {
  __$$_OperationDefinitionSearchParamsCopyWithImpl(
      _$_OperationDefinitionSearchParams _value,
      $Res Function(_$_OperationDefinitionSearchParams) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? jurisdiction = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? title = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
    Object? base = null,
    Object? code = null,
    Object? inputProfile = null,
    Object? instance = null,
    Object? kind = null,
    Object? outputProfile = null,
    Object? system = null,
    Object? type = null,
  }) {
    return _then(_$_OperationDefinitionSearchParams(
      resourceContent: null == resourceContent
          ? _value._resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value._resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value._resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value._resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value._resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value._resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value._resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value._resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value._resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value._resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value._resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value._resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value._resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value._context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value._contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value._contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value._date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value._description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      jurisdiction: null == jurisdiction
          ? _value._jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value._name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value._publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value._status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      title: null == title
          ? _value._title
          : title // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      url: null == url
          ? _value._url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value._version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value._contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value._contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      base: null == base
          ? _value._base
          : base // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      code: null == code
          ? _value._code
          : code // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      inputProfile: null == inputProfile
          ? _value._inputProfile
          : inputProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      instance: null == instance
          ? _value._instance
          : instance // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      kind: null == kind
          ? _value._kind
          : kind // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      outputProfile: null == outputProfile
          ? _value._outputProfile
          : outputProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      system: null == system
          ? _value._system
          : system // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      type: null == type
          ? _value._type
          : type // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
    ));
  }
}

/// @nodoc

class _$_OperationDefinitionSearchParams
    extends _OperationDefinitionSearchParams {
  const _$_OperationDefinitionSearchParams(
      {@JsonKey(name: '_content')
          final List<SearchParamString> resourceContent = const [],
      @JsonKey(name: '_filter')
          final List<SearchParamToken> resourceFilter = const [],
      @JsonKey(name: '_has')
          final List<SearchParamString> resourceHas = const [],
      @JsonKey(name: '_id')
          final List<SearchParamToken> resourceId = const [],
      @JsonKey(name: '_lastUpdated')
          final List<SearchParamDate> resourceLastUpdated = const [],
      @JsonKey(name: '_list')
          final List<SearchParamString> resourceList = const [],
      @JsonKey(name: '_profile')
          final List<SearchParamUri> resourceProfile = const [],
      @JsonKey(name: '_query')
          final List<SearchParamToken> resourceQuery = const [],
      @JsonKey(name: '_security')
          final List<SearchParamToken> resourceSecurity = const [],
      @JsonKey(name: '_source')
          final List<SearchParamUri> resourceSource = const [],
      @JsonKey(name: '_tag')
          final List<SearchParamToken> resourceTag = const [],
      @JsonKey(name: '_text')
          final List<SearchParamString> resourceText = const [],
      @JsonKey(name: '_type')
          final List<SearchParamToken> resourceType = const [],
      final List<SearchParamToken> context = const [],
      @JsonKey(name: 'context-quantity')
          final List<SearchParamQuantity> contextQuantity = const [],
      @JsonKey(name: 'context-type')
          final List<SearchParamToken> contextType = const [],
      final List<SearchParamDate> date = const [],
      final List<SearchParamString> description = const [],
      final List<SearchParamToken> jurisdiction = const [],
      final List<SearchParamString> name = const [],
      final List<SearchParamString> publisher = const [],
      final List<SearchParamToken> status = const [],
      final List<SearchParamString> title = const [],
      final List<SearchParamUri> url = const [],
      final List<SearchParamToken> version = const [],
      @JsonKey(name: 'context-type-quantity')
          final List<SearchParamComposite> contextTypeQuantity = const [],
      @JsonKey(name: 'context-type-value')
          final List<SearchParamComposite> contextTypeValue = const [],
      final List<SearchParamReference> base = const [],
      final List<SearchParamToken> code = const [],
      @JsonKey(name: 'input-profile')
          final List<SearchParamReference> inputProfile = const [],
      final List<SearchParamToken> instance = const [],
      final List<SearchParamToken> kind = const [],
      @JsonKey(name: 'output-profile')
          final List<SearchParamReference> outputProfile = const [],
      final List<SearchParamToken> system = const [],
      final List<SearchParamToken> type = const []})
      : _resourceContent = resourceContent,
        _resourceFilter = resourceFilter,
        _resourceHas = resourceHas,
        _resourceId = resourceId,
        _resourceLastUpdated = resourceLastUpdated,
        _resourceList = resourceList,
        _resourceProfile = resourceProfile,
        _resourceQuery = resourceQuery,
        _resourceSecurity = resourceSecurity,
        _resourceSource = resourceSource,
        _resourceTag = resourceTag,
        _resourceText = resourceText,
        _resourceType = resourceType,
        _context = context,
        _contextQuantity = contextQuantity,
        _contextType = contextType,
        _date = date,
        _description = description,
        _jurisdiction = jurisdiction,
        _name = name,
        _publisher = publisher,
        _status = status,
        _title = title,
        _url = url,
        _version = version,
        _contextTypeQuantity = contextTypeQuantity,
        _contextTypeValue = contextTypeValue,
        _base = base,
        _code = code,
        _inputProfile = inputProfile,
        _instance = instance,
        _kind = kind,
        _outputProfile = outputProfile,
        _system = system,
        _type = type,
        super._();

  /// [resourceContent] Search on the entire content of the resource
  final List<SearchParamString> _resourceContent;

  /// [resourceContent] Search on the entire content of the resource
  @override
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent {
    if (_resourceContent is EqualUnmodifiableListView) return _resourceContent;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceContent);
  }

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  final List<SearchParamToken> _resourceFilter;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @override
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter {
    if (_resourceFilter is EqualUnmodifiableListView) return _resourceFilter;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceFilter);
  }

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  final List<SearchParamString> _resourceHas;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @override
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas {
    if (_resourceHas is EqualUnmodifiableListView) return _resourceHas;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceHas);
  }

  /// [resourceId] Logical id of this artifact
  final List<SearchParamToken> _resourceId;

  /// [resourceId] Logical id of this artifact
  @override
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId {
    if (_resourceId is EqualUnmodifiableListView) return _resourceId;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceId);
  }

  /// [resourceLastUpdated] When the resource version last changed
  final List<SearchParamDate> _resourceLastUpdated;

  /// [resourceLastUpdated] When the resource version last changed
  @override
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated {
    if (_resourceLastUpdated is EqualUnmodifiableListView)
      return _resourceLastUpdated;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceLastUpdated);
  }

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  final List<SearchParamString> _resourceList;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @override
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList {
    if (_resourceList is EqualUnmodifiableListView) return _resourceList;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceList);
  }

  /// [resourceProfile] Profiles this resource claims to conform to
  final List<SearchParamUri> _resourceProfile;

  /// [resourceProfile] Profiles this resource claims to conform to
  @override
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile {
    if (_resourceProfile is EqualUnmodifiableListView) return _resourceProfile;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceProfile);
  }

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  final List<SearchParamToken> _resourceQuery;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @override
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery {
    if (_resourceQuery is EqualUnmodifiableListView) return _resourceQuery;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceQuery);
  }

  /// [resourceSecurity] Security Labels applied to this resource
  final List<SearchParamToken> _resourceSecurity;

  /// [resourceSecurity] Security Labels applied to this resource
  @override
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity {
    if (_resourceSecurity is EqualUnmodifiableListView)
      return _resourceSecurity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSecurity);
  }

  /// [resourceSource] Identifies where the resource comes from
  final List<SearchParamUri> _resourceSource;

  /// [resourceSource] Identifies where the resource comes from
  @override
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource {
    if (_resourceSource is EqualUnmodifiableListView) return _resourceSource;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSource);
  }

  /// [resourceTag] Tags applied to this resource
  final List<SearchParamToken> _resourceTag;

  /// [resourceTag] Tags applied to this resource
  @override
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag {
    if (_resourceTag is EqualUnmodifiableListView) return _resourceTag;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceTag);
  }

  /// [resourceText] Search on the narrative text (html) of the resource
  final List<SearchParamString> _resourceText;

  /// [resourceText] Search on the narrative text (html) of the resource
  @override
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText {
    if (_resourceText is EqualUnmodifiableListView) return _resourceText;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceText);
  }

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  final List<SearchParamToken> _resourceType;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @override
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType {
    if (_resourceType is EqualUnmodifiableListView) return _resourceType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceType);
  }

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  final List<SearchParamToken> _context;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  @override
  @JsonKey()
  List<SearchParamToken> get context {
    if (_context is EqualUnmodifiableListView) return _context;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_context);
  }

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  final List<SearchParamQuantity> _contextQuantity;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @override
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity {
    if (_contextQuantity is EqualUnmodifiableListView) return _contextQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextQuantity);
  }

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  final List<SearchParamToken> _contextType;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @override
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType {
    if (_contextType is EqualUnmodifiableListView) return _contextType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextType);
  }

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  final List<SearchParamDate> _date;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  @override
  @JsonKey()
  List<SearchParamDate> get date {
    if (_date is EqualUnmodifiableListView) return _date;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_date);
  }

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  final List<SearchParamString> _description;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  @override
  @JsonKey()
  List<SearchParamString> get description {
    if (_description is EqualUnmodifiableListView) return _description;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_description);
  }

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  final List<SearchParamToken> _jurisdiction;

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  @override
  @JsonKey()
  List<SearchParamToken> get jurisdiction {
    if (_jurisdiction is EqualUnmodifiableListView) return _jurisdiction;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_jurisdiction);
  }

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  final List<SearchParamString> _name;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  @override
  @JsonKey()
  List<SearchParamString> get name {
    if (_name is EqualUnmodifiableListView) return _name;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_name);
  }

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  final List<SearchParamString> _publisher;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  @override
  @JsonKey()
  List<SearchParamString> get publisher {
    if (_publisher is EqualUnmodifiableListView) return _publisher;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_publisher);
  }

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  final List<SearchParamToken> _status;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get status {
    if (_status is EqualUnmodifiableListView) return _status;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_status);
  }

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  final List<SearchParamString> _title;

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  @override
  @JsonKey()
  List<SearchParamString> get title {
    if (_title is EqualUnmodifiableListView) return _title;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_title);
  }

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  final List<SearchParamUri> _url;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  @override
  @JsonKey()
  List<SearchParamUri> get url {
    if (_url is EqualUnmodifiableListView) return _url;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_url);
  }

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  final List<SearchParamToken> _version;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get version {
    if (_version is EqualUnmodifiableListView) return _version;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_version);
  }

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  final List<SearchParamComposite> _contextTypeQuantity;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @override
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity {
    if (_contextTypeQuantity is EqualUnmodifiableListView)
      return _contextTypeQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeQuantity);
  }

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  final List<SearchParamComposite> _contextTypeValue;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @override
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue {
    if (_contextTypeValue is EqualUnmodifiableListView)
      return _contextTypeValue;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeValue);
  }

  /// [base] Marks this as a profile of the base
  final List<SearchParamReference> _base;

  /// [base] Marks this as a profile of the base
  @override
  @JsonKey()
  List<SearchParamReference> get base {
    if (_base is EqualUnmodifiableListView) return _base;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_base);
  }

  /// [code] Name used to invoke the operation
  final List<SearchParamToken> _code;

  /// [code] Name used to invoke the operation
  @override
  @JsonKey()
  List<SearchParamToken> get code {
    if (_code is EqualUnmodifiableListView) return _code;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_code);
  }

  /// [inputProfile] Validation information for in parameters
  final List<SearchParamReference> _inputProfile;

  /// [inputProfile] Validation information for in parameters
  @override
  @JsonKey(name: 'input-profile')
  List<SearchParamReference> get inputProfile {
    if (_inputProfile is EqualUnmodifiableListView) return _inputProfile;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_inputProfile);
  }

  /// [instance] Invoke on an instance?
  final List<SearchParamToken> _instance;

  /// [instance] Invoke on an instance?
  @override
  @JsonKey()
  List<SearchParamToken> get instance {
    if (_instance is EqualUnmodifiableListView) return _instance;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_instance);
  }

  /// [kind] operation | query
  final List<SearchParamToken> _kind;

  /// [kind] operation | query
  @override
  @JsonKey()
  List<SearchParamToken> get kind {
    if (_kind is EqualUnmodifiableListView) return _kind;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_kind);
  }

  /// [outputProfile] Validation information for out parameters
  final List<SearchParamReference> _outputProfile;

  /// [outputProfile] Validation information for out parameters
  @override
  @JsonKey(name: 'output-profile')
  List<SearchParamReference> get outputProfile {
    if (_outputProfile is EqualUnmodifiableListView) return _outputProfile;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_outputProfile);
  }

  /// [system] Invoke at the system level?
  final List<SearchParamToken> _system;

  /// [system] Invoke at the system level?
  @override
  @JsonKey()
  List<SearchParamToken> get system {
    if (_system is EqualUnmodifiableListView) return _system;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_system);
  }

  /// [type] Invoke at the type level?
  final List<SearchParamToken> _type;

  /// [type] Invoke at the type level?
  @override
  @JsonKey()
  List<SearchParamToken> get type {
    if (_type is EqualUnmodifiableListView) return _type;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_type);
  }

  @override
  String toString() {
    return 'OperationDefinitionSearchParams(resourceContent: $resourceContent, resourceFilter: $resourceFilter, resourceHas: $resourceHas, resourceId: $resourceId, resourceLastUpdated: $resourceLastUpdated, resourceList: $resourceList, resourceProfile: $resourceProfile, resourceQuery: $resourceQuery, resourceSecurity: $resourceSecurity, resourceSource: $resourceSource, resourceTag: $resourceTag, resourceText: $resourceText, resourceType: $resourceType, context: $context, contextQuantity: $contextQuantity, contextType: $contextType, date: $date, description: $description, jurisdiction: $jurisdiction, name: $name, publisher: $publisher, status: $status, title: $title, url: $url, version: $version, contextTypeQuantity: $contextTypeQuantity, contextTypeValue: $contextTypeValue, base: $base, code: $code, inputProfile: $inputProfile, instance: $instance, kind: $kind, outputProfile: $outputProfile, system: $system, type: $type)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_OperationDefinitionSearchParams &&
            const DeepCollectionEquality()
                .equals(other._resourceContent, _resourceContent) &&
            const DeepCollectionEquality()
                .equals(other._resourceFilter, _resourceFilter) &&
            const DeepCollectionEquality()
                .equals(other._resourceHas, _resourceHas) &&
            const DeepCollectionEquality()
                .equals(other._resourceId, _resourceId) &&
            const DeepCollectionEquality()
                .equals(other._resourceLastUpdated, _resourceLastUpdated) &&
            const DeepCollectionEquality()
                .equals(other._resourceList, _resourceList) &&
            const DeepCollectionEquality()
                .equals(other._resourceProfile, _resourceProfile) &&
            const DeepCollectionEquality()
                .equals(other._resourceQuery, _resourceQuery) &&
            const DeepCollectionEquality()
                .equals(other._resourceSecurity, _resourceSecurity) &&
            const DeepCollectionEquality()
                .equals(other._resourceSource, _resourceSource) &&
            const DeepCollectionEquality()
                .equals(other._resourceTag, _resourceTag) &&
            const DeepCollectionEquality()
                .equals(other._resourceText, _resourceText) &&
            const DeepCollectionEquality()
                .equals(other._resourceType, _resourceType) &&
            const DeepCollectionEquality().equals(other._context, _context) &&
            const DeepCollectionEquality()
                .equals(other._contextQuantity, _contextQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextType, _contextType) &&
            const DeepCollectionEquality().equals(other._date, _date) &&
            const DeepCollectionEquality()
                .equals(other._description, _description) &&
            const DeepCollectionEquality()
                .equals(other._jurisdiction, _jurisdiction) &&
            const DeepCollectionEquality().equals(other._name, _name) &&
            const DeepCollectionEquality()
                .equals(other._publisher, _publisher) &&
            const DeepCollectionEquality().equals(other._status, _status) &&
            const DeepCollectionEquality().equals(other._title, _title) &&
            const DeepCollectionEquality().equals(other._url, _url) &&
            const DeepCollectionEquality().equals(other._version, _version) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeQuantity, _contextTypeQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeValue, _contextTypeValue) &&
            const DeepCollectionEquality().equals(other._base, _base) &&
            const DeepCollectionEquality().equals(other._code, _code) &&
            const DeepCollectionEquality()
                .equals(other._inputProfile, _inputProfile) &&
            const DeepCollectionEquality().equals(other._instance, _instance) &&
            const DeepCollectionEquality().equals(other._kind, _kind) &&
            const DeepCollectionEquality()
                .equals(other._outputProfile, _outputProfile) &&
            const DeepCollectionEquality().equals(other._system, _system) &&
            const DeepCollectionEquality().equals(other._type, _type));
  }

  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        const DeepCollectionEquality().hash(_resourceContent),
        const DeepCollectionEquality().hash(_resourceFilter),
        const DeepCollectionEquality().hash(_resourceHas),
        const DeepCollectionEquality().hash(_resourceId),
        const DeepCollectionEquality().hash(_resourceLastUpdated),
        const DeepCollectionEquality().hash(_resourceList),
        const DeepCollectionEquality().hash(_resourceProfile),
        const DeepCollectionEquality().hash(_resourceQuery),
        const DeepCollectionEquality().hash(_resourceSecurity),
        const DeepCollectionEquality().hash(_resourceSource),
        const DeepCollectionEquality().hash(_resourceTag),
        const DeepCollectionEquality().hash(_resourceText),
        const DeepCollectionEquality().hash(_resourceType),
        const DeepCollectionEquality().hash(_context),
        const DeepCollectionEquality().hash(_contextQuantity),
        const DeepCollectionEquality().hash(_contextType),
        const DeepCollectionEquality().hash(_date),
        const DeepCollectionEquality().hash(_description),
        const DeepCollectionEquality().hash(_jurisdiction),
        const DeepCollectionEquality().hash(_name),
        const DeepCollectionEquality().hash(_publisher),
        const DeepCollectionEquality().hash(_status),
        const DeepCollectionEquality().hash(_title),
        const DeepCollectionEquality().hash(_url),
        const DeepCollectionEquality().hash(_version),
        const DeepCollectionEquality().hash(_contextTypeQuantity),
        const DeepCollectionEquality().hash(_contextTypeValue),
        const DeepCollectionEquality().hash(_base),
        const DeepCollectionEquality().hash(_code),
        const DeepCollectionEquality().hash(_inputProfile),
        const DeepCollectionEquality().hash(_instance),
        const DeepCollectionEquality().hash(_kind),
        const DeepCollectionEquality().hash(_outputProfile),
        const DeepCollectionEquality().hash(_system),
        const DeepCollectionEquality().hash(_type)
      ]);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_OperationDefinitionSearchParamsCopyWith<
          _$_OperationDefinitionSearchParams>
      get copyWith => __$$_OperationDefinitionSearchParamsCopyWithImpl<
          _$_OperationDefinitionSearchParams>(this, _$identity);
}

abstract class _OperationDefinitionSearchParams
    extends OperationDefinitionSearchParams {
  const factory _OperationDefinitionSearchParams(
      {@JsonKey(name: '_content')
          final List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          final List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          final List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          final List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          final List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          final List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          final List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          final List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          final List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          final List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          final List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          final List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          final List<SearchParamToken> resourceType,
      final List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          final List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          final List<SearchParamToken> contextType,
      final List<SearchParamDate> date,
      final List<SearchParamString> description,
      final List<SearchParamToken> jurisdiction,
      final List<SearchParamString> name,
      final List<SearchParamString> publisher,
      final List<SearchParamToken> status,
      final List<SearchParamString> title,
      final List<SearchParamUri> url,
      final List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          final List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          final List<SearchParamComposite> contextTypeValue,
      final List<SearchParamReference> base,
      final List<SearchParamToken> code,
      @JsonKey(name: 'input-profile')
          final List<SearchParamReference> inputProfile,
      final List<SearchParamToken> instance,
      final List<SearchParamToken> kind,
      @JsonKey(name: 'output-profile')
          final List<SearchParamReference> outputProfile,
      final List<SearchParamToken> system,
      final List<SearchParamToken> type}) = _$_OperationDefinitionSearchParams;
  const _OperationDefinitionSearchParams._() : super._();

  @override

  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent;
  @override

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter;
  @override

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas;
  @override

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId;
  @override

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated;
  @override

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList;
  @override

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile;
  @override

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery;
  @override

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity;
  @override

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource;
  @override

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag;
  @override

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText;
  @override

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType;
  @override

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context;
  @override

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity;
  @override

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType;
  @override

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date;
  @override

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description;
  @override

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  List<SearchParamToken> get jurisdiction;
  @override

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name;
  @override

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher;
  @override

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status;
  @override

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  List<SearchParamString> get title;
  @override

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url;
  @override

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version;
  @override

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity;
  @override

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue;
  @override

  /// [base] Marks this as a profile of the base
  List<SearchParamReference> get base;
  @override

  /// [code] Name used to invoke the operation
  List<SearchParamToken> get code;
  @override

  /// [inputProfile] Validation information for in parameters
  @JsonKey(name: 'input-profile')
  List<SearchParamReference> get inputProfile;
  @override

  /// [instance] Invoke on an instance?
  List<SearchParamToken> get instance;
  @override

  /// [kind] operation | query
  List<SearchParamToken> get kind;
  @override

  /// [outputProfile] Validation information for out parameters
  @JsonKey(name: 'output-profile')
  List<SearchParamReference> get outputProfile;
  @override

  /// [system] Invoke at the system level?
  List<SearchParamToken> get system;
  @override

  /// [type] Invoke at the type level?
  List<SearchParamToken> get type;
  @override
  @JsonKey(ignore: true)
  _$$_OperationDefinitionSearchParamsCopyWith<
          _$_OperationDefinitionSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
mixin _$SearchParameterSearchParams {
  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent =>
      throw _privateConstructorUsedError;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter =>
      throw _privateConstructorUsedError;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas => throw _privateConstructorUsedError;

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId => throw _privateConstructorUsedError;

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated =>
      throw _privateConstructorUsedError;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList =>
      throw _privateConstructorUsedError;

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile =>
      throw _privateConstructorUsedError;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery =>
      throw _privateConstructorUsedError;

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity =>
      throw _privateConstructorUsedError;

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource => throw _privateConstructorUsedError;

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag => throw _privateConstructorUsedError;

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText =>
      throw _privateConstructorUsedError;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType => throw _privateConstructorUsedError;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context => throw _privateConstructorUsedError;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity =>
      throw _privateConstructorUsedError;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType => throw _privateConstructorUsedError;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date => throw _privateConstructorUsedError;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description => throw _privateConstructorUsedError;

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  List<SearchParamToken> get jurisdiction => throw _privateConstructorUsedError;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name => throw _privateConstructorUsedError;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher => throw _privateConstructorUsedError;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status => throw _privateConstructorUsedError;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url => throw _privateConstructorUsedError;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version => throw _privateConstructorUsedError;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity =>
      throw _privateConstructorUsedError;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue =>
      throw _privateConstructorUsedError;

  /// [base] The resource type(s) this search parameter applies to
  List<SearchParamToken> get base => throw _privateConstructorUsedError;

  /// [code] Code used in URL
  List<SearchParamToken> get code => throw _privateConstructorUsedError;

  /// [component] Defines how the part works
  List<SearchParamReference> get component =>
      throw _privateConstructorUsedError;

  /// [derivedFrom] Original definition for the search parameter
  @JsonKey(name: 'derived-from')
  List<SearchParamReference> get derivedFrom =>
      throw _privateConstructorUsedError;

  /// [target] Types of resource (if a resource reference)
  List<SearchParamToken> get target => throw _privateConstructorUsedError;

  /// [type] number | date | string | token | reference | composite | quantity | uri | special
  List<SearchParamToken> get type => throw _privateConstructorUsedError;

  @JsonKey(ignore: true)
  $SearchParameterSearchParamsCopyWith<SearchParameterSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $SearchParameterSearchParamsCopyWith<$Res> {
  factory $SearchParameterSearchParamsCopyWith(
          SearchParameterSearchParams value,
          $Res Function(SearchParameterSearchParams) then) =
      _$SearchParameterSearchParamsCopyWithImpl<$Res,
          SearchParameterSearchParams>;
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamToken> jurisdiction,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue,
      List<SearchParamToken> base,
      List<SearchParamToken> code,
      List<SearchParamReference> component,
      @JsonKey(name: 'derived-from')
          List<SearchParamReference> derivedFrom,
      List<SearchParamToken> target,
      List<SearchParamToken> type});
}

/// @nodoc
class _$SearchParameterSearchParamsCopyWithImpl<$Res,
        $Val extends SearchParameterSearchParams>
    implements $SearchParameterSearchParamsCopyWith<$Res> {
  _$SearchParameterSearchParamsCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? jurisdiction = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
    Object? base = null,
    Object? code = null,
    Object? component = null,
    Object? derivedFrom = null,
    Object? target = null,
    Object? type = null,
  }) {
    return _then(_value.copyWith(
      resourceContent: null == resourceContent
          ? _value.resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value.resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value.resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value.resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value.resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value.resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value.resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value.resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value.resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value.resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value.resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value.resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value.resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value.context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value.contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value.contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value.date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      jurisdiction: null == jurisdiction
          ? _value.jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value.publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      url: null == url
          ? _value.url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value.version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value.contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value.contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      base: null == base
          ? _value.base
          : base // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      code: null == code
          ? _value.code
          : code // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      component: null == component
          ? _value.component
          : component // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      derivedFrom: null == derivedFrom
          ? _value.derivedFrom
          : derivedFrom // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      target: null == target
          ? _value.target
          : target // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      type: null == type
          ? _value.type
          : type // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$_SearchParameterSearchParamsCopyWith<$Res>
    implements $SearchParameterSearchParamsCopyWith<$Res> {
  factory _$$_SearchParameterSearchParamsCopyWith(
          _$_SearchParameterSearchParams value,
          $Res Function(_$_SearchParameterSearchParams) then) =
      __$$_SearchParameterSearchParamsCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamToken> jurisdiction,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue,
      List<SearchParamToken> base,
      List<SearchParamToken> code,
      List<SearchParamReference> component,
      @JsonKey(name: 'derived-from')
          List<SearchParamReference> derivedFrom,
      List<SearchParamToken> target,
      List<SearchParamToken> type});
}

/// @nodoc
class __$$_SearchParameterSearchParamsCopyWithImpl<$Res>
    extends _$SearchParameterSearchParamsCopyWithImpl<$Res,
        _$_SearchParameterSearchParams>
    implements _$$_SearchParameterSearchParamsCopyWith<$Res> {
  __$$_SearchParameterSearchParamsCopyWithImpl(
      _$_SearchParameterSearchParams _value,
      $Res Function(_$_SearchParameterSearchParams) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? jurisdiction = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
    Object? base = null,
    Object? code = null,
    Object? component = null,
    Object? derivedFrom = null,
    Object? target = null,
    Object? type = null,
  }) {
    return _then(_$_SearchParameterSearchParams(
      resourceContent: null == resourceContent
          ? _value._resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value._resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value._resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value._resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value._resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value._resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value._resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value._resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value._resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value._resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value._resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value._resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value._resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value._context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value._contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value._contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value._date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value._description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      jurisdiction: null == jurisdiction
          ? _value._jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value._name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value._publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value._status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      url: null == url
          ? _value._url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value._version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value._contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value._contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      base: null == base
          ? _value._base
          : base // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      code: null == code
          ? _value._code
          : code // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      component: null == component
          ? _value._component
          : component // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      derivedFrom: null == derivedFrom
          ? _value._derivedFrom
          : derivedFrom // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      target: null == target
          ? _value._target
          : target // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      type: null == type
          ? _value._type
          : type // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
    ));
  }
}

/// @nodoc

class _$_SearchParameterSearchParams extends _SearchParameterSearchParams {
  const _$_SearchParameterSearchParams(
      {@JsonKey(name: '_content')
          final List<SearchParamString> resourceContent = const [],
      @JsonKey(name: '_filter')
          final List<SearchParamToken> resourceFilter = const [],
      @JsonKey(name: '_has')
          final List<SearchParamString> resourceHas = const [],
      @JsonKey(name: '_id')
          final List<SearchParamToken> resourceId = const [],
      @JsonKey(name: '_lastUpdated')
          final List<SearchParamDate> resourceLastUpdated = const [],
      @JsonKey(name: '_list')
          final List<SearchParamString> resourceList = const [],
      @JsonKey(name: '_profile')
          final List<SearchParamUri> resourceProfile = const [],
      @JsonKey(name: '_query')
          final List<SearchParamToken> resourceQuery = const [],
      @JsonKey(name: '_security')
          final List<SearchParamToken> resourceSecurity = const [],
      @JsonKey(name: '_source')
          final List<SearchParamUri> resourceSource = const [],
      @JsonKey(name: '_tag')
          final List<SearchParamToken> resourceTag = const [],
      @JsonKey(name: '_text')
          final List<SearchParamString> resourceText = const [],
      @JsonKey(name: '_type')
          final List<SearchParamToken> resourceType = const [],
      final List<SearchParamToken> context = const [],
      @JsonKey(name: 'context-quantity')
          final List<SearchParamQuantity> contextQuantity = const [],
      @JsonKey(name: 'context-type')
          final List<SearchParamToken> contextType = const [],
      final List<SearchParamDate> date = const [],
      final List<SearchParamString> description = const [],
      final List<SearchParamToken> jurisdiction = const [],
      final List<SearchParamString> name = const [],
      final List<SearchParamString> publisher = const [],
      final List<SearchParamToken> status = const [],
      final List<SearchParamUri> url = const [],
      final List<SearchParamToken> version = const [],
      @JsonKey(name: 'context-type-quantity')
          final List<SearchParamComposite> contextTypeQuantity = const [],
      @JsonKey(name: 'context-type-value')
          final List<SearchParamComposite> contextTypeValue = const [],
      final List<SearchParamToken> base = const [],
      final List<SearchParamToken> code = const [],
      final List<SearchParamReference> component = const [],
      @JsonKey(name: 'derived-from')
          final List<SearchParamReference> derivedFrom = const [],
      final List<SearchParamToken> target = const [],
      final List<SearchParamToken> type = const []})
      : _resourceContent = resourceContent,
        _resourceFilter = resourceFilter,
        _resourceHas = resourceHas,
        _resourceId = resourceId,
        _resourceLastUpdated = resourceLastUpdated,
        _resourceList = resourceList,
        _resourceProfile = resourceProfile,
        _resourceQuery = resourceQuery,
        _resourceSecurity = resourceSecurity,
        _resourceSource = resourceSource,
        _resourceTag = resourceTag,
        _resourceText = resourceText,
        _resourceType = resourceType,
        _context = context,
        _contextQuantity = contextQuantity,
        _contextType = contextType,
        _date = date,
        _description = description,
        _jurisdiction = jurisdiction,
        _name = name,
        _publisher = publisher,
        _status = status,
        _url = url,
        _version = version,
        _contextTypeQuantity = contextTypeQuantity,
        _contextTypeValue = contextTypeValue,
        _base = base,
        _code = code,
        _component = component,
        _derivedFrom = derivedFrom,
        _target = target,
        _type = type,
        super._();

  /// [resourceContent] Search on the entire content of the resource
  final List<SearchParamString> _resourceContent;

  /// [resourceContent] Search on the entire content of the resource
  @override
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent {
    if (_resourceContent is EqualUnmodifiableListView) return _resourceContent;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceContent);
  }

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  final List<SearchParamToken> _resourceFilter;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @override
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter {
    if (_resourceFilter is EqualUnmodifiableListView) return _resourceFilter;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceFilter);
  }

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  final List<SearchParamString> _resourceHas;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @override
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas {
    if (_resourceHas is EqualUnmodifiableListView) return _resourceHas;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceHas);
  }

  /// [resourceId] Logical id of this artifact
  final List<SearchParamToken> _resourceId;

  /// [resourceId] Logical id of this artifact
  @override
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId {
    if (_resourceId is EqualUnmodifiableListView) return _resourceId;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceId);
  }

  /// [resourceLastUpdated] When the resource version last changed
  final List<SearchParamDate> _resourceLastUpdated;

  /// [resourceLastUpdated] When the resource version last changed
  @override
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated {
    if (_resourceLastUpdated is EqualUnmodifiableListView)
      return _resourceLastUpdated;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceLastUpdated);
  }

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  final List<SearchParamString> _resourceList;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @override
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList {
    if (_resourceList is EqualUnmodifiableListView) return _resourceList;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceList);
  }

  /// [resourceProfile] Profiles this resource claims to conform to
  final List<SearchParamUri> _resourceProfile;

  /// [resourceProfile] Profiles this resource claims to conform to
  @override
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile {
    if (_resourceProfile is EqualUnmodifiableListView) return _resourceProfile;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceProfile);
  }

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  final List<SearchParamToken> _resourceQuery;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @override
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery {
    if (_resourceQuery is EqualUnmodifiableListView) return _resourceQuery;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceQuery);
  }

  /// [resourceSecurity] Security Labels applied to this resource
  final List<SearchParamToken> _resourceSecurity;

  /// [resourceSecurity] Security Labels applied to this resource
  @override
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity {
    if (_resourceSecurity is EqualUnmodifiableListView)
      return _resourceSecurity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSecurity);
  }

  /// [resourceSource] Identifies where the resource comes from
  final List<SearchParamUri> _resourceSource;

  /// [resourceSource] Identifies where the resource comes from
  @override
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource {
    if (_resourceSource is EqualUnmodifiableListView) return _resourceSource;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSource);
  }

  /// [resourceTag] Tags applied to this resource
  final List<SearchParamToken> _resourceTag;

  /// [resourceTag] Tags applied to this resource
  @override
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag {
    if (_resourceTag is EqualUnmodifiableListView) return _resourceTag;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceTag);
  }

  /// [resourceText] Search on the narrative text (html) of the resource
  final List<SearchParamString> _resourceText;

  /// [resourceText] Search on the narrative text (html) of the resource
  @override
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText {
    if (_resourceText is EqualUnmodifiableListView) return _resourceText;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceText);
  }

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  final List<SearchParamToken> _resourceType;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @override
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType {
    if (_resourceType is EqualUnmodifiableListView) return _resourceType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceType);
  }

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  final List<SearchParamToken> _context;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  @override
  @JsonKey()
  List<SearchParamToken> get context {
    if (_context is EqualUnmodifiableListView) return _context;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_context);
  }

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  final List<SearchParamQuantity> _contextQuantity;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @override
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity {
    if (_contextQuantity is EqualUnmodifiableListView) return _contextQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextQuantity);
  }

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  final List<SearchParamToken> _contextType;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @override
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType {
    if (_contextType is EqualUnmodifiableListView) return _contextType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextType);
  }

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  final List<SearchParamDate> _date;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  @override
  @JsonKey()
  List<SearchParamDate> get date {
    if (_date is EqualUnmodifiableListView) return _date;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_date);
  }

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  final List<SearchParamString> _description;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  @override
  @JsonKey()
  List<SearchParamString> get description {
    if (_description is EqualUnmodifiableListView) return _description;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_description);
  }

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  final List<SearchParamToken> _jurisdiction;

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  @override
  @JsonKey()
  List<SearchParamToken> get jurisdiction {
    if (_jurisdiction is EqualUnmodifiableListView) return _jurisdiction;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_jurisdiction);
  }

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  final List<SearchParamString> _name;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  @override
  @JsonKey()
  List<SearchParamString> get name {
    if (_name is EqualUnmodifiableListView) return _name;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_name);
  }

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  final List<SearchParamString> _publisher;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  @override
  @JsonKey()
  List<SearchParamString> get publisher {
    if (_publisher is EqualUnmodifiableListView) return _publisher;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_publisher);
  }

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  final List<SearchParamToken> _status;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get status {
    if (_status is EqualUnmodifiableListView) return _status;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_status);
  }

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  final List<SearchParamUri> _url;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  @override
  @JsonKey()
  List<SearchParamUri> get url {
    if (_url is EqualUnmodifiableListView) return _url;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_url);
  }

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  final List<SearchParamToken> _version;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get version {
    if (_version is EqualUnmodifiableListView) return _version;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_version);
  }

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  final List<SearchParamComposite> _contextTypeQuantity;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @override
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity {
    if (_contextTypeQuantity is EqualUnmodifiableListView)
      return _contextTypeQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeQuantity);
  }

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  final List<SearchParamComposite> _contextTypeValue;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @override
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue {
    if (_contextTypeValue is EqualUnmodifiableListView)
      return _contextTypeValue;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeValue);
  }

  /// [base] The resource type(s) this search parameter applies to
  final List<SearchParamToken> _base;

  /// [base] The resource type(s) this search parameter applies to
  @override
  @JsonKey()
  List<SearchParamToken> get base {
    if (_base is EqualUnmodifiableListView) return _base;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_base);
  }

  /// [code] Code used in URL
  final List<SearchParamToken> _code;

  /// [code] Code used in URL
  @override
  @JsonKey()
  List<SearchParamToken> get code {
    if (_code is EqualUnmodifiableListView) return _code;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_code);
  }

  /// [component] Defines how the part works
  final List<SearchParamReference> _component;

  /// [component] Defines how the part works
  @override
  @JsonKey()
  List<SearchParamReference> get component {
    if (_component is EqualUnmodifiableListView) return _component;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_component);
  }

  /// [derivedFrom] Original definition for the search parameter
  final List<SearchParamReference> _derivedFrom;

  /// [derivedFrom] Original definition for the search parameter
  @override
  @JsonKey(name: 'derived-from')
  List<SearchParamReference> get derivedFrom {
    if (_derivedFrom is EqualUnmodifiableListView) return _derivedFrom;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_derivedFrom);
  }

  /// [target] Types of resource (if a resource reference)
  final List<SearchParamToken> _target;

  /// [target] Types of resource (if a resource reference)
  @override
  @JsonKey()
  List<SearchParamToken> get target {
    if (_target is EqualUnmodifiableListView) return _target;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_target);
  }

  /// [type] number | date | string | token | reference | composite | quantity | uri | special
  final List<SearchParamToken> _type;

  /// [type] number | date | string | token | reference | composite | quantity | uri | special
  @override
  @JsonKey()
  List<SearchParamToken> get type {
    if (_type is EqualUnmodifiableListView) return _type;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_type);
  }

  @override
  String toString() {
    return 'SearchParameterSearchParams(resourceContent: $resourceContent, resourceFilter: $resourceFilter, resourceHas: $resourceHas, resourceId: $resourceId, resourceLastUpdated: $resourceLastUpdated, resourceList: $resourceList, resourceProfile: $resourceProfile, resourceQuery: $resourceQuery, resourceSecurity: $resourceSecurity, resourceSource: $resourceSource, resourceTag: $resourceTag, resourceText: $resourceText, resourceType: $resourceType, context: $context, contextQuantity: $contextQuantity, contextType: $contextType, date: $date, description: $description, jurisdiction: $jurisdiction, name: $name, publisher: $publisher, status: $status, url: $url, version: $version, contextTypeQuantity: $contextTypeQuantity, contextTypeValue: $contextTypeValue, base: $base, code: $code, component: $component, derivedFrom: $derivedFrom, target: $target, type: $type)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_SearchParameterSearchParams &&
            const DeepCollectionEquality()
                .equals(other._resourceContent, _resourceContent) &&
            const DeepCollectionEquality()
                .equals(other._resourceFilter, _resourceFilter) &&
            const DeepCollectionEquality()
                .equals(other._resourceHas, _resourceHas) &&
            const DeepCollectionEquality()
                .equals(other._resourceId, _resourceId) &&
            const DeepCollectionEquality()
                .equals(other._resourceLastUpdated, _resourceLastUpdated) &&
            const DeepCollectionEquality()
                .equals(other._resourceList, _resourceList) &&
            const DeepCollectionEquality()
                .equals(other._resourceProfile, _resourceProfile) &&
            const DeepCollectionEquality()
                .equals(other._resourceQuery, _resourceQuery) &&
            const DeepCollectionEquality()
                .equals(other._resourceSecurity, _resourceSecurity) &&
            const DeepCollectionEquality()
                .equals(other._resourceSource, _resourceSource) &&
            const DeepCollectionEquality()
                .equals(other._resourceTag, _resourceTag) &&
            const DeepCollectionEquality()
                .equals(other._resourceText, _resourceText) &&
            const DeepCollectionEquality()
                .equals(other._resourceType, _resourceType) &&
            const DeepCollectionEquality().equals(other._context, _context) &&
            const DeepCollectionEquality()
                .equals(other._contextQuantity, _contextQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextType, _contextType) &&
            const DeepCollectionEquality().equals(other._date, _date) &&
            const DeepCollectionEquality()
                .equals(other._description, _description) &&
            const DeepCollectionEquality()
                .equals(other._jurisdiction, _jurisdiction) &&
            const DeepCollectionEquality().equals(other._name, _name) &&
            const DeepCollectionEquality()
                .equals(other._publisher, _publisher) &&
            const DeepCollectionEquality().equals(other._status, _status) &&
            const DeepCollectionEquality().equals(other._url, _url) &&
            const DeepCollectionEquality().equals(other._version, _version) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeQuantity, _contextTypeQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeValue, _contextTypeValue) &&
            const DeepCollectionEquality().equals(other._base, _base) &&
            const DeepCollectionEquality().equals(other._code, _code) &&
            const DeepCollectionEquality()
                .equals(other._component, _component) &&
            const DeepCollectionEquality()
                .equals(other._derivedFrom, _derivedFrom) &&
            const DeepCollectionEquality().equals(other._target, _target) &&
            const DeepCollectionEquality().equals(other._type, _type));
  }

  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        const DeepCollectionEquality().hash(_resourceContent),
        const DeepCollectionEquality().hash(_resourceFilter),
        const DeepCollectionEquality().hash(_resourceHas),
        const DeepCollectionEquality().hash(_resourceId),
        const DeepCollectionEquality().hash(_resourceLastUpdated),
        const DeepCollectionEquality().hash(_resourceList),
        const DeepCollectionEquality().hash(_resourceProfile),
        const DeepCollectionEquality().hash(_resourceQuery),
        const DeepCollectionEquality().hash(_resourceSecurity),
        const DeepCollectionEquality().hash(_resourceSource),
        const DeepCollectionEquality().hash(_resourceTag),
        const DeepCollectionEquality().hash(_resourceText),
        const DeepCollectionEquality().hash(_resourceType),
        const DeepCollectionEquality().hash(_context),
        const DeepCollectionEquality().hash(_contextQuantity),
        const DeepCollectionEquality().hash(_contextType),
        const DeepCollectionEquality().hash(_date),
        const DeepCollectionEquality().hash(_description),
        const DeepCollectionEquality().hash(_jurisdiction),
        const DeepCollectionEquality().hash(_name),
        const DeepCollectionEquality().hash(_publisher),
        const DeepCollectionEquality().hash(_status),
        const DeepCollectionEquality().hash(_url),
        const DeepCollectionEquality().hash(_version),
        const DeepCollectionEquality().hash(_contextTypeQuantity),
        const DeepCollectionEquality().hash(_contextTypeValue),
        const DeepCollectionEquality().hash(_base),
        const DeepCollectionEquality().hash(_code),
        const DeepCollectionEquality().hash(_component),
        const DeepCollectionEquality().hash(_derivedFrom),
        const DeepCollectionEquality().hash(_target),
        const DeepCollectionEquality().hash(_type)
      ]);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_SearchParameterSearchParamsCopyWith<_$_SearchParameterSearchParams>
      get copyWith => __$$_SearchParameterSearchParamsCopyWithImpl<
          _$_SearchParameterSearchParams>(this, _$identity);
}

abstract class _SearchParameterSearchParams
    extends SearchParameterSearchParams {
  const factory _SearchParameterSearchParams(
      {@JsonKey(name: '_content')
          final List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          final List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          final List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          final List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          final List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          final List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          final List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          final List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          final List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          final List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          final List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          final List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          final List<SearchParamToken> resourceType,
      final List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          final List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          final List<SearchParamToken> contextType,
      final List<SearchParamDate> date,
      final List<SearchParamString> description,
      final List<SearchParamToken> jurisdiction,
      final List<SearchParamString> name,
      final List<SearchParamString> publisher,
      final List<SearchParamToken> status,
      final List<SearchParamUri> url,
      final List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          final List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          final List<SearchParamComposite> contextTypeValue,
      final List<SearchParamToken> base,
      final List<SearchParamToken> code,
      final List<SearchParamReference> component,
      @JsonKey(name: 'derived-from')
          final List<SearchParamReference> derivedFrom,
      final List<SearchParamToken> target,
      final List<SearchParamToken> type}) = _$_SearchParameterSearchParams;
  const _SearchParameterSearchParams._() : super._();

  @override

  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent;
  @override

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter;
  @override

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas;
  @override

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId;
  @override

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated;
  @override

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList;
  @override

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile;
  @override

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery;
  @override

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity;
  @override

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource;
  @override

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag;
  @override

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText;
  @override

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType;
  @override

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context;
  @override

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity;
  @override

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType;
  @override

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date;
  @override

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description;
  @override

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  List<SearchParamToken> get jurisdiction;
  @override

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name;
  @override

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher;
  @override

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status;
  @override

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url;
  @override

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version;
  @override

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity;
  @override

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue;
  @override

  /// [base] The resource type(s) this search parameter applies to
  List<SearchParamToken> get base;
  @override

  /// [code] Code used in URL
  List<SearchParamToken> get code;
  @override

  /// [component] Defines how the part works
  List<SearchParamReference> get component;
  @override

  /// [derivedFrom] Original definition for the search parameter
  @JsonKey(name: 'derived-from')
  List<SearchParamReference> get derivedFrom;
  @override

  /// [target] Types of resource (if a resource reference)
  List<SearchParamToken> get target;
  @override

  /// [type] number | date | string | token | reference | composite | quantity | uri | special
  List<SearchParamToken> get type;
  @override
  @JsonKey(ignore: true)
  _$$_SearchParameterSearchParamsCopyWith<_$_SearchParameterSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
mixin _$StructureDefinitionSearchParams {
  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent =>
      throw _privateConstructorUsedError;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter =>
      throw _privateConstructorUsedError;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas => throw _privateConstructorUsedError;

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId => throw _privateConstructorUsedError;

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated =>
      throw _privateConstructorUsedError;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList =>
      throw _privateConstructorUsedError;

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile =>
      throw _privateConstructorUsedError;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery =>
      throw _privateConstructorUsedError;

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity =>
      throw _privateConstructorUsedError;

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource => throw _privateConstructorUsedError;

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag => throw _privateConstructorUsedError;

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText =>
      throw _privateConstructorUsedError;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType => throw _privateConstructorUsedError;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context => throw _privateConstructorUsedError;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity =>
      throw _privateConstructorUsedError;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType => throw _privateConstructorUsedError;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date => throw _privateConstructorUsedError;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description => throw _privateConstructorUsedError;

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  List<SearchParamToken> get jurisdiction => throw _privateConstructorUsedError;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name => throw _privateConstructorUsedError;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher => throw _privateConstructorUsedError;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status => throw _privateConstructorUsedError;

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  List<SearchParamString> get title => throw _privateConstructorUsedError;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url => throw _privateConstructorUsedError;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version => throw _privateConstructorUsedError;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity =>
      throw _privateConstructorUsedError;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue =>
      throw _privateConstructorUsedError;

  /// [identifier] Multiple Resources:
  /// * [CodeSystem](codesystem.html): External identifier for the code system
  /// * [ConceptMap](conceptmap.html): External identifier for the concept map
  /// * [MessageDefinition](messagedefinition.html): External identifier for the message definition
  /// * [StructureDefinition](structuredefinition.html): External identifier for the structure definition
  /// * [StructureMap](structuremap.html): External identifier for the structure map
  /// * [ValueSet](valueset.html): External identifier for the value set
  List<SearchParamToken> get identifier => throw _privateConstructorUsedError;

  /// [abstract_] Whether the structure is abstract
  @JsonKey(name: 'abstract')
  List<SearchParamToken> get abstract_ => throw _privateConstructorUsedError;

  /// [base] Definition that this type is constrained/specialized from
  List<SearchParamReference> get base => throw _privateConstructorUsedError;

  /// [basePath] Path that identifies the base element
  @JsonKey(name: 'base-path')
  List<SearchParamToken> get basePath => throw _privateConstructorUsedError;

  /// [derivation] specialization | constraint - How relates to base definition
  List<SearchParamToken> get derivation => throw _privateConstructorUsedError;

  /// [experimental] For testing purposes, not real usage
  List<SearchParamToken> get experimental => throw _privateConstructorUsedError;

  /// [extContext] The system is the URL for the context-type: e.g. http://hl7.org/fhir/extension-context-type#element|CodeableConcept.text
  @JsonKey(name: 'ext-context')
  List<SearchParamToken> get extContext => throw _privateConstructorUsedError;

  /// [keyword] A code for the StructureDefinition
  List<SearchParamToken> get keyword => throw _privateConstructorUsedError;

  /// [kind] primitive-type | complex-type | resource | logical
  List<SearchParamToken> get kind => throw _privateConstructorUsedError;

  /// [path] A path that is constrained in the StructureDefinition
  List<SearchParamToken> get path => throw _privateConstructorUsedError;

  /// [type] Type defined or constrained by this structure
  List<SearchParamUri> get type => throw _privateConstructorUsedError;

  /// [valueset] A vocabulary binding reference
  List<SearchParamReference> get valueset => throw _privateConstructorUsedError;

  @JsonKey(ignore: true)
  $StructureDefinitionSearchParamsCopyWith<StructureDefinitionSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $StructureDefinitionSearchParamsCopyWith<$Res> {
  factory $StructureDefinitionSearchParamsCopyWith(
          StructureDefinitionSearchParams value,
          $Res Function(StructureDefinitionSearchParams) then) =
      _$StructureDefinitionSearchParamsCopyWithImpl<$Res,
          StructureDefinitionSearchParams>;
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamToken> jurisdiction,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamString> title,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue,
      List<SearchParamToken> identifier,
      @JsonKey(name: 'abstract')
          List<SearchParamToken> abstract_,
      List<SearchParamReference> base,
      @JsonKey(name: 'base-path')
          List<SearchParamToken> basePath,
      List<SearchParamToken> derivation,
      List<SearchParamToken> experimental,
      @JsonKey(name: 'ext-context')
          List<SearchParamToken> extContext,
      List<SearchParamToken> keyword,
      List<SearchParamToken> kind,
      List<SearchParamToken> path,
      List<SearchParamUri> type,
      List<SearchParamReference> valueset});
}

/// @nodoc
class _$StructureDefinitionSearchParamsCopyWithImpl<$Res,
        $Val extends StructureDefinitionSearchParams>
    implements $StructureDefinitionSearchParamsCopyWith<$Res> {
  _$StructureDefinitionSearchParamsCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? jurisdiction = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? title = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
    Object? identifier = null,
    Object? abstract_ = null,
    Object? base = null,
    Object? basePath = null,
    Object? derivation = null,
    Object? experimental = null,
    Object? extContext = null,
    Object? keyword = null,
    Object? kind = null,
    Object? path = null,
    Object? type = null,
    Object? valueset = null,
  }) {
    return _then(_value.copyWith(
      resourceContent: null == resourceContent
          ? _value.resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value.resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value.resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value.resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value.resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value.resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value.resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value.resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value.resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value.resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value.resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value.resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value.resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value.context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value.contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value.contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value.date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      jurisdiction: null == jurisdiction
          ? _value.jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value.publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      title: null == title
          ? _value.title
          : title // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      url: null == url
          ? _value.url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value.version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value.contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value.contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      identifier: null == identifier
          ? _value.identifier
          : identifier // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      abstract_: null == abstract_
          ? _value.abstract_
          : abstract_ // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      base: null == base
          ? _value.base
          : base // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      basePath: null == basePath
          ? _value.basePath
          : basePath // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      derivation: null == derivation
          ? _value.derivation
          : derivation // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      experimental: null == experimental
          ? _value.experimental
          : experimental // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      extContext: null == extContext
          ? _value.extContext
          : extContext // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      keyword: null == keyword
          ? _value.keyword
          : keyword // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      kind: null == kind
          ? _value.kind
          : kind // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      path: null == path
          ? _value.path
          : path // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      type: null == type
          ? _value.type
          : type // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      valueset: null == valueset
          ? _value.valueset
          : valueset // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$_StructureDefinitionSearchParamsCopyWith<$Res>
    implements $StructureDefinitionSearchParamsCopyWith<$Res> {
  factory _$$_StructureDefinitionSearchParamsCopyWith(
          _$_StructureDefinitionSearchParams value,
          $Res Function(_$_StructureDefinitionSearchParams) then) =
      __$$_StructureDefinitionSearchParamsCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamToken> jurisdiction,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamString> title,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue,
      List<SearchParamToken> identifier,
      @JsonKey(name: 'abstract')
          List<SearchParamToken> abstract_,
      List<SearchParamReference> base,
      @JsonKey(name: 'base-path')
          List<SearchParamToken> basePath,
      List<SearchParamToken> derivation,
      List<SearchParamToken> experimental,
      @JsonKey(name: 'ext-context')
          List<SearchParamToken> extContext,
      List<SearchParamToken> keyword,
      List<SearchParamToken> kind,
      List<SearchParamToken> path,
      List<SearchParamUri> type,
      List<SearchParamReference> valueset});
}

/// @nodoc
class __$$_StructureDefinitionSearchParamsCopyWithImpl<$Res>
    extends _$StructureDefinitionSearchParamsCopyWithImpl<$Res,
        _$_StructureDefinitionSearchParams>
    implements _$$_StructureDefinitionSearchParamsCopyWith<$Res> {
  __$$_StructureDefinitionSearchParamsCopyWithImpl(
      _$_StructureDefinitionSearchParams _value,
      $Res Function(_$_StructureDefinitionSearchParams) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? jurisdiction = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? title = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
    Object? identifier = null,
    Object? abstract_ = null,
    Object? base = null,
    Object? basePath = null,
    Object? derivation = null,
    Object? experimental = null,
    Object? extContext = null,
    Object? keyword = null,
    Object? kind = null,
    Object? path = null,
    Object? type = null,
    Object? valueset = null,
  }) {
    return _then(_$_StructureDefinitionSearchParams(
      resourceContent: null == resourceContent
          ? _value._resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value._resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value._resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value._resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value._resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value._resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value._resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value._resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value._resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value._resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value._resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value._resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value._resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value._context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value._contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value._contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value._date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value._description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      jurisdiction: null == jurisdiction
          ? _value._jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value._name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value._publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value._status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      title: null == title
          ? _value._title
          : title // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      url: null == url
          ? _value._url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value._version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value._contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value._contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      identifier: null == identifier
          ? _value._identifier
          : identifier // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      abstract_: null == abstract_
          ? _value._abstract_
          : abstract_ // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      base: null == base
          ? _value._base
          : base // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
      basePath: null == basePath
          ? _value._basePath
          : basePath // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      derivation: null == derivation
          ? _value._derivation
          : derivation // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      experimental: null == experimental
          ? _value._experimental
          : experimental // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      extContext: null == extContext
          ? _value._extContext
          : extContext // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      keyword: null == keyword
          ? _value._keyword
          : keyword // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      kind: null == kind
          ? _value._kind
          : kind // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      path: null == path
          ? _value._path
          : path // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      type: null == type
          ? _value._type
          : type // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      valueset: null == valueset
          ? _value._valueset
          : valueset // ignore: cast_nullable_to_non_nullable
              as List<SearchParamReference>,
    ));
  }
}

/// @nodoc

class _$_StructureDefinitionSearchParams
    extends _StructureDefinitionSearchParams {
  const _$_StructureDefinitionSearchParams(
      {@JsonKey(name: '_content')
          final List<SearchParamString> resourceContent = const [],
      @JsonKey(name: '_filter')
          final List<SearchParamToken> resourceFilter = const [],
      @JsonKey(name: '_has')
          final List<SearchParamString> resourceHas = const [],
      @JsonKey(name: '_id')
          final List<SearchParamToken> resourceId = const [],
      @JsonKey(name: '_lastUpdated')
          final List<SearchParamDate> resourceLastUpdated = const [],
      @JsonKey(name: '_list')
          final List<SearchParamString> resourceList = const [],
      @JsonKey(name: '_profile')
          final List<SearchParamUri> resourceProfile = const [],
      @JsonKey(name: '_query')
          final List<SearchParamToken> resourceQuery = const [],
      @JsonKey(name: '_security')
          final List<SearchParamToken> resourceSecurity = const [],
      @JsonKey(name: '_source')
          final List<SearchParamUri> resourceSource = const [],
      @JsonKey(name: '_tag')
          final List<SearchParamToken> resourceTag = const [],
      @JsonKey(name: '_text')
          final List<SearchParamString> resourceText = const [],
      @JsonKey(name: '_type')
          final List<SearchParamToken> resourceType = const [],
      final List<SearchParamToken> context = const [],
      @JsonKey(name: 'context-quantity')
          final List<SearchParamQuantity> contextQuantity = const [],
      @JsonKey(name: 'context-type')
          final List<SearchParamToken> contextType = const [],
      final List<SearchParamDate> date = const [],
      final List<SearchParamString> description = const [],
      final List<SearchParamToken> jurisdiction = const [],
      final List<SearchParamString> name = const [],
      final List<SearchParamString> publisher = const [],
      final List<SearchParamToken> status = const [],
      final List<SearchParamString> title = const [],
      final List<SearchParamUri> url = const [],
      final List<SearchParamToken> version = const [],
      @JsonKey(name: 'context-type-quantity')
          final List<SearchParamComposite> contextTypeQuantity = const [],
      @JsonKey(name: 'context-type-value')
          final List<SearchParamComposite> contextTypeValue = const [],
      final List<SearchParamToken> identifier = const [],
      @JsonKey(name: 'abstract')
          final List<SearchParamToken> abstract_ = const [],
      final List<SearchParamReference> base = const [],
      @JsonKey(name: 'base-path')
          final List<SearchParamToken> basePath = const [],
      final List<SearchParamToken> derivation = const [],
      final List<SearchParamToken> experimental = const [],
      @JsonKey(name: 'ext-context')
          final List<SearchParamToken> extContext = const [],
      final List<SearchParamToken> keyword = const [],
      final List<SearchParamToken> kind = const [],
      final List<SearchParamToken> path = const [],
      final List<SearchParamUri> type = const [],
      final List<SearchParamReference> valueset = const []})
      : _resourceContent = resourceContent,
        _resourceFilter = resourceFilter,
        _resourceHas = resourceHas,
        _resourceId = resourceId,
        _resourceLastUpdated = resourceLastUpdated,
        _resourceList = resourceList,
        _resourceProfile = resourceProfile,
        _resourceQuery = resourceQuery,
        _resourceSecurity = resourceSecurity,
        _resourceSource = resourceSource,
        _resourceTag = resourceTag,
        _resourceText = resourceText,
        _resourceType = resourceType,
        _context = context,
        _contextQuantity = contextQuantity,
        _contextType = contextType,
        _date = date,
        _description = description,
        _jurisdiction = jurisdiction,
        _name = name,
        _publisher = publisher,
        _status = status,
        _title = title,
        _url = url,
        _version = version,
        _contextTypeQuantity = contextTypeQuantity,
        _contextTypeValue = contextTypeValue,
        _identifier = identifier,
        _abstract_ = abstract_,
        _base = base,
        _basePath = basePath,
        _derivation = derivation,
        _experimental = experimental,
        _extContext = extContext,
        _keyword = keyword,
        _kind = kind,
        _path = path,
        _type = type,
        _valueset = valueset,
        super._();

  /// [resourceContent] Search on the entire content of the resource
  final List<SearchParamString> _resourceContent;

  /// [resourceContent] Search on the entire content of the resource
  @override
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent {
    if (_resourceContent is EqualUnmodifiableListView) return _resourceContent;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceContent);
  }

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  final List<SearchParamToken> _resourceFilter;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @override
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter {
    if (_resourceFilter is EqualUnmodifiableListView) return _resourceFilter;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceFilter);
  }

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  final List<SearchParamString> _resourceHas;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @override
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas {
    if (_resourceHas is EqualUnmodifiableListView) return _resourceHas;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceHas);
  }

  /// [resourceId] Logical id of this artifact
  final List<SearchParamToken> _resourceId;

  /// [resourceId] Logical id of this artifact
  @override
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId {
    if (_resourceId is EqualUnmodifiableListView) return _resourceId;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceId);
  }

  /// [resourceLastUpdated] When the resource version last changed
  final List<SearchParamDate> _resourceLastUpdated;

  /// [resourceLastUpdated] When the resource version last changed
  @override
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated {
    if (_resourceLastUpdated is EqualUnmodifiableListView)
      return _resourceLastUpdated;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceLastUpdated);
  }

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  final List<SearchParamString> _resourceList;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @override
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList {
    if (_resourceList is EqualUnmodifiableListView) return _resourceList;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceList);
  }

  /// [resourceProfile] Profiles this resource claims to conform to
  final List<SearchParamUri> _resourceProfile;

  /// [resourceProfile] Profiles this resource claims to conform to
  @override
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile {
    if (_resourceProfile is EqualUnmodifiableListView) return _resourceProfile;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceProfile);
  }

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  final List<SearchParamToken> _resourceQuery;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @override
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery {
    if (_resourceQuery is EqualUnmodifiableListView) return _resourceQuery;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceQuery);
  }

  /// [resourceSecurity] Security Labels applied to this resource
  final List<SearchParamToken> _resourceSecurity;

  /// [resourceSecurity] Security Labels applied to this resource
  @override
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity {
    if (_resourceSecurity is EqualUnmodifiableListView)
      return _resourceSecurity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSecurity);
  }

  /// [resourceSource] Identifies where the resource comes from
  final List<SearchParamUri> _resourceSource;

  /// [resourceSource] Identifies where the resource comes from
  @override
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource {
    if (_resourceSource is EqualUnmodifiableListView) return _resourceSource;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSource);
  }

  /// [resourceTag] Tags applied to this resource
  final List<SearchParamToken> _resourceTag;

  /// [resourceTag] Tags applied to this resource
  @override
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag {
    if (_resourceTag is EqualUnmodifiableListView) return _resourceTag;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceTag);
  }

  /// [resourceText] Search on the narrative text (html) of the resource
  final List<SearchParamString> _resourceText;

  /// [resourceText] Search on the narrative text (html) of the resource
  @override
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText {
    if (_resourceText is EqualUnmodifiableListView) return _resourceText;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceText);
  }

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  final List<SearchParamToken> _resourceType;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @override
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType {
    if (_resourceType is EqualUnmodifiableListView) return _resourceType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceType);
  }

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  final List<SearchParamToken> _context;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  @override
  @JsonKey()
  List<SearchParamToken> get context {
    if (_context is EqualUnmodifiableListView) return _context;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_context);
  }

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  final List<SearchParamQuantity> _contextQuantity;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @override
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity {
    if (_contextQuantity is EqualUnmodifiableListView) return _contextQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextQuantity);
  }

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  final List<SearchParamToken> _contextType;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @override
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType {
    if (_contextType is EqualUnmodifiableListView) return _contextType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextType);
  }

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  final List<SearchParamDate> _date;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  @override
  @JsonKey()
  List<SearchParamDate> get date {
    if (_date is EqualUnmodifiableListView) return _date;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_date);
  }

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  final List<SearchParamString> _description;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  @override
  @JsonKey()
  List<SearchParamString> get description {
    if (_description is EqualUnmodifiableListView) return _description;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_description);
  }

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  final List<SearchParamToken> _jurisdiction;

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  @override
  @JsonKey()
  List<SearchParamToken> get jurisdiction {
    if (_jurisdiction is EqualUnmodifiableListView) return _jurisdiction;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_jurisdiction);
  }

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  final List<SearchParamString> _name;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  @override
  @JsonKey()
  List<SearchParamString> get name {
    if (_name is EqualUnmodifiableListView) return _name;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_name);
  }

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  final List<SearchParamString> _publisher;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  @override
  @JsonKey()
  List<SearchParamString> get publisher {
    if (_publisher is EqualUnmodifiableListView) return _publisher;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_publisher);
  }

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  final List<SearchParamToken> _status;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get status {
    if (_status is EqualUnmodifiableListView) return _status;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_status);
  }

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  final List<SearchParamString> _title;

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  @override
  @JsonKey()
  List<SearchParamString> get title {
    if (_title is EqualUnmodifiableListView) return _title;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_title);
  }

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  final List<SearchParamUri> _url;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  @override
  @JsonKey()
  List<SearchParamUri> get url {
    if (_url is EqualUnmodifiableListView) return _url;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_url);
  }

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  final List<SearchParamToken> _version;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get version {
    if (_version is EqualUnmodifiableListView) return _version;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_version);
  }

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  final List<SearchParamComposite> _contextTypeQuantity;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @override
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity {
    if (_contextTypeQuantity is EqualUnmodifiableListView)
      return _contextTypeQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeQuantity);
  }

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  final List<SearchParamComposite> _contextTypeValue;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @override
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue {
    if (_contextTypeValue is EqualUnmodifiableListView)
      return _contextTypeValue;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeValue);
  }

  /// [identifier] Multiple Resources:
  /// * [CodeSystem](codesystem.html): External identifier for the code system
  /// * [ConceptMap](conceptmap.html): External identifier for the concept map
  /// * [MessageDefinition](messagedefinition.html): External identifier for the message definition
  /// * [StructureDefinition](structuredefinition.html): External identifier for the structure definition
  /// * [StructureMap](structuremap.html): External identifier for the structure map
  /// * [ValueSet](valueset.html): External identifier for the value set
  final List<SearchParamToken> _identifier;

  /// [identifier] Multiple Resources:
  /// * [CodeSystem](codesystem.html): External identifier for the code system
  /// * [ConceptMap](conceptmap.html): External identifier for the concept map
  /// * [MessageDefinition](messagedefinition.html): External identifier for the message definition
  /// * [StructureDefinition](structuredefinition.html): External identifier for the structure definition
  /// * [StructureMap](structuremap.html): External identifier for the structure map
  /// * [ValueSet](valueset.html): External identifier for the value set
  @override
  @JsonKey()
  List<SearchParamToken> get identifier {
    if (_identifier is EqualUnmodifiableListView) return _identifier;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_identifier);
  }

  /// [abstract_] Whether the structure is abstract
  final List<SearchParamToken> _abstract_;

  /// [abstract_] Whether the structure is abstract
  @override
  @JsonKey(name: 'abstract')
  List<SearchParamToken> get abstract_ {
    if (_abstract_ is EqualUnmodifiableListView) return _abstract_;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_abstract_);
  }

  /// [base] Definition that this type is constrained/specialized from
  final List<SearchParamReference> _base;

  /// [base] Definition that this type is constrained/specialized from
  @override
  @JsonKey()
  List<SearchParamReference> get base {
    if (_base is EqualUnmodifiableListView) return _base;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_base);
  }

  /// [basePath] Path that identifies the base element
  final List<SearchParamToken> _basePath;

  /// [basePath] Path that identifies the base element
  @override
  @JsonKey(name: 'base-path')
  List<SearchParamToken> get basePath {
    if (_basePath is EqualUnmodifiableListView) return _basePath;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_basePath);
  }

  /// [derivation] specialization | constraint - How relates to base definition
  final List<SearchParamToken> _derivation;

  /// [derivation] specialization | constraint - How relates to base definition
  @override
  @JsonKey()
  List<SearchParamToken> get derivation {
    if (_derivation is EqualUnmodifiableListView) return _derivation;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_derivation);
  }

  /// [experimental] For testing purposes, not real usage
  final List<SearchParamToken> _experimental;

  /// [experimental] For testing purposes, not real usage
  @override
  @JsonKey()
  List<SearchParamToken> get experimental {
    if (_experimental is EqualUnmodifiableListView) return _experimental;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_experimental);
  }

  /// [extContext] The system is the URL for the context-type: e.g. http://hl7.org/fhir/extension-context-type#element|CodeableConcept.text
  final List<SearchParamToken> _extContext;

  /// [extContext] The system is the URL for the context-type: e.g. http://hl7.org/fhir/extension-context-type#element|CodeableConcept.text
  @override
  @JsonKey(name: 'ext-context')
  List<SearchParamToken> get extContext {
    if (_extContext is EqualUnmodifiableListView) return _extContext;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_extContext);
  }

  /// [keyword] A code for the StructureDefinition
  final List<SearchParamToken> _keyword;

  /// [keyword] A code for the StructureDefinition
  @override
  @JsonKey()
  List<SearchParamToken> get keyword {
    if (_keyword is EqualUnmodifiableListView) return _keyword;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_keyword);
  }

  /// [kind] primitive-type | complex-type | resource | logical
  final List<SearchParamToken> _kind;

  /// [kind] primitive-type | complex-type | resource | logical
  @override
  @JsonKey()
  List<SearchParamToken> get kind {
    if (_kind is EqualUnmodifiableListView) return _kind;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_kind);
  }

  /// [path] A path that is constrained in the StructureDefinition
  final List<SearchParamToken> _path;

  /// [path] A path that is constrained in the StructureDefinition
  @override
  @JsonKey()
  List<SearchParamToken> get path {
    if (_path is EqualUnmodifiableListView) return _path;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_path);
  }

  /// [type] Type defined or constrained by this structure
  final List<SearchParamUri> _type;

  /// [type] Type defined or constrained by this structure
  @override
  @JsonKey()
  List<SearchParamUri> get type {
    if (_type is EqualUnmodifiableListView) return _type;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_type);
  }

  /// [valueset] A vocabulary binding reference
  final List<SearchParamReference> _valueset;

  /// [valueset] A vocabulary binding reference
  @override
  @JsonKey()
  List<SearchParamReference> get valueset {
    if (_valueset is EqualUnmodifiableListView) return _valueset;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_valueset);
  }

  @override
  String toString() {
    return 'StructureDefinitionSearchParams(resourceContent: $resourceContent, resourceFilter: $resourceFilter, resourceHas: $resourceHas, resourceId: $resourceId, resourceLastUpdated: $resourceLastUpdated, resourceList: $resourceList, resourceProfile: $resourceProfile, resourceQuery: $resourceQuery, resourceSecurity: $resourceSecurity, resourceSource: $resourceSource, resourceTag: $resourceTag, resourceText: $resourceText, resourceType: $resourceType, context: $context, contextQuantity: $contextQuantity, contextType: $contextType, date: $date, description: $description, jurisdiction: $jurisdiction, name: $name, publisher: $publisher, status: $status, title: $title, url: $url, version: $version, contextTypeQuantity: $contextTypeQuantity, contextTypeValue: $contextTypeValue, identifier: $identifier, abstract_: $abstract_, base: $base, basePath: $basePath, derivation: $derivation, experimental: $experimental, extContext: $extContext, keyword: $keyword, kind: $kind, path: $path, type: $type, valueset: $valueset)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_StructureDefinitionSearchParams &&
            const DeepCollectionEquality()
                .equals(other._resourceContent, _resourceContent) &&
            const DeepCollectionEquality()
                .equals(other._resourceFilter, _resourceFilter) &&
            const DeepCollectionEquality()
                .equals(other._resourceHas, _resourceHas) &&
            const DeepCollectionEquality()
                .equals(other._resourceId, _resourceId) &&
            const DeepCollectionEquality()
                .equals(other._resourceLastUpdated, _resourceLastUpdated) &&
            const DeepCollectionEquality()
                .equals(other._resourceList, _resourceList) &&
            const DeepCollectionEquality()
                .equals(other._resourceProfile, _resourceProfile) &&
            const DeepCollectionEquality()
                .equals(other._resourceQuery, _resourceQuery) &&
            const DeepCollectionEquality()
                .equals(other._resourceSecurity, _resourceSecurity) &&
            const DeepCollectionEquality()
                .equals(other._resourceSource, _resourceSource) &&
            const DeepCollectionEquality()
                .equals(other._resourceTag, _resourceTag) &&
            const DeepCollectionEquality()
                .equals(other._resourceText, _resourceText) &&
            const DeepCollectionEquality()
                .equals(other._resourceType, _resourceType) &&
            const DeepCollectionEquality().equals(other._context, _context) &&
            const DeepCollectionEquality()
                .equals(other._contextQuantity, _contextQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextType, _contextType) &&
            const DeepCollectionEquality().equals(other._date, _date) &&
            const DeepCollectionEquality()
                .equals(other._description, _description) &&
            const DeepCollectionEquality()
                .equals(other._jurisdiction, _jurisdiction) &&
            const DeepCollectionEquality().equals(other._name, _name) &&
            const DeepCollectionEquality()
                .equals(other._publisher, _publisher) &&
            const DeepCollectionEquality().equals(other._status, _status) &&
            const DeepCollectionEquality().equals(other._title, _title) &&
            const DeepCollectionEquality().equals(other._url, _url) &&
            const DeepCollectionEquality().equals(other._version, _version) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeQuantity, _contextTypeQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeValue, _contextTypeValue) &&
            const DeepCollectionEquality()
                .equals(other._identifier, _identifier) &&
            const DeepCollectionEquality()
                .equals(other._abstract_, _abstract_) &&
            const DeepCollectionEquality().equals(other._base, _base) &&
            const DeepCollectionEquality().equals(other._basePath, _basePath) &&
            const DeepCollectionEquality()
                .equals(other._derivation, _derivation) &&
            const DeepCollectionEquality()
                .equals(other._experimental, _experimental) &&
            const DeepCollectionEquality()
                .equals(other._extContext, _extContext) &&
            const DeepCollectionEquality().equals(other._keyword, _keyword) &&
            const DeepCollectionEquality().equals(other._kind, _kind) &&
            const DeepCollectionEquality().equals(other._path, _path) &&
            const DeepCollectionEquality().equals(other._type, _type) &&
            const DeepCollectionEquality().equals(other._valueset, _valueset));
  }

  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        const DeepCollectionEquality().hash(_resourceContent),
        const DeepCollectionEquality().hash(_resourceFilter),
        const DeepCollectionEquality().hash(_resourceHas),
        const DeepCollectionEquality().hash(_resourceId),
        const DeepCollectionEquality().hash(_resourceLastUpdated),
        const DeepCollectionEquality().hash(_resourceList),
        const DeepCollectionEquality().hash(_resourceProfile),
        const DeepCollectionEquality().hash(_resourceQuery),
        const DeepCollectionEquality().hash(_resourceSecurity),
        const DeepCollectionEquality().hash(_resourceSource),
        const DeepCollectionEquality().hash(_resourceTag),
        const DeepCollectionEquality().hash(_resourceText),
        const DeepCollectionEquality().hash(_resourceType),
        const DeepCollectionEquality().hash(_context),
        const DeepCollectionEquality().hash(_contextQuantity),
        const DeepCollectionEquality().hash(_contextType),
        const DeepCollectionEquality().hash(_date),
        const DeepCollectionEquality().hash(_description),
        const DeepCollectionEquality().hash(_jurisdiction),
        const DeepCollectionEquality().hash(_name),
        const DeepCollectionEquality().hash(_publisher),
        const DeepCollectionEquality().hash(_status),
        const DeepCollectionEquality().hash(_title),
        const DeepCollectionEquality().hash(_url),
        const DeepCollectionEquality().hash(_version),
        const DeepCollectionEquality().hash(_contextTypeQuantity),
        const DeepCollectionEquality().hash(_contextTypeValue),
        const DeepCollectionEquality().hash(_identifier),
        const DeepCollectionEquality().hash(_abstract_),
        const DeepCollectionEquality().hash(_base),
        const DeepCollectionEquality().hash(_basePath),
        const DeepCollectionEquality().hash(_derivation),
        const DeepCollectionEquality().hash(_experimental),
        const DeepCollectionEquality().hash(_extContext),
        const DeepCollectionEquality().hash(_keyword),
        const DeepCollectionEquality().hash(_kind),
        const DeepCollectionEquality().hash(_path),
        const DeepCollectionEquality().hash(_type),
        const DeepCollectionEquality().hash(_valueset)
      ]);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_StructureDefinitionSearchParamsCopyWith<
          _$_StructureDefinitionSearchParams>
      get copyWith => __$$_StructureDefinitionSearchParamsCopyWithImpl<
          _$_StructureDefinitionSearchParams>(this, _$identity);
}

abstract class _StructureDefinitionSearchParams
    extends StructureDefinitionSearchParams {
  const factory _StructureDefinitionSearchParams(
          {@JsonKey(name: '_content')
              final List<SearchParamString> resourceContent,
          @JsonKey(name: '_filter')
              final List<SearchParamToken> resourceFilter,
          @JsonKey(name: '_has')
              final List<SearchParamString> resourceHas,
          @JsonKey(name: '_id')
              final List<SearchParamToken> resourceId,
          @JsonKey(name: '_lastUpdated')
              final List<SearchParamDate> resourceLastUpdated,
          @JsonKey(name: '_list')
              final List<SearchParamString> resourceList,
          @JsonKey(name: '_profile')
              final List<SearchParamUri> resourceProfile,
          @JsonKey(name: '_query')
              final List<SearchParamToken> resourceQuery,
          @JsonKey(name: '_security')
              final List<SearchParamToken> resourceSecurity,
          @JsonKey(name: '_source')
              final List<SearchParamUri> resourceSource,
          @JsonKey(name: '_tag')
              final List<SearchParamToken> resourceTag,
          @JsonKey(name: '_text')
              final List<SearchParamString> resourceText,
          @JsonKey(name: '_type')
              final List<SearchParamToken> resourceType,
          final List<SearchParamToken> context,
          @JsonKey(name: 'context-quantity')
              final List<SearchParamQuantity> contextQuantity,
          @JsonKey(name: 'context-type')
              final List<SearchParamToken> contextType,
          final List<SearchParamDate> date,
          final List<SearchParamString> description,
          final List<SearchParamToken> jurisdiction,
          final List<SearchParamString> name,
          final List<SearchParamString> publisher,
          final List<SearchParamToken> status,
          final List<SearchParamString> title,
          final List<SearchParamUri> url,
          final List<SearchParamToken> version,
          @JsonKey(name: 'context-type-quantity')
              final List<SearchParamComposite> contextTypeQuantity,
          @JsonKey(name: 'context-type-value')
              final List<SearchParamComposite> contextTypeValue,
          final List<SearchParamToken> identifier,
          @JsonKey(name: 'abstract')
              final List<SearchParamToken> abstract_,
          final List<SearchParamReference> base,
          @JsonKey(name: 'base-path')
              final List<SearchParamToken> basePath,
          final List<SearchParamToken> derivation,
          final List<SearchParamToken> experimental,
          @JsonKey(name: 'ext-context')
              final List<SearchParamToken> extContext,
          final List<SearchParamToken> keyword,
          final List<SearchParamToken> kind,
          final List<SearchParamToken> path,
          final List<SearchParamUri> type,
          final List<SearchParamReference> valueset}) =
      _$_StructureDefinitionSearchParams;
  const _StructureDefinitionSearchParams._() : super._();

  @override

  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent;
  @override

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter;
  @override

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas;
  @override

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId;
  @override

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated;
  @override

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList;
  @override

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile;
  @override

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery;
  @override

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity;
  @override

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource;
  @override

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag;
  @override

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText;
  @override

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType;
  @override

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context;
  @override

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity;
  @override

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType;
  @override

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date;
  @override

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description;
  @override

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  List<SearchParamToken> get jurisdiction;
  @override

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name;
  @override

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher;
  @override

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status;
  @override

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  List<SearchParamString> get title;
  @override

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url;
  @override

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version;
  @override

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity;
  @override

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue;
  @override

  /// [identifier] Multiple Resources:
  /// * [CodeSystem](codesystem.html): External identifier for the code system
  /// * [ConceptMap](conceptmap.html): External identifier for the concept map
  /// * [MessageDefinition](messagedefinition.html): External identifier for the message definition
  /// * [StructureDefinition](structuredefinition.html): External identifier for the structure definition
  /// * [StructureMap](structuremap.html): External identifier for the structure map
  /// * [ValueSet](valueset.html): External identifier for the value set
  List<SearchParamToken> get identifier;
  @override

  /// [abstract_] Whether the structure is abstract
  @JsonKey(name: 'abstract')
  List<SearchParamToken> get abstract_;
  @override

  /// [base] Definition that this type is constrained/specialized from
  List<SearchParamReference> get base;
  @override

  /// [basePath] Path that identifies the base element
  @JsonKey(name: 'base-path')
  List<SearchParamToken> get basePath;
  @override

  /// [derivation] specialization | constraint - How relates to base definition
  List<SearchParamToken> get derivation;
  @override

  /// [experimental] For testing purposes, not real usage
  List<SearchParamToken> get experimental;
  @override

  /// [extContext] The system is the URL for the context-type: e.g. http://hl7.org/fhir/extension-context-type#element|CodeableConcept.text
  @JsonKey(name: 'ext-context')
  List<SearchParamToken> get extContext;
  @override

  /// [keyword] A code for the StructureDefinition
  List<SearchParamToken> get keyword;
  @override

  /// [kind] primitive-type | complex-type | resource | logical
  List<SearchParamToken> get kind;
  @override

  /// [path] A path that is constrained in the StructureDefinition
  List<SearchParamToken> get path;
  @override

  /// [type] Type defined or constrained by this structure
  List<SearchParamUri> get type;
  @override

  /// [valueset] A vocabulary binding reference
  List<SearchParamReference> get valueset;
  @override
  @JsonKey(ignore: true)
  _$$_StructureDefinitionSearchParamsCopyWith<
          _$_StructureDefinitionSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
mixin _$StructureMapSearchParams {
  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent =>
      throw _privateConstructorUsedError;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter =>
      throw _privateConstructorUsedError;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas => throw _privateConstructorUsedError;

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId => throw _privateConstructorUsedError;

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated =>
      throw _privateConstructorUsedError;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList =>
      throw _privateConstructorUsedError;

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile =>
      throw _privateConstructorUsedError;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery =>
      throw _privateConstructorUsedError;

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity =>
      throw _privateConstructorUsedError;

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource => throw _privateConstructorUsedError;

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag => throw _privateConstructorUsedError;

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText =>
      throw _privateConstructorUsedError;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType => throw _privateConstructorUsedError;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context => throw _privateConstructorUsedError;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity =>
      throw _privateConstructorUsedError;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType => throw _privateConstructorUsedError;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date => throw _privateConstructorUsedError;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description => throw _privateConstructorUsedError;

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  List<SearchParamToken> get jurisdiction => throw _privateConstructorUsedError;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name => throw _privateConstructorUsedError;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher => throw _privateConstructorUsedError;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status => throw _privateConstructorUsedError;

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  List<SearchParamString> get title => throw _privateConstructorUsedError;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url => throw _privateConstructorUsedError;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version => throw _privateConstructorUsedError;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity =>
      throw _privateConstructorUsedError;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue =>
      throw _privateConstructorUsedError;

  /// [identifier] Multiple Resources:
  /// * [CodeSystem](codesystem.html): External identifier for the code system
  /// * [ConceptMap](conceptmap.html): External identifier for the concept map
  /// * [MessageDefinition](messagedefinition.html): External identifier for the message definition
  /// * [StructureDefinition](structuredefinition.html): External identifier for the structure definition
  /// * [StructureMap](structuremap.html): External identifier for the structure map
  /// * [ValueSet](valueset.html): External identifier for the value set
  List<SearchParamToken> get identifier => throw _privateConstructorUsedError;

  @JsonKey(ignore: true)
  $StructureMapSearchParamsCopyWith<StructureMapSearchParams> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $StructureMapSearchParamsCopyWith<$Res> {
  factory $StructureMapSearchParamsCopyWith(StructureMapSearchParams value,
          $Res Function(StructureMapSearchParams) then) =
      _$StructureMapSearchParamsCopyWithImpl<$Res, StructureMapSearchParams>;
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamToken> jurisdiction,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamString> title,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue,
      List<SearchParamToken> identifier});
}

/// @nodoc
class _$StructureMapSearchParamsCopyWithImpl<$Res,
        $Val extends StructureMapSearchParams>
    implements $StructureMapSearchParamsCopyWith<$Res> {
  _$StructureMapSearchParamsCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? jurisdiction = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? title = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
    Object? identifier = null,
  }) {
    return _then(_value.copyWith(
      resourceContent: null == resourceContent
          ? _value.resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value.resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value.resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value.resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value.resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value.resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value.resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value.resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value.resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value.resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value.resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value.resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value.resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value.context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value.contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value.contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value.date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      jurisdiction: null == jurisdiction
          ? _value.jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value.publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      title: null == title
          ? _value.title
          : title // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      url: null == url
          ? _value.url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value.version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value.contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value.contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      identifier: null == identifier
          ? _value.identifier
          : identifier // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$_StructureMapSearchParamsCopyWith<$Res>
    implements $StructureMapSearchParamsCopyWith<$Res> {
  factory _$$_StructureMapSearchParamsCopyWith(
          _$_StructureMapSearchParams value,
          $Res Function(_$_StructureMapSearchParams) then) =
      __$$_StructureMapSearchParamsCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamString> description,
      List<SearchParamToken> jurisdiction,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamString> title,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue,
      List<SearchParamToken> identifier});
}

/// @nodoc
class __$$_StructureMapSearchParamsCopyWithImpl<$Res>
    extends _$StructureMapSearchParamsCopyWithImpl<$Res,
        _$_StructureMapSearchParams>
    implements _$$_StructureMapSearchParamsCopyWith<$Res> {
  __$$_StructureMapSearchParamsCopyWithImpl(_$_StructureMapSearchParams _value,
      $Res Function(_$_StructureMapSearchParams) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? description = null,
    Object? jurisdiction = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? title = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
    Object? identifier = null,
  }) {
    return _then(_$_StructureMapSearchParams(
      resourceContent: null == resourceContent
          ? _value._resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value._resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value._resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value._resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value._resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value._resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value._resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value._resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value._resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value._resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value._resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value._resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value._resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value._context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value._contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value._contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value._date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      description: null == description
          ? _value._description
          : description // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      jurisdiction: null == jurisdiction
          ? _value._jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value._name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value._publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value._status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      title: null == title
          ? _value._title
          : title // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      url: null == url
          ? _value._url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value._version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value._contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value._contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      identifier: null == identifier
          ? _value._identifier
          : identifier // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
    ));
  }
}

/// @nodoc

class _$_StructureMapSearchParams extends _StructureMapSearchParams {
  const _$_StructureMapSearchParams(
      {@JsonKey(name: '_content')
          final List<SearchParamString> resourceContent = const [],
      @JsonKey(name: '_filter')
          final List<SearchParamToken> resourceFilter = const [],
      @JsonKey(name: '_has')
          final List<SearchParamString> resourceHas = const [],
      @JsonKey(name: '_id')
          final List<SearchParamToken> resourceId = const [],
      @JsonKey(name: '_lastUpdated')
          final List<SearchParamDate> resourceLastUpdated = const [],
      @JsonKey(name: '_list')
          final List<SearchParamString> resourceList = const [],
      @JsonKey(name: '_profile')
          final List<SearchParamUri> resourceProfile = const [],
      @JsonKey(name: '_query')
          final List<SearchParamToken> resourceQuery = const [],
      @JsonKey(name: '_security')
          final List<SearchParamToken> resourceSecurity = const [],
      @JsonKey(name: '_source')
          final List<SearchParamUri> resourceSource = const [],
      @JsonKey(name: '_tag')
          final List<SearchParamToken> resourceTag = const [],
      @JsonKey(name: '_text')
          final List<SearchParamString> resourceText = const [],
      @JsonKey(name: '_type')
          final List<SearchParamToken> resourceType = const [],
      final List<SearchParamToken> context = const [],
      @JsonKey(name: 'context-quantity')
          final List<SearchParamQuantity> contextQuantity = const [],
      @JsonKey(name: 'context-type')
          final List<SearchParamToken> contextType = const [],
      final List<SearchParamDate> date = const [],
      final List<SearchParamString> description = const [],
      final List<SearchParamToken> jurisdiction = const [],
      final List<SearchParamString> name = const [],
      final List<SearchParamString> publisher = const [],
      final List<SearchParamToken> status = const [],
      final List<SearchParamString> title = const [],
      final List<SearchParamUri> url = const [],
      final List<SearchParamToken> version = const [],
      @JsonKey(name: 'context-type-quantity')
          final List<SearchParamComposite> contextTypeQuantity = const [],
      @JsonKey(name: 'context-type-value')
          final List<SearchParamComposite> contextTypeValue = const [],
      final List<SearchParamToken> identifier = const []})
      : _resourceContent = resourceContent,
        _resourceFilter = resourceFilter,
        _resourceHas = resourceHas,
        _resourceId = resourceId,
        _resourceLastUpdated = resourceLastUpdated,
        _resourceList = resourceList,
        _resourceProfile = resourceProfile,
        _resourceQuery = resourceQuery,
        _resourceSecurity = resourceSecurity,
        _resourceSource = resourceSource,
        _resourceTag = resourceTag,
        _resourceText = resourceText,
        _resourceType = resourceType,
        _context = context,
        _contextQuantity = contextQuantity,
        _contextType = contextType,
        _date = date,
        _description = description,
        _jurisdiction = jurisdiction,
        _name = name,
        _publisher = publisher,
        _status = status,
        _title = title,
        _url = url,
        _version = version,
        _contextTypeQuantity = contextTypeQuantity,
        _contextTypeValue = contextTypeValue,
        _identifier = identifier,
        super._();

  /// [resourceContent] Search on the entire content of the resource
  final List<SearchParamString> _resourceContent;

  /// [resourceContent] Search on the entire content of the resource
  @override
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent {
    if (_resourceContent is EqualUnmodifiableListView) return _resourceContent;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceContent);
  }

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  final List<SearchParamToken> _resourceFilter;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @override
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter {
    if (_resourceFilter is EqualUnmodifiableListView) return _resourceFilter;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceFilter);
  }

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  final List<SearchParamString> _resourceHas;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @override
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas {
    if (_resourceHas is EqualUnmodifiableListView) return _resourceHas;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceHas);
  }

  /// [resourceId] Logical id of this artifact
  final List<SearchParamToken> _resourceId;

  /// [resourceId] Logical id of this artifact
  @override
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId {
    if (_resourceId is EqualUnmodifiableListView) return _resourceId;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceId);
  }

  /// [resourceLastUpdated] When the resource version last changed
  final List<SearchParamDate> _resourceLastUpdated;

  /// [resourceLastUpdated] When the resource version last changed
  @override
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated {
    if (_resourceLastUpdated is EqualUnmodifiableListView)
      return _resourceLastUpdated;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceLastUpdated);
  }

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  final List<SearchParamString> _resourceList;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @override
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList {
    if (_resourceList is EqualUnmodifiableListView) return _resourceList;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceList);
  }

  /// [resourceProfile] Profiles this resource claims to conform to
  final List<SearchParamUri> _resourceProfile;

  /// [resourceProfile] Profiles this resource claims to conform to
  @override
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile {
    if (_resourceProfile is EqualUnmodifiableListView) return _resourceProfile;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceProfile);
  }

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  final List<SearchParamToken> _resourceQuery;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @override
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery {
    if (_resourceQuery is EqualUnmodifiableListView) return _resourceQuery;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceQuery);
  }

  /// [resourceSecurity] Security Labels applied to this resource
  final List<SearchParamToken> _resourceSecurity;

  /// [resourceSecurity] Security Labels applied to this resource
  @override
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity {
    if (_resourceSecurity is EqualUnmodifiableListView)
      return _resourceSecurity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSecurity);
  }

  /// [resourceSource] Identifies where the resource comes from
  final List<SearchParamUri> _resourceSource;

  /// [resourceSource] Identifies where the resource comes from
  @override
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource {
    if (_resourceSource is EqualUnmodifiableListView) return _resourceSource;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSource);
  }

  /// [resourceTag] Tags applied to this resource
  final List<SearchParamToken> _resourceTag;

  /// [resourceTag] Tags applied to this resource
  @override
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag {
    if (_resourceTag is EqualUnmodifiableListView) return _resourceTag;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceTag);
  }

  /// [resourceText] Search on the narrative text (html) of the resource
  final List<SearchParamString> _resourceText;

  /// [resourceText] Search on the narrative text (html) of the resource
  @override
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText {
    if (_resourceText is EqualUnmodifiableListView) return _resourceText;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceText);
  }

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  final List<SearchParamToken> _resourceType;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @override
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType {
    if (_resourceType is EqualUnmodifiableListView) return _resourceType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceType);
  }

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  final List<SearchParamToken> _context;

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  @override
  @JsonKey()
  List<SearchParamToken> get context {
    if (_context is EqualUnmodifiableListView) return _context;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_context);
  }

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  final List<SearchParamQuantity> _contextQuantity;

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @override
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity {
    if (_contextQuantity is EqualUnmodifiableListView) return _contextQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextQuantity);
  }

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  final List<SearchParamToken> _contextType;

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @override
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType {
    if (_contextType is EqualUnmodifiableListView) return _contextType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextType);
  }

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  final List<SearchParamDate> _date;

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  @override
  @JsonKey()
  List<SearchParamDate> get date {
    if (_date is EqualUnmodifiableListView) return _date;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_date);
  }

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  final List<SearchParamString> _description;

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  @override
  @JsonKey()
  List<SearchParamString> get description {
    if (_description is EqualUnmodifiableListView) return _description;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_description);
  }

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  final List<SearchParamToken> _jurisdiction;

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  @override
  @JsonKey()
  List<SearchParamToken> get jurisdiction {
    if (_jurisdiction is EqualUnmodifiableListView) return _jurisdiction;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_jurisdiction);
  }

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  final List<SearchParamString> _name;

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  @override
  @JsonKey()
  List<SearchParamString> get name {
    if (_name is EqualUnmodifiableListView) return _name;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_name);
  }

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  final List<SearchParamString> _publisher;

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  @override
  @JsonKey()
  List<SearchParamString> get publisher {
    if (_publisher is EqualUnmodifiableListView) return _publisher;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_publisher);
  }

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  final List<SearchParamToken> _status;

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get status {
    if (_status is EqualUnmodifiableListView) return _status;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_status);
  }

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  final List<SearchParamString> _title;

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  @override
  @JsonKey()
  List<SearchParamString> get title {
    if (_title is EqualUnmodifiableListView) return _title;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_title);
  }

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  final List<SearchParamUri> _url;

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  @override
  @JsonKey()
  List<SearchParamUri> get url {
    if (_url is EqualUnmodifiableListView) return _url;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_url);
  }

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  final List<SearchParamToken> _version;

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  @override
  @JsonKey()
  List<SearchParamToken> get version {
    if (_version is EqualUnmodifiableListView) return _version;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_version);
  }

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  final List<SearchParamComposite> _contextTypeQuantity;

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @override
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity {
    if (_contextTypeQuantity is EqualUnmodifiableListView)
      return _contextTypeQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeQuantity);
  }

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  final List<SearchParamComposite> _contextTypeValue;

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @override
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue {
    if (_contextTypeValue is EqualUnmodifiableListView)
      return _contextTypeValue;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeValue);
  }

  /// [identifier] Multiple Resources:
  /// * [CodeSystem](codesystem.html): External identifier for the code system
  /// * [ConceptMap](conceptmap.html): External identifier for the concept map
  /// * [MessageDefinition](messagedefinition.html): External identifier for the message definition
  /// * [StructureDefinition](structuredefinition.html): External identifier for the structure definition
  /// * [StructureMap](structuremap.html): External identifier for the structure map
  /// * [ValueSet](valueset.html): External identifier for the value set
  final List<SearchParamToken> _identifier;

  /// [identifier] Multiple Resources:
  /// * [CodeSystem](codesystem.html): External identifier for the code system
  /// * [ConceptMap](conceptmap.html): External identifier for the concept map
  /// * [MessageDefinition](messagedefinition.html): External identifier for the message definition
  /// * [StructureDefinition](structuredefinition.html): External identifier for the structure definition
  /// * [StructureMap](structuremap.html): External identifier for the structure map
  /// * [ValueSet](valueset.html): External identifier for the value set
  @override
  @JsonKey()
  List<SearchParamToken> get identifier {
    if (_identifier is EqualUnmodifiableListView) return _identifier;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_identifier);
  }

  @override
  String toString() {
    return 'StructureMapSearchParams(resourceContent: $resourceContent, resourceFilter: $resourceFilter, resourceHas: $resourceHas, resourceId: $resourceId, resourceLastUpdated: $resourceLastUpdated, resourceList: $resourceList, resourceProfile: $resourceProfile, resourceQuery: $resourceQuery, resourceSecurity: $resourceSecurity, resourceSource: $resourceSource, resourceTag: $resourceTag, resourceText: $resourceText, resourceType: $resourceType, context: $context, contextQuantity: $contextQuantity, contextType: $contextType, date: $date, description: $description, jurisdiction: $jurisdiction, name: $name, publisher: $publisher, status: $status, title: $title, url: $url, version: $version, contextTypeQuantity: $contextTypeQuantity, contextTypeValue: $contextTypeValue, identifier: $identifier)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_StructureMapSearchParams &&
            const DeepCollectionEquality()
                .equals(other._resourceContent, _resourceContent) &&
            const DeepCollectionEquality()
                .equals(other._resourceFilter, _resourceFilter) &&
            const DeepCollectionEquality()
                .equals(other._resourceHas, _resourceHas) &&
            const DeepCollectionEquality()
                .equals(other._resourceId, _resourceId) &&
            const DeepCollectionEquality()
                .equals(other._resourceLastUpdated, _resourceLastUpdated) &&
            const DeepCollectionEquality()
                .equals(other._resourceList, _resourceList) &&
            const DeepCollectionEquality()
                .equals(other._resourceProfile, _resourceProfile) &&
            const DeepCollectionEquality()
                .equals(other._resourceQuery, _resourceQuery) &&
            const DeepCollectionEquality()
                .equals(other._resourceSecurity, _resourceSecurity) &&
            const DeepCollectionEquality()
                .equals(other._resourceSource, _resourceSource) &&
            const DeepCollectionEquality()
                .equals(other._resourceTag, _resourceTag) &&
            const DeepCollectionEquality()
                .equals(other._resourceText, _resourceText) &&
            const DeepCollectionEquality()
                .equals(other._resourceType, _resourceType) &&
            const DeepCollectionEquality().equals(other._context, _context) &&
            const DeepCollectionEquality()
                .equals(other._contextQuantity, _contextQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextType, _contextType) &&
            const DeepCollectionEquality().equals(other._date, _date) &&
            const DeepCollectionEquality()
                .equals(other._description, _description) &&
            const DeepCollectionEquality()
                .equals(other._jurisdiction, _jurisdiction) &&
            const DeepCollectionEquality().equals(other._name, _name) &&
            const DeepCollectionEquality()
                .equals(other._publisher, _publisher) &&
            const DeepCollectionEquality().equals(other._status, _status) &&
            const DeepCollectionEquality().equals(other._title, _title) &&
            const DeepCollectionEquality().equals(other._url, _url) &&
            const DeepCollectionEquality().equals(other._version, _version) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeQuantity, _contextTypeQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeValue, _contextTypeValue) &&
            const DeepCollectionEquality()
                .equals(other._identifier, _identifier));
  }

  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        const DeepCollectionEquality().hash(_resourceContent),
        const DeepCollectionEquality().hash(_resourceFilter),
        const DeepCollectionEquality().hash(_resourceHas),
        const DeepCollectionEquality().hash(_resourceId),
        const DeepCollectionEquality().hash(_resourceLastUpdated),
        const DeepCollectionEquality().hash(_resourceList),
        const DeepCollectionEquality().hash(_resourceProfile),
        const DeepCollectionEquality().hash(_resourceQuery),
        const DeepCollectionEquality().hash(_resourceSecurity),
        const DeepCollectionEquality().hash(_resourceSource),
        const DeepCollectionEquality().hash(_resourceTag),
        const DeepCollectionEquality().hash(_resourceText),
        const DeepCollectionEquality().hash(_resourceType),
        const DeepCollectionEquality().hash(_context),
        const DeepCollectionEquality().hash(_contextQuantity),
        const DeepCollectionEquality().hash(_contextType),
        const DeepCollectionEquality().hash(_date),
        const DeepCollectionEquality().hash(_description),
        const DeepCollectionEquality().hash(_jurisdiction),
        const DeepCollectionEquality().hash(_name),
        const DeepCollectionEquality().hash(_publisher),
        const DeepCollectionEquality().hash(_status),
        const DeepCollectionEquality().hash(_title),
        const DeepCollectionEquality().hash(_url),
        const DeepCollectionEquality().hash(_version),
        const DeepCollectionEquality().hash(_contextTypeQuantity),
        const DeepCollectionEquality().hash(_contextTypeValue),
        const DeepCollectionEquality().hash(_identifier)
      ]);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_StructureMapSearchParamsCopyWith<_$_StructureMapSearchParams>
      get copyWith => __$$_StructureMapSearchParamsCopyWithImpl<
          _$_StructureMapSearchParams>(this, _$identity);
}

abstract class _StructureMapSearchParams extends StructureMapSearchParams {
  const factory _StructureMapSearchParams(
      {@JsonKey(name: '_content')
          final List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          final List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          final List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          final List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          final List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          final List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          final List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          final List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          final List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          final List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          final List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          final List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          final List<SearchParamToken> resourceType,
      final List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          final List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          final List<SearchParamToken> contextType,
      final List<SearchParamDate> date,
      final List<SearchParamString> description,
      final List<SearchParamToken> jurisdiction,
      final List<SearchParamString> name,
      final List<SearchParamString> publisher,
      final List<SearchParamToken> status,
      final List<SearchParamString> title,
      final List<SearchParamUri> url,
      final List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          final List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          final List<SearchParamComposite> contextTypeValue,
      final List<SearchParamToken> identifier}) = _$_StructureMapSearchParams;
  const _StructureMapSearchParams._() : super._();

  @override

  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent;
  @override

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter;
  @override

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas;
  @override

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId;
  @override

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated;
  @override

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList;
  @override

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile;
  @override

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery;
  @override

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity;
  @override

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource;
  @override

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag;
  @override

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText;
  @override

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType;
  @override

  /// [context] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context assigned to the value set
  List<SearchParamToken> get context;
  @override

  /// [contextQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A quantity- or range-valued use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A quantity- or range-valued use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A quantity- or range-valued use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A quantity- or range-valued use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A quantity- or range-valued use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A quantity- or range-valued use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A quantity- or range-valued use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A quantity- or range-valued use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A quantity- or range-valued use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A quantity- or range-valued use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A quantity- or range-valued use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A quantity- or range-valued use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A quantity- or range-valued use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A quantity- or range-valued use context assigned to the value set
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity;
  @override

  /// [contextType] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A type of use context assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A type of use context assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A type of use context assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A type of use context assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A type of use context assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A type of use context assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A type of use context assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A type of use context assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A type of use context assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A type of use context assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A type of use context assigned to the structure definition
  /// * [StructureMap](structuremap.html): A type of use context assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A type of use context assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A type of use context assigned to the value set
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType;
  @override

  /// [date] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The capability statement publication date
  /// * [CodeSystem](codesystem.html): The code system publication date
  /// * [CompartmentDefinition](compartmentdefinition.html): The compartment definition publication date
  /// * [ConceptMap](conceptmap.html): The concept map publication date
  /// * [GraphDefinition](graphdefinition.html): The graph definition publication date
  /// * [ImplementationGuide](implementationguide.html): The implementation guide publication date
  /// * [MessageDefinition](messagedefinition.html): The message definition publication date
  /// * [NamingSystem](namingsystem.html): The naming system publication date
  /// * [OperationDefinition](operationdefinition.html): The operation definition publication date
  /// * [SearchParameter](searchparameter.html): The search parameter publication date
  /// * [StructureDefinition](structuredefinition.html): The structure definition publication date
  /// * [StructureMap](structuremap.html): The structure map publication date
  /// * [TerminologyCapabilities](terminologycapabilities.html): The terminology capabilities publication date
  /// * [ValueSet](valueset.html): The value set publication date
  List<SearchParamDate> get date;
  @override

  /// [description] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The description of the capability statement
  /// * [CodeSystem](codesystem.html): The description of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The description of the compartment definition
  /// * [ConceptMap](conceptmap.html): The description of the concept map
  /// * [GraphDefinition](graphdefinition.html): The description of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The description of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The description of the message definition
  /// * [NamingSystem](namingsystem.html): The description of the naming system
  /// * [OperationDefinition](operationdefinition.html): The description of the operation definition
  /// * [SearchParameter](searchparameter.html): The description of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The description of the structure definition
  /// * [StructureMap](structuremap.html): The description of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The description of the terminology capabilities
  /// * [ValueSet](valueset.html): The description of the value set
  List<SearchParamString> get description;
  @override

  /// [jurisdiction] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Intended jurisdiction for the capability statement
  /// * [CodeSystem](codesystem.html): Intended jurisdiction for the code system
  /// * [ConceptMap](conceptmap.html): Intended jurisdiction for the concept map
  /// * [GraphDefinition](graphdefinition.html): Intended jurisdiction for the graph definition
  /// * [ImplementationGuide](implementationguide.html): Intended jurisdiction for the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Intended jurisdiction for the message definition
  /// * [NamingSystem](namingsystem.html): Intended jurisdiction for the naming system
  /// * [OperationDefinition](operationdefinition.html): Intended jurisdiction for the operation definition
  /// * [SearchParameter](searchparameter.html): Intended jurisdiction for the search parameter
  /// * [StructureDefinition](structuredefinition.html): Intended jurisdiction for the structure definition
  /// * [StructureMap](structuremap.html): Intended jurisdiction for the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Intended jurisdiction for the terminology capabilities
  /// * [ValueSet](valueset.html): Intended jurisdiction for the value set
  List<SearchParamToken> get jurisdiction;
  @override

  /// [name] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Computationally friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): Computationally friendly name of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Computationally friendly name of the compartment definition
  /// * [ConceptMap](conceptmap.html): Computationally friendly name of the concept map
  /// * [GraphDefinition](graphdefinition.html): Computationally friendly name of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Computationally friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Computationally friendly name of the message definition
  /// * [NamingSystem](namingsystem.html): Computationally friendly name of the naming system
  /// * [OperationDefinition](operationdefinition.html): Computationally friendly name of the operation definition
  /// * [SearchParameter](searchparameter.html): Computationally friendly name of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Computationally friendly name of the structure definition
  /// * [StructureMap](structuremap.html): Computationally friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Computationally friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): Computationally friendly name of the value set
  List<SearchParamString> get name;
  @override

  /// [publisher] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): Name of the publisher of the capability statement
  /// * [CodeSystem](codesystem.html): Name of the publisher of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): Name of the publisher of the compartment definition
  /// * [ConceptMap](conceptmap.html): Name of the publisher of the concept map
  /// * [GraphDefinition](graphdefinition.html): Name of the publisher of the graph definition
  /// * [ImplementationGuide](implementationguide.html): Name of the publisher of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): Name of the publisher of the message definition
  /// * [NamingSystem](namingsystem.html): Name of the publisher of the naming system
  /// * [OperationDefinition](operationdefinition.html): Name of the publisher of the operation definition
  /// * [SearchParameter](searchparameter.html): Name of the publisher of the search parameter
  /// * [StructureDefinition](structuredefinition.html): Name of the publisher of the structure definition
  /// * [StructureMap](structuremap.html): Name of the publisher of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): Name of the publisher of the terminology capabilities
  /// * [ValueSet](valueset.html): Name of the publisher of the value set
  List<SearchParamString> get publisher;
  @override

  /// [status] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The current status of the capability statement
  /// * [CodeSystem](codesystem.html): The current status of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The current status of the compartment definition
  /// * [ConceptMap](conceptmap.html): The current status of the concept map
  /// * [GraphDefinition](graphdefinition.html): The current status of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The current status of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The current status of the message definition
  /// * [NamingSystem](namingsystem.html): The current status of the naming system
  /// * [OperationDefinition](operationdefinition.html): The current status of the operation definition
  /// * [SearchParameter](searchparameter.html): The current status of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The current status of the structure definition
  /// * [StructureMap](structuremap.html): The current status of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The current status of the terminology capabilities
  /// * [ValueSet](valueset.html): The current status of the value set
  List<SearchParamToken> get status;
  @override

  /// [title] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The human-friendly name of the capability statement
  /// * [CodeSystem](codesystem.html): The human-friendly name of the code system
  /// * [ConceptMap](conceptmap.html): The human-friendly name of the concept map
  /// * [ImplementationGuide](implementationguide.html): The human-friendly name of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The human-friendly name of the message definition
  /// * [OperationDefinition](operationdefinition.html): The human-friendly name of the operation definition
  /// * [StructureDefinition](structuredefinition.html): The human-friendly name of the structure definition
  /// * [StructureMap](structuremap.html): The human-friendly name of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The human-friendly name of the terminology capabilities
  /// * [ValueSet](valueset.html): The human-friendly name of the value set
  List<SearchParamString> get title;
  @override

  /// [url] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The uri that identifies the capability statement
  /// * [CodeSystem](codesystem.html): The uri that identifies the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The uri that identifies the compartment definition
  /// * [ConceptMap](conceptmap.html): The uri that identifies the concept map
  /// * [GraphDefinition](graphdefinition.html): The uri that identifies the graph definition
  /// * [ImplementationGuide](implementationguide.html): The uri that identifies the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The uri that identifies the message definition
  /// * [OperationDefinition](operationdefinition.html): The uri that identifies the operation definition
  /// * [SearchParameter](searchparameter.html): The uri that identifies the search parameter
  /// * [StructureDefinition](structuredefinition.html): The uri that identifies the structure definition
  /// * [StructureMap](structuremap.html): The uri that identifies the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The uri that identifies the terminology capabilities
  /// * [ValueSet](valueset.html): The uri that identifies the value set
  List<SearchParamUri> get url;
  @override

  /// [version] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): The business version of the capability statement
  /// * [CodeSystem](codesystem.html): The business version of the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): The business version of the compartment definition
  /// * [ConceptMap](conceptmap.html): The business version of the concept map
  /// * [GraphDefinition](graphdefinition.html): The business version of the graph definition
  /// * [ImplementationGuide](implementationguide.html): The business version of the implementation guide
  /// * [MessageDefinition](messagedefinition.html): The business version of the message definition
  /// * [OperationDefinition](operationdefinition.html): The business version of the operation definition
  /// * [SearchParameter](searchparameter.html): The business version of the search parameter
  /// * [StructureDefinition](structuredefinition.html): The business version of the structure definition
  /// * [StructureMap](structuremap.html): The business version of the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): The business version of the terminology capabilities
  /// * [ValueSet](valueset.html): The business version of the value set
  List<SearchParamToken> get version;
  @override

  /// [contextTypeQuantity] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and quantity- or range-based value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and quantity- or range-based value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and quantity- or range-based value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and quantity- or range-based value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and quantity- or range-based value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and quantity- or range-based value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and quantity- or range-based value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and quantity- or range-based value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and quantity- or range-based value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and quantity- or range-based value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and quantity- or range-based value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and quantity- or range-based value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and quantity- or range-based value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and quantity- or range-based value assigned to the value set
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity;
  @override

  /// [contextTypeValue] Multiple Resources:
  /// * [CapabilityStatement](capabilitystatement.html): A use context type and value assigned to the capability statement
  /// * [CodeSystem](codesystem.html): A use context type and value assigned to the code system
  /// * [CompartmentDefinition](compartmentdefinition.html): A use context type and value assigned to the compartment definition
  /// * [ConceptMap](conceptmap.html): A use context type and value assigned to the concept map
  /// * [GraphDefinition](graphdefinition.html): A use context type and value assigned to the graph definition
  /// * [ImplementationGuide](implementationguide.html): A use context type and value assigned to the implementation guide
  /// * [MessageDefinition](messagedefinition.html): A use context type and value assigned to the message definition
  /// * [NamingSystem](namingsystem.html): A use context type and value assigned to the naming system
  /// * [OperationDefinition](operationdefinition.html): A use context type and value assigned to the operation definition
  /// * [SearchParameter](searchparameter.html): A use context type and value assigned to the search parameter
  /// * [StructureDefinition](structuredefinition.html): A use context type and value assigned to the structure definition
  /// * [StructureMap](structuremap.html): A use context type and value assigned to the structure map
  /// * [TerminologyCapabilities](terminologycapabilities.html): A use context type and value assigned to the terminology capabilities
  /// * [ValueSet](valueset.html): A use context type and value assigned to the value set
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue;
  @override

  /// [identifier] Multiple Resources:
  /// * [CodeSystem](codesystem.html): External identifier for the code system
  /// * [ConceptMap](conceptmap.html): External identifier for the concept map
  /// * [MessageDefinition](messagedefinition.html): External identifier for the message definition
  /// * [StructureDefinition](structuredefinition.html): External identifier for the structure definition
  /// * [StructureMap](structuremap.html): External identifier for the structure map
  /// * [ValueSet](valueset.html): External identifier for the value set
  List<SearchParamToken> get identifier;
  @override
  @JsonKey(ignore: true)
  _$$_StructureMapSearchParamsCopyWith<_$_StructureMapSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
mixin _$ExampleScenarioSearchParams {
  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent =>
      throw _privateConstructorUsedError;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter =>
      throw _privateConstructorUsedError;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas => throw _privateConstructorUsedError;

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId => throw _privateConstructorUsedError;

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated =>
      throw _privateConstructorUsedError;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList =>
      throw _privateConstructorUsedError;

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile =>
      throw _privateConstructorUsedError;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery =>
      throw _privateConstructorUsedError;

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity =>
      throw _privateConstructorUsedError;

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource => throw _privateConstructorUsedError;

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag => throw _privateConstructorUsedError;

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText =>
      throw _privateConstructorUsedError;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType => throw _privateConstructorUsedError;

  /// [context] A use context assigned to the example scenario
  List<SearchParamToken> get context => throw _privateConstructorUsedError;

  /// [contextQuantity] A quantity- or range-valued use context assigned to the example scenario
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity =>
      throw _privateConstructorUsedError;

  /// [contextType] A type of use context assigned to the example scenario
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType => throw _privateConstructorUsedError;

  /// [date] The example scenario publication date
  List<SearchParamDate> get date => throw _privateConstructorUsedError;

  /// [identifier] External identifier for the example scenario
  List<SearchParamToken> get identifier => throw _privateConstructorUsedError;

  /// [jurisdiction] Intended jurisdiction for the example scenario
  List<SearchParamToken> get jurisdiction => throw _privateConstructorUsedError;

  /// [name] Computationally friendly name of the example scenario
  List<SearchParamString> get name => throw _privateConstructorUsedError;

  /// [publisher] Name of the publisher of the example scenario
  List<SearchParamString> get publisher => throw _privateConstructorUsedError;

  /// [status] The current status of the example scenario
  List<SearchParamToken> get status => throw _privateConstructorUsedError;

  /// [url] The uri that identifies the example scenario
  List<SearchParamUri> get url => throw _privateConstructorUsedError;

  /// [version] The business version of the example scenario
  List<SearchParamToken> get version => throw _privateConstructorUsedError;

  /// [contextTypeQuantity] A use context type and quantity- or range-based value assigned to the example scenario
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity =>
      throw _privateConstructorUsedError;

  /// [contextTypeValue] A use context type and value assigned to the example scenario
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue =>
      throw _privateConstructorUsedError;

  @JsonKey(ignore: true)
  $ExampleScenarioSearchParamsCopyWith<ExampleScenarioSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $ExampleScenarioSearchParamsCopyWith<$Res> {
  factory $ExampleScenarioSearchParamsCopyWith(
          ExampleScenarioSearchParams value,
          $Res Function(ExampleScenarioSearchParams) then) =
      _$ExampleScenarioSearchParamsCopyWithImpl<$Res,
          ExampleScenarioSearchParams>;
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamToken> identifier,
      List<SearchParamToken> jurisdiction,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue});
}

/// @nodoc
class _$ExampleScenarioSearchParamsCopyWithImpl<$Res,
        $Val extends ExampleScenarioSearchParams>
    implements $ExampleScenarioSearchParamsCopyWith<$Res> {
  _$ExampleScenarioSearchParamsCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? identifier = null,
    Object? jurisdiction = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
  }) {
    return _then(_value.copyWith(
      resourceContent: null == resourceContent
          ? _value.resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value.resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value.resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value.resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value.resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value.resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value.resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value.resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value.resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value.resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value.resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value.resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value.resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value.context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value.contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value.contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value.date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      identifier: null == identifier
          ? _value.identifier
          : identifier // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      jurisdiction: null == jurisdiction
          ? _value.jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value.publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      url: null == url
          ? _value.url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value.version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value.contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value.contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$_ExampleScenarioSearchParamsCopyWith<$Res>
    implements $ExampleScenarioSearchParamsCopyWith<$Res> {
  factory _$$_ExampleScenarioSearchParamsCopyWith(
          _$_ExampleScenarioSearchParams value,
          $Res Function(_$_ExampleScenarioSearchParams) then) =
      __$$_ExampleScenarioSearchParamsCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: '_content')
          List<SearchParamString> resourceContent,
      @JsonKey(name: '_filter')
          List<SearchParamToken> resourceFilter,
      @JsonKey(name: '_has')
          List<SearchParamString> resourceHas,
      @JsonKey(name: '_id')
          List<SearchParamToken> resourceId,
      @JsonKey(name: '_lastUpdated')
          List<SearchParamDate> resourceLastUpdated,
      @JsonKey(name: '_list')
          List<SearchParamString> resourceList,
      @JsonKey(name: '_profile')
          List<SearchParamUri> resourceProfile,
      @JsonKey(name: '_query')
          List<SearchParamToken> resourceQuery,
      @JsonKey(name: '_security')
          List<SearchParamToken> resourceSecurity,
      @JsonKey(name: '_source')
          List<SearchParamUri> resourceSource,
      @JsonKey(name: '_tag')
          List<SearchParamToken> resourceTag,
      @JsonKey(name: '_text')
          List<SearchParamString> resourceText,
      @JsonKey(name: '_type')
          List<SearchParamToken> resourceType,
      List<SearchParamToken> context,
      @JsonKey(name: 'context-quantity')
          List<SearchParamQuantity> contextQuantity,
      @JsonKey(name: 'context-type')
          List<SearchParamToken> contextType,
      List<SearchParamDate> date,
      List<SearchParamToken> identifier,
      List<SearchParamToken> jurisdiction,
      List<SearchParamString> name,
      List<SearchParamString> publisher,
      List<SearchParamToken> status,
      List<SearchParamUri> url,
      List<SearchParamToken> version,
      @JsonKey(name: 'context-type-quantity')
          List<SearchParamComposite> contextTypeQuantity,
      @JsonKey(name: 'context-type-value')
          List<SearchParamComposite> contextTypeValue});
}

/// @nodoc
class __$$_ExampleScenarioSearchParamsCopyWithImpl<$Res>
    extends _$ExampleScenarioSearchParamsCopyWithImpl<$Res,
        _$_ExampleScenarioSearchParams>
    implements _$$_ExampleScenarioSearchParamsCopyWith<$Res> {
  __$$_ExampleScenarioSearchParamsCopyWithImpl(
      _$_ExampleScenarioSearchParams _value,
      $Res Function(_$_ExampleScenarioSearchParams) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? resourceContent = null,
    Object? resourceFilter = null,
    Object? resourceHas = null,
    Object? resourceId = null,
    Object? resourceLastUpdated = null,
    Object? resourceList = null,
    Object? resourceProfile = null,
    Object? resourceQuery = null,
    Object? resourceSecurity = null,
    Object? resourceSource = null,
    Object? resourceTag = null,
    Object? resourceText = null,
    Object? resourceType = null,
    Object? context = null,
    Object? contextQuantity = null,
    Object? contextType = null,
    Object? date = null,
    Object? identifier = null,
    Object? jurisdiction = null,
    Object? name = null,
    Object? publisher = null,
    Object? status = null,
    Object? url = null,
    Object? version = null,
    Object? contextTypeQuantity = null,
    Object? contextTypeValue = null,
  }) {
    return _then(_$_ExampleScenarioSearchParams(
      resourceContent: null == resourceContent
          ? _value._resourceContent
          : resourceContent // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceFilter: null == resourceFilter
          ? _value._resourceFilter
          : resourceFilter // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceHas: null == resourceHas
          ? _value._resourceHas
          : resourceHas // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceId: null == resourceId
          ? _value._resourceId
          : resourceId // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceLastUpdated: null == resourceLastUpdated
          ? _value._resourceLastUpdated
          : resourceLastUpdated // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      resourceList: null == resourceList
          ? _value._resourceList
          : resourceList // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceProfile: null == resourceProfile
          ? _value._resourceProfile
          : resourceProfile // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceQuery: null == resourceQuery
          ? _value._resourceQuery
          : resourceQuery // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSecurity: null == resourceSecurity
          ? _value._resourceSecurity
          : resourceSecurity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceSource: null == resourceSource
          ? _value._resourceSource
          : resourceSource // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      resourceTag: null == resourceTag
          ? _value._resourceTag
          : resourceTag // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      resourceText: null == resourceText
          ? _value._resourceText
          : resourceText // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      resourceType: null == resourceType
          ? _value._resourceType
          : resourceType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      context: null == context
          ? _value._context
          : context // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextQuantity: null == contextQuantity
          ? _value._contextQuantity
          : contextQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamQuantity>,
      contextType: null == contextType
          ? _value._contextType
          : contextType // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      date: null == date
          ? _value._date
          : date // ignore: cast_nullable_to_non_nullable
              as List<SearchParamDate>,
      identifier: null == identifier
          ? _value._identifier
          : identifier // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      jurisdiction: null == jurisdiction
          ? _value._jurisdiction
          : jurisdiction // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      name: null == name
          ? _value._name
          : name // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      publisher: null == publisher
          ? _value._publisher
          : publisher // ignore: cast_nullable_to_non_nullable
              as List<SearchParamString>,
      status: null == status
          ? _value._status
          : status // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      url: null == url
          ? _value._url
          : url // ignore: cast_nullable_to_non_nullable
              as List<SearchParamUri>,
      version: null == version
          ? _value._version
          : version // ignore: cast_nullable_to_non_nullable
              as List<SearchParamToken>,
      contextTypeQuantity: null == contextTypeQuantity
          ? _value._contextTypeQuantity
          : contextTypeQuantity // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
      contextTypeValue: null == contextTypeValue
          ? _value._contextTypeValue
          : contextTypeValue // ignore: cast_nullable_to_non_nullable
              as List<SearchParamComposite>,
    ));
  }
}

/// @nodoc

class _$_ExampleScenarioSearchParams extends _ExampleScenarioSearchParams {
  const _$_ExampleScenarioSearchParams(
      {@JsonKey(name: '_content')
          final List<SearchParamString> resourceContent = const [],
      @JsonKey(name: '_filter')
          final List<SearchParamToken> resourceFilter = const [],
      @JsonKey(name: '_has')
          final List<SearchParamString> resourceHas = const [],
      @JsonKey(name: '_id')
          final List<SearchParamToken> resourceId = const [],
      @JsonKey(name: '_lastUpdated')
          final List<SearchParamDate> resourceLastUpdated = const [],
      @JsonKey(name: '_list')
          final List<SearchParamString> resourceList = const [],
      @JsonKey(name: '_profile')
          final List<SearchParamUri> resourceProfile = const [],
      @JsonKey(name: '_query')
          final List<SearchParamToken> resourceQuery = const [],
      @JsonKey(name: '_security')
          final List<SearchParamToken> resourceSecurity = const [],
      @JsonKey(name: '_source')
          final List<SearchParamUri> resourceSource = const [],
      @JsonKey(name: '_tag')
          final List<SearchParamToken> resourceTag = const [],
      @JsonKey(name: '_text')
          final List<SearchParamString> resourceText = const [],
      @JsonKey(name: '_type')
          final List<SearchParamToken> resourceType = const [],
      final List<SearchParamToken> context = const [],
      @JsonKey(name: 'context-quantity')
          final List<SearchParamQuantity> contextQuantity = const [],
      @JsonKey(name: 'context-type')
          final List<SearchParamToken> contextType = const [],
      final List<SearchParamDate> date = const [],
      final List<SearchParamToken> identifier = const [],
      final List<SearchParamToken> jurisdiction = const [],
      final List<SearchParamString> name = const [],
      final List<SearchParamString> publisher = const [],
      final List<SearchParamToken> status = const [],
      final List<SearchParamUri> url = const [],
      final List<SearchParamToken> version = const [],
      @JsonKey(name: 'context-type-quantity')
          final List<SearchParamComposite> contextTypeQuantity = const [],
      @JsonKey(name: 'context-type-value')
          final List<SearchParamComposite> contextTypeValue = const []})
      : _resourceContent = resourceContent,
        _resourceFilter = resourceFilter,
        _resourceHas = resourceHas,
        _resourceId = resourceId,
        _resourceLastUpdated = resourceLastUpdated,
        _resourceList = resourceList,
        _resourceProfile = resourceProfile,
        _resourceQuery = resourceQuery,
        _resourceSecurity = resourceSecurity,
        _resourceSource = resourceSource,
        _resourceTag = resourceTag,
        _resourceText = resourceText,
        _resourceType = resourceType,
        _context = context,
        _contextQuantity = contextQuantity,
        _contextType = contextType,
        _date = date,
        _identifier = identifier,
        _jurisdiction = jurisdiction,
        _name = name,
        _publisher = publisher,
        _status = status,
        _url = url,
        _version = version,
        _contextTypeQuantity = contextTypeQuantity,
        _contextTypeValue = contextTypeValue,
        super._();

  /// [resourceContent] Search on the entire content of the resource
  final List<SearchParamString> _resourceContent;

  /// [resourceContent] Search on the entire content of the resource
  @override
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent {
    if (_resourceContent is EqualUnmodifiableListView) return _resourceContent;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceContent);
  }

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  final List<SearchParamToken> _resourceFilter;

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @override
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter {
    if (_resourceFilter is EqualUnmodifiableListView) return _resourceFilter;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceFilter);
  }

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  final List<SearchParamString> _resourceHas;

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @override
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas {
    if (_resourceHas is EqualUnmodifiableListView) return _resourceHas;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceHas);
  }

  /// [resourceId] Logical id of this artifact
  final List<SearchParamToken> _resourceId;

  /// [resourceId] Logical id of this artifact
  @override
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId {
    if (_resourceId is EqualUnmodifiableListView) return _resourceId;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceId);
  }

  /// [resourceLastUpdated] When the resource version last changed
  final List<SearchParamDate> _resourceLastUpdated;

  /// [resourceLastUpdated] When the resource version last changed
  @override
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated {
    if (_resourceLastUpdated is EqualUnmodifiableListView)
      return _resourceLastUpdated;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceLastUpdated);
  }

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  final List<SearchParamString> _resourceList;

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @override
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList {
    if (_resourceList is EqualUnmodifiableListView) return _resourceList;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceList);
  }

  /// [resourceProfile] Profiles this resource claims to conform to
  final List<SearchParamUri> _resourceProfile;

  /// [resourceProfile] Profiles this resource claims to conform to
  @override
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile {
    if (_resourceProfile is EqualUnmodifiableListView) return _resourceProfile;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceProfile);
  }

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  final List<SearchParamToken> _resourceQuery;

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @override
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery {
    if (_resourceQuery is EqualUnmodifiableListView) return _resourceQuery;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceQuery);
  }

  /// [resourceSecurity] Security Labels applied to this resource
  final List<SearchParamToken> _resourceSecurity;

  /// [resourceSecurity] Security Labels applied to this resource
  @override
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity {
    if (_resourceSecurity is EqualUnmodifiableListView)
      return _resourceSecurity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSecurity);
  }

  /// [resourceSource] Identifies where the resource comes from
  final List<SearchParamUri> _resourceSource;

  /// [resourceSource] Identifies where the resource comes from
  @override
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource {
    if (_resourceSource is EqualUnmodifiableListView) return _resourceSource;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceSource);
  }

  /// [resourceTag] Tags applied to this resource
  final List<SearchParamToken> _resourceTag;

  /// [resourceTag] Tags applied to this resource
  @override
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag {
    if (_resourceTag is EqualUnmodifiableListView) return _resourceTag;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceTag);
  }

  /// [resourceText] Search on the narrative text (html) of the resource
  final List<SearchParamString> _resourceText;

  /// [resourceText] Search on the narrative text (html) of the resource
  @override
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText {
    if (_resourceText is EqualUnmodifiableListView) return _resourceText;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceText);
  }

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  final List<SearchParamToken> _resourceType;

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @override
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType {
    if (_resourceType is EqualUnmodifiableListView) return _resourceType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_resourceType);
  }

  /// [context] A use context assigned to the example scenario
  final List<SearchParamToken> _context;

  /// [context] A use context assigned to the example scenario
  @override
  @JsonKey()
  List<SearchParamToken> get context {
    if (_context is EqualUnmodifiableListView) return _context;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_context);
  }

  /// [contextQuantity] A quantity- or range-valued use context assigned to the example scenario
  final List<SearchParamQuantity> _contextQuantity;

  /// [contextQuantity] A quantity- or range-valued use context assigned to the example scenario
  @override
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity {
    if (_contextQuantity is EqualUnmodifiableListView) return _contextQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextQuantity);
  }

  /// [contextType] A type of use context assigned to the example scenario
  final List<SearchParamToken> _contextType;

  /// [contextType] A type of use context assigned to the example scenario
  @override
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType {
    if (_contextType is EqualUnmodifiableListView) return _contextType;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextType);
  }

  /// [date] The example scenario publication date
  final List<SearchParamDate> _date;

  /// [date] The example scenario publication date
  @override
  @JsonKey()
  List<SearchParamDate> get date {
    if (_date is EqualUnmodifiableListView) return _date;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_date);
  }

  /// [identifier] External identifier for the example scenario
  final List<SearchParamToken> _identifier;

  /// [identifier] External identifier for the example scenario
  @override
  @JsonKey()
  List<SearchParamToken> get identifier {
    if (_identifier is EqualUnmodifiableListView) return _identifier;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_identifier);
  }

  /// [jurisdiction] Intended jurisdiction for the example scenario
  final List<SearchParamToken> _jurisdiction;

  /// [jurisdiction] Intended jurisdiction for the example scenario
  @override
  @JsonKey()
  List<SearchParamToken> get jurisdiction {
    if (_jurisdiction is EqualUnmodifiableListView) return _jurisdiction;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_jurisdiction);
  }

  /// [name] Computationally friendly name of the example scenario
  final List<SearchParamString> _name;

  /// [name] Computationally friendly name of the example scenario
  @override
  @JsonKey()
  List<SearchParamString> get name {
    if (_name is EqualUnmodifiableListView) return _name;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_name);
  }

  /// [publisher] Name of the publisher of the example scenario
  final List<SearchParamString> _publisher;

  /// [publisher] Name of the publisher of the example scenario
  @override
  @JsonKey()
  List<SearchParamString> get publisher {
    if (_publisher is EqualUnmodifiableListView) return _publisher;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_publisher);
  }

  /// [status] The current status of the example scenario
  final List<SearchParamToken> _status;

  /// [status] The current status of the example scenario
  @override
  @JsonKey()
  List<SearchParamToken> get status {
    if (_status is EqualUnmodifiableListView) return _status;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_status);
  }

  /// [url] The uri that identifies the example scenario
  final List<SearchParamUri> _url;

  /// [url] The uri that identifies the example scenario
  @override
  @JsonKey()
  List<SearchParamUri> get url {
    if (_url is EqualUnmodifiableListView) return _url;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_url);
  }

  /// [version] The business version of the example scenario
  final List<SearchParamToken> _version;

  /// [version] The business version of the example scenario
  @override
  @JsonKey()
  List<SearchParamToken> get version {
    if (_version is EqualUnmodifiableListView) return _version;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_version);
  }

  /// [contextTypeQuantity] A use context type and quantity- or range-based value assigned to the example scenario
  final List<SearchParamComposite> _contextTypeQuantity;

  /// [contextTypeQuantity] A use context type and quantity- or range-based value assigned to the example scenario
  @override
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity {
    if (_contextTypeQuantity is EqualUnmodifiableListView)
      return _contextTypeQuantity;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeQuantity);
  }

  /// [contextTypeValue] A use context type and value assigned to the example scenario
  final List<SearchParamComposite> _contextTypeValue;

  /// [contextTypeValue] A use context type and value assigned to the example scenario
  @override
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue {
    if (_contextTypeValue is EqualUnmodifiableListView)
      return _contextTypeValue;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_contextTypeValue);
  }

  @override
  String toString() {
    return 'ExampleScenarioSearchParams(resourceContent: $resourceContent, resourceFilter: $resourceFilter, resourceHas: $resourceHas, resourceId: $resourceId, resourceLastUpdated: $resourceLastUpdated, resourceList: $resourceList, resourceProfile: $resourceProfile, resourceQuery: $resourceQuery, resourceSecurity: $resourceSecurity, resourceSource: $resourceSource, resourceTag: $resourceTag, resourceText: $resourceText, resourceType: $resourceType, context: $context, contextQuantity: $contextQuantity, contextType: $contextType, date: $date, identifier: $identifier, jurisdiction: $jurisdiction, name: $name, publisher: $publisher, status: $status, url: $url, version: $version, contextTypeQuantity: $contextTypeQuantity, contextTypeValue: $contextTypeValue)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_ExampleScenarioSearchParams &&
            const DeepCollectionEquality()
                .equals(other._resourceContent, _resourceContent) &&
            const DeepCollectionEquality()
                .equals(other._resourceFilter, _resourceFilter) &&
            const DeepCollectionEquality()
                .equals(other._resourceHas, _resourceHas) &&
            const DeepCollectionEquality()
                .equals(other._resourceId, _resourceId) &&
            const DeepCollectionEquality()
                .equals(other._resourceLastUpdated, _resourceLastUpdated) &&
            const DeepCollectionEquality()
                .equals(other._resourceList, _resourceList) &&
            const DeepCollectionEquality()
                .equals(other._resourceProfile, _resourceProfile) &&
            const DeepCollectionEquality()
                .equals(other._resourceQuery, _resourceQuery) &&
            const DeepCollectionEquality()
                .equals(other._resourceSecurity, _resourceSecurity) &&
            const DeepCollectionEquality()
                .equals(other._resourceSource, _resourceSource) &&
            const DeepCollectionEquality()
                .equals(other._resourceTag, _resourceTag) &&
            const DeepCollectionEquality()
                .equals(other._resourceText, _resourceText) &&
            const DeepCollectionEquality()
                .equals(other._resourceType, _resourceType) &&
            const DeepCollectionEquality().equals(other._context, _context) &&
            const DeepCollectionEquality()
                .equals(other._contextQuantity, _contextQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextType, _contextType) &&
            const DeepCollectionEquality().equals(other._date, _date) &&
            const DeepCollectionEquality()
                .equals(other._identifier, _identifier) &&
            const DeepCollectionEquality()
                .equals(other._jurisdiction, _jurisdiction) &&
            const DeepCollectionEquality().equals(other._name, _name) &&
            const DeepCollectionEquality()
                .equals(other._publisher, _publisher) &&
            const DeepCollectionEquality().equals(other._status, _status) &&
            const DeepCollectionEquality().equals(other._url, _url) &&
            const DeepCollectionEquality().equals(other._version, _version) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeQuantity, _contextTypeQuantity) &&
            const DeepCollectionEquality()
                .equals(other._contextTypeValue, _contextTypeValue));
  }

  @override
  int get hashCode => Object.hashAll([
        runtimeType,
        const DeepCollectionEquality().hash(_resourceContent),
        const DeepCollectionEquality().hash(_resourceFilter),
        const DeepCollectionEquality().hash(_resourceHas),
        const DeepCollectionEquality().hash(_resourceId),
        const DeepCollectionEquality().hash(_resourceLastUpdated),
        const DeepCollectionEquality().hash(_resourceList),
        const DeepCollectionEquality().hash(_resourceProfile),
        const DeepCollectionEquality().hash(_resourceQuery),
        const DeepCollectionEquality().hash(_resourceSecurity),
        const DeepCollectionEquality().hash(_resourceSource),
        const DeepCollectionEquality().hash(_resourceTag),
        const DeepCollectionEquality().hash(_resourceText),
        const DeepCollectionEquality().hash(_resourceType),
        const DeepCollectionEquality().hash(_context),
        const DeepCollectionEquality().hash(_contextQuantity),
        const DeepCollectionEquality().hash(_contextType),
        const DeepCollectionEquality().hash(_date),
        const DeepCollectionEquality().hash(_identifier),
        const DeepCollectionEquality().hash(_jurisdiction),
        const DeepCollectionEquality().hash(_name),
        const DeepCollectionEquality().hash(_publisher),
        const DeepCollectionEquality().hash(_status),
        const DeepCollectionEquality().hash(_url),
        const DeepCollectionEquality().hash(_version),
        const DeepCollectionEquality().hash(_contextTypeQuantity),
        const DeepCollectionEquality().hash(_contextTypeValue)
      ]);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_ExampleScenarioSearchParamsCopyWith<_$_ExampleScenarioSearchParams>
      get copyWith => __$$_ExampleScenarioSearchParamsCopyWithImpl<
          _$_ExampleScenarioSearchParams>(this, _$identity);
}

abstract class _ExampleScenarioSearchParams
    extends ExampleScenarioSearchParams {
  const factory _ExampleScenarioSearchParams(
          {@JsonKey(name: '_content')
              final List<SearchParamString> resourceContent,
          @JsonKey(name: '_filter')
              final List<SearchParamToken> resourceFilter,
          @JsonKey(name: '_has')
              final List<SearchParamString> resourceHas,
          @JsonKey(name: '_id')
              final List<SearchParamToken> resourceId,
          @JsonKey(name: '_lastUpdated')
              final List<SearchParamDate> resourceLastUpdated,
          @JsonKey(name: '_list')
              final List<SearchParamString> resourceList,
          @JsonKey(name: '_profile')
              final List<SearchParamUri> resourceProfile,
          @JsonKey(name: '_query')
              final List<SearchParamToken> resourceQuery,
          @JsonKey(name: '_security')
              final List<SearchParamToken> resourceSecurity,
          @JsonKey(name: '_source')
              final List<SearchParamUri> resourceSource,
          @JsonKey(name: '_tag')
              final List<SearchParamToken> resourceTag,
          @JsonKey(name: '_text')
              final List<SearchParamString> resourceText,
          @JsonKey(name: '_type')
              final List<SearchParamToken> resourceType,
          final List<SearchParamToken> context,
          @JsonKey(name: 'context-quantity')
              final List<SearchParamQuantity> contextQuantity,
          @JsonKey(name: 'context-type')
              final List<SearchParamToken> contextType,
          final List<SearchParamDate> date,
          final List<SearchParamToken> identifier,
          final List<SearchParamToken> jurisdiction,
          final List<SearchParamString> name,
          final List<SearchParamString> publisher,
          final List<SearchParamToken> status,
          final List<SearchParamUri> url,
          final List<SearchParamToken> version,
          @JsonKey(name: 'context-type-quantity')
              final List<SearchParamComposite> contextTypeQuantity,
          @JsonKey(name: 'context-type-value')
              final List<SearchParamComposite> contextTypeValue}) =
      _$_ExampleScenarioSearchParams;
  const _ExampleScenarioSearchParams._() : super._();

  @override

  /// [resourceContent] Search on the entire content of the resource
  @JsonKey(name: '_content')
  List<SearchParamString> get resourceContent;
  @override

  /// [resourceFilter] Filter search parameter which supports a more sophisticated grammar for searching. See [documentation](search_filter.html) for further details
  @JsonKey(name: '_filter')
  List<SearchParamToken> get resourceFilter;
  @override

  /// [resourceHas] Provides limited support for reverse chaining - that is, selecting resources based on the properties of resources that refer to them (instead of chaining where resources can be selected based on the properties of resources that they refer to). See the FHIR search page for further documentation
  @JsonKey(name: '_has')
  List<SearchParamString> get resourceHas;
  @override

  /// [resourceId] Logical id of this artifact
  @JsonKey(name: '_id')
  List<SearchParamToken> get resourceId;
  @override

  /// [resourceLastUpdated] When the resource version last changed
  @JsonKey(name: '_lastUpdated')
  List<SearchParamDate> get resourceLastUpdated;
  @override

  /// [resourceList] All resources in nominated list (by id, Type/id, url or one of the magic List types)
  @JsonKey(name: '_list')
  List<SearchParamString> get resourceList;
  @override

  /// [resourceProfile] Profiles this resource claims to conform to
  @JsonKey(name: '_profile')
  List<SearchParamUri> get resourceProfile;
  @override

  /// [resourceQuery] A custom search profile that describes a specific defined query operation
  @JsonKey(name: '_query')
  List<SearchParamToken> get resourceQuery;
  @override

  /// [resourceSecurity] Security Labels applied to this resource
  @JsonKey(name: '_security')
  List<SearchParamToken> get resourceSecurity;
  @override

  /// [resourceSource] Identifies where the resource comes from
  @JsonKey(name: '_source')
  List<SearchParamUri> get resourceSource;
  @override

  /// [resourceTag] Tags applied to this resource
  @JsonKey(name: '_tag')
  List<SearchParamToken> get resourceTag;
  @override

  /// [resourceText] Search on the narrative text (html) of the resource
  @JsonKey(name: '_text')
  List<SearchParamString> get resourceText;
  @override

  /// [resourceType] Used when a search is performed in a context which doesn't limit the search to indicate which types are being searched. See the FHIR search page for further discussion
  @JsonKey(name: '_type')
  List<SearchParamToken> get resourceType;
  @override

  /// [context] A use context assigned to the example scenario
  List<SearchParamToken> get context;
  @override

  /// [contextQuantity] A quantity- or range-valued use context assigned to the example scenario
  @JsonKey(name: 'context-quantity')
  List<SearchParamQuantity> get contextQuantity;
  @override

  /// [contextType] A type of use context assigned to the example scenario
  @JsonKey(name: 'context-type')
  List<SearchParamToken> get contextType;
  @override

  /// [date] The example scenario publication date
  List<SearchParamDate> get date;
  @override

  /// [identifier] External identifier for the example scenario
  List<SearchParamToken> get identifier;
  @override

  /// [jurisdiction] Intended jurisdiction for the example scenario
  List<SearchParamToken> get jurisdiction;
  @override

  /// [name] Computationally friendly name of the example scenario
  List<SearchParamString> get name;
  @override

  /// [publisher] Name of the publisher of the example scenario
  List<SearchParamString> get publisher;
  @override

  /// [status] The current status of the example scenario
  List<SearchParamToken> get status;
  @override

  /// [url] The uri that identifies the example scenario
  List<SearchParamUri> get url;
  @override

  /// [version] The business version of the example scenario
  List<SearchParamToken> get version;
  @override

  /// [contextTypeQuantity] A use context type and quantity- or range-based value assigned to the example scenario
  @JsonKey(name: 'context-type-quantity')
  List<SearchParamComposite> get contextTypeQuantity;
  @override

  /// [contextTypeValue] A use context type and value assigned to the example scenario
  @JsonKey(name: 'context-type-value')
  List<SearchParamComposite> get contextTypeValue;
  @override
  @JsonKey(ignore: true)
  _$$_ExampleScenarioSearchParamsCopyWith<_$_ExampleScenarioSearchParams>
      get copyWith => throw _privateConstructorUsedError;
}
